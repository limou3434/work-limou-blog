import{_ as o,c,b as a,o as d}from"./app-DcSFSDZX.js";const i="/work-blog-website/assets/image-20241113163023660-BpaRuvgZ.png",t="/work-blog-website/assets/image-20240601220900859-JkzSiDIA.png",n="/work-blog-website/assets/image-20240601221011485-CNK-le2D.png",s="/work-blog-website/assets/image-20240601221035076-z48h2_yw.png",r={};function p(h,e){return d(),c("div",null,e[0]||(e[0]=[a('<h2 id="_1-应用层" tabindex="-1"><a class="header-anchor" href="#_1-应用层"><span>1.应用层</span></a></h2><h3 id="_1-1-dns-协议" tabindex="-1"><a class="header-anchor" href="#_1-1-dns-协议"><span>1.1.DNS 协议</span></a></h3><h4 id="_1-1-1-域名解析概念" tabindex="-1"><a class="header-anchor" href="#_1-1-1-域名解析概念"><span>1.1.1.域名解析概念</span></a></h4><p><code>DNS</code> 是一套从域名映射到 <code>IP</code> 的系统，属于应用层协议。内部大多使用 <code>UDP</code> 协议，并且多用于浏览器的 <code>URL</code> 解析中。主要是方便人们使用容易记忆的域名来访问难以记忆的 <code>ip</code> 地址字符串。因此域名其实不是因为技术诞生的，只是为了方便不了解技术的人们使用。而一个完整域名一般可以切分为几类：</p><ol><li><strong>顶级域名(TLD)</strong>： <ul><li><strong>通用顶级域名(gTLD)</strong>，如 <code>.com</code>、<code>.net</code>、<code>.org</code> 等，可以被任何人注册使用</li><li><strong>赞助顶级域名(sTLD)</strong>，由某些组织或行业赞助，如 <code>.jobs</code>、<code>.travel</code></li><li><strong>国家代码顶级域名(ccTLD)</strong>，由各个国家或地区管理，如 <code>.cn</code>（中国）、<code>.us</code>（美国）、<code>.uk</code>（英国）</li><li><strong>新顶级域名(nTLD)</strong>，随着互联网的发展，新引入的顶级域名，如 <code>.blog</code>、<code>.online</code></li><li><strong>保留域名</strong>，根据 <code>DNS</code> 规范，某些域名被保留，不能被注册或使用，如 <code>.test</code>、<code>.example</code></li></ul></li><li><strong>二级域名(SLD)</strong>，这是位于顶级域名之下的域名，如在 <code>google.com</code> 中的 <code>google</code> 就是二级域名</li><li><strong>子域名(Subdomain)</strong>，位于二级域名之下，可以用于组织内部的不同部门或服务，如 <code>mail.google.com</code> 中的 <code>mail</code></li></ol><p>而域名解析就需要根域名服务器，只要这个服务器挂掉，所有的域名解析都会停止（但是能使用 <code>ip</code> 地址访问）。在 <code>Linux</code> 下也有域名解析的工具 <code>dig</code>，您可以稍微使用一下。</p><h4 id="_1-1-2-域名解析原理" tabindex="-1"><a class="header-anchor" href="#_1-1-2-域名解析原理"><span>1.1.2.域名解析原理</span></a></h4><p>域名是根据 <code>.</code> 来分级的，域名越靠右边，层级越高，而一个层级就被称作域。而 <code>DNS</code> 服务器也会分级，这些域名的信息会被注册到 <code>DNS</code> 服务器中，这里我们假设一个 <code>DNS</code> 服务器只存储一个域的信息。</p><ul><li>没有域名解析的服务器，访问各个服务器上的文件数据、服务程序、远程操作...时，都需要使用 <code>ip + port</code> 来访问。</li><li>我们尝试解析一个域名 <code>http://limou.work.com</code>，我们需要向最近的 <code>DNS</code> 服务器请求，<code>DNS</code> 服务器会接受 <code>http://limou.work.com.</code> 作为解析</li><li>这里有个前提，根域 <code>DNS</code> 服务器的 <code>IP + PORT</code> 每个下载好的浏览器都是知道的</li><li>开始请求，客户端最近的 <code>DNS</code> 服务器根据 <code>URL</code> 最后一个 <code>.</code> 会向根域服务器请求，根域服务器解析自己的键值表，找到 <code>com</code> 对应的域服务器的 <code>IP</code> 地址，就会返回这个 <code>IP</code> 给上面那台离客户端最近的 <code>DNS</code> 服务器</li><li>继续请求，客户端最近的 <code>DNS</code> 服务器根据 <code>URL</code> 最后一个 <code>com</code> 会向较下级域服务器请求，较下级域服务器解析自己的键值表，找到 <code>work</code> 对应的域服务器的 <code>IP</code> 地址，就会返回这个 <code>IP</code> 给上面那台离客户端最近的 <code>DNS</code> 服务器</li><li>继续请求，客户端最近的 <code>DNS</code> 服务器根据 <code>URL</code> 最后一个 <code>work</code> 会向更下级域服务器请求，更下级域服务器解析自己的键值表，找到 <code>limou</code> 对应的域服务器的 <code>IP</code> 地址，就会返回这个 <code>IP</code> 给上面那台离客户端最近的 <code>DNS</code> 服务器</li><li>这样逐步解析，就会找到另外一台主机的 <code>IP</code> 地址，条件允许的话，就可以开始通信了</li><li>不过这样的消耗是很大的，因此就需要做缓存机制，在距离客户端机器最近的 <code>DNS</code> 服务器中，会把常用的 <code>IP</code> 和 <code>域名</code> 键值对数据缓存起来，方便快速访问，降低解析压力</li></ul><h4 id="_1-1-3-域名解析图解" tabindex="-1"><a class="header-anchor" href="#_1-1-3-域名解析图解"><span>1.1.3.域名解析图解</span></a></h4><p>下图非常简要解释了这个原理。</p><figure><img src="'+i+'" alt="image-20241113163023660" tabindex="0" loading="lazy"><figcaption>image-20241113163023660</figcaption></figure><h3 id="_1-2-smtp" tabindex="-1"><a class="header-anchor" href="#_1-2-smtp"><span>1.2.SMTP</span></a></h3><p>邮件传输协议。</p><h3 id="_1-3-ftp" tabindex="-1"><a class="header-anchor" href="#_1-3-ftp"><span>1.3.FTP</span></a></h3><p>文件传输协议。</p><h3 id="_1-4-telnet" tabindex="-1"><a class="header-anchor" href="#_1-4-telnet"><span>1.4.Telnet</span></a></h3><p>明文登陆远程主机。</p><h3 id="_1-5-ssh" tabindex="-1"><a class="header-anchor" href="#_1-5-ssh"><span>1.5.SSH</span></a></h3><p>加密登陆远程主机。</p><h2 id="_2-传输层" tabindex="-1"><a class="header-anchor" href="#_2-传输层"><span>2.传输层</span></a></h2><p>待补充...</p><h2 id="_3-网络层" tabindex="-1"><a class="header-anchor" href="#_3-网络层"><span>3.网络层</span></a></h2><h3 id="_3-1-icmp-协议" tabindex="-1"><a class="header-anchor" href="#_3-1-icmp-协议"><span>3.1.ICMP 协议</span></a></h3><p>网络层中最主要的协议就是 <code>IP</code> 协议，但是在测试网络的时候，还可能会使用到 <code>ICMP</code> 和 <code>IGMP</code> 这两种网络层协议，我们这里先重点讲解 <code>ICMP</code>。有可能组建局域网的管理员需要检查网络健康状态，就可能需要使用这种不以数据传输作为目的的协议。单纯发送 <code>IP</code> 报文时，如果对端主机掉线导致丢包，组建子网的路由器不会给发送方主机任何响应。因此这种情况下就很难检查网路的健康状态，一旦网络出现问题，只能得到丢包的粗浅结论（但是无法得知具体是哪一个设备丢包了）。</p><p>因此操作系统会提供特殊的套接字接口，允许绕过传输层，直接使用网络层的 <code>ICMP</code> 协议发送 <code>icmp</code> 报文，但是这种报文正文中放的就是 <code>ARP</code> 的报文。此时发送方发送 <code>icmp</code> 报文给路由器后，如果接收端出现丢包问题，路由器不会直接把 <code>icmp</code> 报文丢弃，而是会进行响应。响应中会携带网络传输出错的具体原因（设置在报头中），这样检查网络状态就会比较方便。</p><figure><img src="'+t+'" alt="image-20240601220900859" tabindex="0" loading="lazy"><figcaption>image-20240601220900859</figcaption></figure><figure><img src="'+n+'" alt="image-20240601221011485" tabindex="0" loading="lazy"><figcaption>image-20240601221011485</figcaption></figure><figure><img src="'+s+'" alt="image-20240601221035076" tabindex="0" loading="lazy"><figcaption>image-20240601221035076</figcaption></figure><p><code>ping</code> 命令经常用来检测网络状态，这个命令底层的实现逻辑就是一个应用层程序通过特殊的套接字接口直接绕到网络层使用 <code>ICMP</code> 协议的例子。而这种特殊套接字就是原始套接字，常用于编写一些常见的网络工具（我们之前用的大部分都是网络套接字）。而由于这一层没有端口号的概念，那么原始套接字的调用中也绝对不用用到端口号的设置...</p><div class="hint-container important"><p class="hint-container-title">重要</p><p>补充：要实现这种机制，路由器本身也需要支持在网络层的 <code>ICMP</code> 协议的实现。</p></div><div class="hint-container important"><p class="hint-container-title">重要</p><p>补充：<code>ICMP</code> 协议目前只支持 <code>ipv4</code>，想使用 <code>ipv6</code> 就只能使用 <code>ICMPv6</code> 协议。</p></div><h3 id="_3-2-igmp-协议" tabindex="-1"><a class="header-anchor" href="#_3-2-igmp-协议"><span>3.2.IGMP 协议</span></a></h3><p><code>IGMP</code> 专注于多播通信的管理，是一种组管理协议，主要服务于局域网内的多播流量。</p><h3 id="_3-3-dhcp-协议" tabindex="-1"><a class="header-anchor" href="#_3-3-dhcp-协议"><span>3.3.DHCP 协议</span></a></h3><p>动态分配 <code>ip</code> 地址用的。</p><p><strong>RIP</strong>（Routing Information Protocol）和 <strong>OSPF</strong>（Open Shortest Path First）是两种常见的 <strong>路由协议</strong>，它们用于在计算机网络中动态选择和维护路由。它们的主要区别在于工作原理、适用范围、效率和扩展性等方面。</p><h3 id="_3-4-rip-协议" tabindex="-1"><a class="header-anchor" href="#_3-4-rip-协议"><span>3.4.RIP 协议</span></a></h3><p><code>RIP</code> 是一种基于 <strong>距离向量</strong> 的路由协议，它通过交换路由表来选择最佳路径。<code>RIP</code> 使用跳数作为路由的度量标准，最多支持 <code>15</code> 跳，超过 <code>15</code> 跳的目标被认为不可达。适用于小型或中型网络，特别是当网络规模不大，拓扑变化不频繁时。</p><h3 id="_3-5-ospf-协议" tabindex="-1"><a class="header-anchor" href="#_3-5-ospf-协议"><span>3.5.OSPF 协议</span></a></h3><p><code>OSPF</code> 是一种 <strong>链路状态</strong> 路由协议，它使用 <code>Dijkstra</code> 算法计算最短路径，并且能够提供更快速的收敛和更好的扩展性。<code>OSPF</code> 是 <strong>开放标准</strong>，广泛应用于企业和大型网络中。适用于中型到大型网络，尤其是在需要高效收敛、可扩展性和更高网络稳定性的环境中。</p><h2 id="_4-链路层" tabindex="-1"><a class="header-anchor" href="#_4-链路层"><span>4.链路层</span></a></h2><h3 id="_4-1-csma-cd" tabindex="-1"><a class="header-anchor" href="#_4-1-csma-cd"><span>4.1.CSMA/CD</span></a></h3><p>带有冲突检测的 <strong>载波侦听多路存取</strong>，这是早期以太网（同轴电缆和早期版本双绞线这样的半双工网络）所使用的访问方式。</p><p>其工作原理就是每一台电脑先感知线缆是否空载，如果是才发送数据，这样就可以防止任何碰撞。不过如果 <code>CSMA/CD</code> 报文本身发生了碰撞，就会导致双方电脑等待一个随机的时间，并且向所有同网络上的主机发送拥塞信号，然后再重新发送数据。这样数据发送就可以是错开发送的，避免在同一点上进行碰撞。</p><p>但是如今的网络大部分都可以全双工网络，数据允许双向同时沟通。</p><h3 id="_4-2-csma-ca" tabindex="-1"><a class="header-anchor" href="#_4-2-csma-ca"><span>4.2.CSMA/CA</span></a></h3><p><strong>载波侦听多路访问</strong>，这中访问方式是在无线网络中给载波传输使用的，和有线网络一样，无线网络也需要避免碰撞。但是由于无法使用电缆来直接检测碰撞，因此 <code>CSMA/CA</code> 会使用最大尝试来避免碰撞。这个方法里当一台电脑通过无线发送数据时，会先感知有没有其他计算机的传输在进行，如果它检测到其他传输，就会等待一段短的时间。</p><p>再次检查频段时，如果没有任何传输进行，就会随机等待一会，然后开始传输数据。接受者就会返回响应，如果没有重复上述过程。</p><div class="hint-container important"><p class="hint-container-title">重要</p><p>补充：可以看这个 <a href="https://www.bilibili.com/video/BV1UE411F7o7/?spm_id_from=333.337.search-card.all.click&amp;vd_source=c92c89dbfcf9cc30c48086469621f35b" target="_blank" rel="noopener noreferrer">讲解视频</a> 进行学习。</p></div><h2 id="_5-物理层" tabindex="-1"><a class="header-anchor" href="#_5-物理层"><span>5.物理层</span></a></h2><p>待补充...</p><h2 id="_6-两层间" tabindex="-1"><a class="header-anchor" href="#_6-两层间"><span>6.两层间</span></a></h2><h3 id="_6-1-网络层和链路层之间" tabindex="-1"><a class="header-anchor" href="#_6-1-网络层和链路层之间"><span>6.1.网络层和链路层之间</span></a></h3><h4 id="_6-1-1-arp-协议" tabindex="-1"><a class="header-anchor" href="#_6-1-1-arp-协议"><span>6.1.1.ARP 协议</span></a></h4><p>方便 <code>ip</code> 地址映射到 <code>mac</code> 地址的协议。</p><h4 id="_6-1-2-rarp-协议" tabindex="-1"><a class="header-anchor" href="#_6-1-2-rarp-协议"><span>6.1.2.RARP 协议</span></a></h4><p>方便 <code>mac</code> 地址映射到 <code>ip</code> 地址的协议。</p>',58)]))}const g=o(r,[["render",p]]),m=JSON.parse('{"path":"/1.%E7%BC%96%E7%A0%81%E4%BF%AE%E5%85%BB/3.%E7%B3%BB%E7%BB%9F%E7%BD%91%E7%BB%9C/7ecvjong/","title":"其他协议","lang":"zh-CN","frontmatter":{"createTime":"2025/04/09 23:31:29","permalink":"/1.编码修养/3.系统网络/7ecvjong/","title":"其他协议","description":"1.应用层 1.1.DNS 协议 1.1.1.域名解析概念 DNS 是一套从域名映射到 IP 的系统，属于应用层协议。内部大多使用 UDP 协议，并且多用于浏览器的 URL 解析中。主要是方便人们使用容易记忆的域名来访问难以记忆的 ip 地址字符串。因此域名其实不是因为技术诞生的，只是为了方便不了解技术的人们使用。而一个完整域名一般可以切分为几类： 顶...","head":[["meta",{"property":"og:url","content":"https://limou3434.github.io/work-blog-website/work-blog-website/1.%E7%BC%96%E7%A0%81%E4%BF%AE%E5%85%BB/3.%E7%B3%BB%E7%BB%9F%E7%BD%91%E7%BB%9C/7ecvjong/"}],["meta",{"property":"og:site_name","content":"缡墨"}],["meta",{"property":"og:title","content":"其他协议"}],["meta",{"property":"og:description","content":"1.应用层 1.1.DNS 协议 1.1.1.域名解析概念 DNS 是一套从域名映射到 IP 的系统，属于应用层协议。内部大多使用 UDP 协议，并且多用于浏览器的 URL 解析中。主要是方便人们使用容易记忆的域名来访问难以记忆的 ip 地址字符串。因此域名其实不是因为技术诞生的，只是为了方便不了解技术的人们使用。而一个完整域名一般可以切分为几类： 顶..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-19T14:21:17.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-19T14:21:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"其他协议\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-19T14:21:17.000Z\\",\\"author\\":[]}"]]},"headers":[],"readingTime":{"minutes":7.86,"words":2358},"git":{"updatedTime":1745072477000,"contributors":[{"name":"limou3434","username":"limou3434","email":"898738804@qq.com","commits":6,"avatar":"https://avatars.githubusercontent.com/limou3434?v=4","url":"https://github.com/limou3434"}]},"autoDesc":true,"filePathRelative":"notes/1.编码修养/3.系统网络/026_ljp_2024_06_01_其他协议.md","categoryList":[{"id":"4358b5","sort":10000,"name":"notes"},{"id":"557f7c","sort":1,"name":"编码修养"},{"id":"7ab59a","sort":3,"name":"系统网络"}],"bulletin":true}');export{g as comp,m as data};
