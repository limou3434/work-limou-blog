import{_ as n,c as l,b as i,d as h,r as k,o as p}from"./app-DcSFSDZX.js";const e="/work-blog-website/assets/7e10f4e1-cf7c-4507-b8ec-f2a989d717a3-BWAdpDZx.png",t="/work-blog-website/assets/1713968629439-DpwoN2Ox.jpg",d="/work-blog-website/assets/e391a745-1f16-49ef-9aec-1e2b497cb1cc-BBkjN2e-.png",r="/work-blog-website/assets/c54bd25a-5e76-49b0-bdc7-ed6e3b714e28-XJn0hjwD.png",g="/work-blog-website/assets/01f3f44a-57aa-45a2-ad5a-2f403dd42088-ByJja1Vf.png",A="/work-blog-website/assets/a7d3ac8b-2990-4367-9e85-6806cd8c8947-DT8Liaen.png",c="/work-blog-website/assets/image-20240611203205027-C5btQW5F.png",y="/work-blog-website/assets/9c197563-28c5-4d8c-8ad1-7419a3702121-CLfTN8kU.png",B="/work-blog-website/assets/0f664086-85a7-402e-9398-a7520624a272-DmaYV2mR.png",D="/work-blog-website/assets/b8e6a48b-e7a3-4d12-a157-228ff7a9982c-BNpnsbHl.png",o="/work-blog-website/assets/37f3c7b3-d78e-4710-8254-0e6c491ec488-cwbqcyI2.png",C="/work-blog-website/assets/d183fb51-19b0-4253-b29a-baa42adebc70-9YLlz30W.png",v="/work-blog-website/assets/e555b51f-c6a8-4765-896a-661a4511f14a-CJuDENN_.png",u="/work-blog-website/assets/4a20b4e4-8f8d-44a3-9930-c7bc552a4079-B6B4o4VA.png",m="/work-blog-website/assets/c51d731f-bcc9-41d6-8a59-17e98b06eb53-Mr6a3eyJ.png",b="/work-blog-website/assets/ff7e76ce-f42d-4cc6-b71c-db43938ea90d-Dn_3YsTo.png",E="/work-blog-website/assets/28b2094e-5ae8-4e7e-9249-f464412aa1ab-DfQa86OT.png",f="/work-blog-website/assets/image-20240609195221050-jEg4ajen.png",F="/work-blog-website/assets/6edcd390-5547-4ff3-bfc5-d9c1abd24be5-D1qv9LDy.png",x="/work-blog-website/assets/204468e6-8836-4288-a7e0-20f397c2ff26-CP4tJnqE.png",_="/work-blog-website/assets/5f559da0-fec0-456e-be22-53045f35ac14-DdmI7Slu.png",I="/work-blog-website/assets/8c74fb0b-46d6-4d87-b385-c821b7b4b856-fWUS7xgO.png",q="/work-blog-website/assets/768afefe-3581-4e8b-b9c8-e3ce357507b7-Chmseeay.png",w="/work-blog-website/assets/eed391eb-0d77-4cf2-8518-e1a27cc0cad4-tydpn18D.png",P="/work-blog-website/assets/image-20231014161857819-BUS-TK_X.png",U="/work-blog-website/assets/dd286fcb-1e53-4cd7-8455-adbf522ca683-dbjEcwEr.png",T="/work-blog-website/assets/image-20231026141329546-CFhoqpgf.png",S="/work-blog-website/assets/image-20231026151750005-DKeDdAmh.png",L="/work-blog-website/assets/image-20231108170939570-Jx-UYE7n.png",N={};function G(R,s){const a=k("Mermaid");return p(),l("div",null,[s[0]||(s[0]=i('<h2 id="_1-进程概念" tabindex="-1"><a class="header-anchor" href="#_1-进程概念"><span>1.进程概念</span></a></h2><p>我们启动一个软件，本质就是启动了一个进程。在 <code>Windows</code> 下如果我们启动了某个应用程序，然后打开资源管理器（常见的快捷键是 <code>[ctrl+alt+delete]</code>，或者直接打开系统的“搜索”输入“资源管理器”点击即可打开）就可以看到有一个对应的软件出现在进程列表中：</p><img title="" src="'+e+'" alt="7e10f4e1-cf7c-4507-b8ec-f2a989d717a3" style="zoom:50%;"><p>实际上运行程序的时候，程序中的数据和代码就会加载到内存中，然后创建出一个进程，上述资源管理器里显示的就是进程列表。</p><blockquote><p>补充：这也就是为什么应用运行的多的时候，有些软件会变卡甚至崩溃的原因。因为内存上堆满了大量进程，而一条空间大小有限的内存条，一次性加载太多软件，会导致内存空间溢出，有的进程无法被获取所有的数据而正确运行，最后造成软件崩溃或者静止不动的状态。</p></blockquote><p>而在 <code>Linux</code> 下运行一条命令 <code>./某可执行文件</code>，和 <code>Windows</code> 双击点击图标运行程序是类似的，也会将程序加载进内存中，最终转化成“进程”。实际上程序被加载到内存中后，就不能简单叫作“程序”了，而应该叫“进程”才对（这个原因后面解释）！<code>Linux</code> 也可以同时加载多个程序，也就是可以同时运行多个进程在系统中。</p><p>由于系统中存在大量的进程，那么操作系统就必须要管理好这些大量的进程。那么 <code>Linux</code> 是怎么管理这些进程的呢？实际上也是“先描述再组织”。</p><blockquote><p>补充：多个进程可以构成“作业”，一个作业至少由一个进程组成。</p></blockquote><blockquote><p>补充：一个程序可以被多次运行，产生多个进程。</p></blockquote><h2 id="_2-进程管理" tabindex="-1"><a class="header-anchor" href="#_2-进程管理"><span>2.进程管理</span></a></h2><p>操作系统会给每个加载进内存的程序申请一个结构体，也就是 <code>PCB</code> 数据结构（全称 <code>Printed circuit board</code> 进程控制块），这个结构体内部保存了代码和数据的属性。</p><p>有了这个结构体来描述进程，将来就可以定义出相应的进程对象，而我们可以把这些对象使用链表的方式连接起来，也就将进程组织起来了。</p><blockquote><p>补充：上述链表就是一个进程队列，但是实际上不一定呈现出链表的形式，其他操作系统也可能使用其他数据结构混杂起来管理，这里只是为了好理解一种粗略说法。不过，<code>Linux</code> 内核采用的是确实双链表实现。</p></blockquote><p>因此对进程的管理转化为了对 <code>PCB</code> 结构体的管理（也就是“增删查改”）。</p><p>因此什么是进程呢？<strong>进程 = 对应的“代码和数据”+形成的“PCB 结构对象”</strong>，如果再专业化一些，进程在静态角度上就是由 <strong>进程 = 代码段 + 数据段 + PCB 实例化</strong> 组成。</p><blockquote><p>警告：有很多人会误认为程序加载进内存就成为了进程，这种理解有些不太准确。一定要带上对 <code>PCB</code> 的理解...</p></blockquote><p>计算机管理的也不是直接管理程序的数据，而是这些对象，每一个 <code>PCB</code> 对象就代表一个进程。</p><p>接下来让我们来看看 <code>PCB</code> 具体是什么样的。不同的操作系统对 <code>PCB</code> 的具体实现不一样，<code>Linux</code> 里的是 <code>task_struct</code>，<code>task_struct</code> 是 <code>Linux</code> 内核级别的结构体。</p><blockquote><p>注意：也就是说 <code>PCB</code> 只是一个操作系统概念，具体实现要看操作系统的内核代码。</p></blockquote><p>我们可以查看一下 <code>Linux</code> 的内核实现，关于 <code>Linux</code> 内核源代码，您可以访问 <a href="https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/?h=v6.5.4" target="_blank" rel="noopener noreferrer">Linux 的官网来获取源代码</a>，不过文件可能有点大（您可以选择一些较低版本的）。</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">task_struct</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">/*...*/</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这个结构体内部会包含以下成员：</p><ol><li><p>标识符 <code>PID</code>：描述进程的唯一标识符，区分于别的进程</p></li><li><p>状态：任务状态、退出代码、退出信号等</p></li><li><p>优先级：相对于其他进程的优先级，优先级高的进程会先被 <code>CPU</code> 调度（调度就是进程能被 <code>CPU</code> 进行计算，进程们被计算的先后顺序被称为“调度顺序/进程调度”）</p></li><li><p>程序计数器：程序中即将执行的下一条指令的地址（一个进程不可能长时间占用 <code>CPU</code>，否则整个系统看起来就像“卡”住了一样。因此进程被 <code>CPU</code> 计算到一定程度时，就有可能被 <code>CPU</code> 暂时停止计算并且退出，而下一次进程又加载进来的时候，只需要查看程序计数器，直接到达还未被 <code>CPU</code> 计算的指令处，而不必从头开始执行指令）</p></li><li><p>内存指针：包含“程序代码指针”和“相关数据指针”，还有和其他进程共享的“内存块指针”</p></li><li><p>上下文数据：主要是进程执行时处理器的寄存器中的数据</p></li><li><p><code>I/O</code> 状态信息：包含显示的 <code>I/O</code> 请求，分配给进程的 <code>I/O</code> 设备和被进程使用的文件列表</p></li><li><p>记账信息：可能包含处理器时间总和、使用的时钟数总和、时间限制、记帐号等</p></li><li><p>...</p></li></ol><blockquote><p>总结：<code>PCB</code> 对象和 <code>PCB</code> 队列</p><p>当我们运行某一个软件时，操作系统把软件的代码和数据加载进内存，同时创建 <code>PCB</code> 实例化对象，描述这个软件转化成的进程就会开始运行。</p><p>当我们退出某一个软件时，操作系统把软件的代码和数据切换出内存，同时销毁 <code>PCB</code> 实例化对象，对应这个软件转化成的进程就会进行退出。</p><p>而操作系统同时管理多个进程时，就需要利用某些数据结构进行增删查改。</p></blockquote><h2 id="_3-进程操作-一" tabindex="-1"><a class="header-anchor" href="#_3-进程操作-一"><span>3.进程操作（一）</span></a></h2><p>本节主要是侧向进程的使用，而 <a href="#9.%E8%BF%9B%E7%A8%8B%E6%93%8D%E4%BD%9C%EF%BC%88%E4%BA%8C%EF%BC%89">进程操作（二）</a> 更倾向于操作的原理和底层调用，并且更加细化。</p><h3 id="_3-1-进程查看" tabindex="-1"><a class="header-anchor" href="#_3-1-进程查看"><span>3.1.进程查看</span></a></h3><ol><li><p>查看正在运行的进程可以使用 <code>ps -axu</code>，该指令详细全面列出正在运行进程的信息（较常用）</p><blockquote><p><code>ps</code> 命令是用于默认显示当前用户正在运行的进程信息的工具。它提供了多种选项来控制输出的格式和内容。下面是一些常用的 <code>ps</code> 命令选项以及它们的解释和示例：</p><ul><li><code>-a</code> 显示有控制终端的所有进程</li><li><code>-x</code> 还会多显示出无控制终端的所有进程</li><li><code>-u</code> 在显示的同时带上不同进程的启动用户</li><li><code>-j</code> 选型以作业格式显示如下表格进程信息</li><li><code>-l</code> 命令会显示长格式信息，包含了更多信息</li></ul><figure><img src="'+t+'" alt="1713968629439" tabindex="0" loading="lazy"><figcaption>1713968629439</figcaption></figure><p>实际上我个人会喜欢使用 <code>ps -axu</code>，因为 <code>-j</code> 实际上是 <code>BSD</code> 风格的选项，但是 <code>U</code> 是 <code>UNIX</code> 风格的选项。而 <code>-l</code> 会在查看 <code>nice</code> 值中使用，后面再提及 <code>nice</code> 值是什么。</p><p>不过上面选项中，貌似在 <code>Linux Ubuntu</code> 中只能 <code>-ax</code> 选项配合 <code>-u/-j/-l</code> 其中一个，无法混用...</p></blockquote></li><li><p>也可以使用 <code>top/htop</code> 指令（类似 <code>Windows</code> 下的资源管理器），可以同态观察进程的状态</p></li><li><p>进程的信息也可以直接通过 <code>/proc</code> 系统文件夹查看。例如：要查看 <code>PID</code> 为 <code>1</code> 的进程属性和信息，就可以查看 <code>/proc/1</code> 这个文件夹，查询其他 <code>PID</code> 的进程也是一样的。</p><blockquote><img title="" src="'+d+'" alt="e391a745-1f16-49ef-9aec-1e2b497cb1cc" style="zoom:67%;"><ul><li>该文件内部有一个 <code>exe</code> 链接文件，链接的地方指向的是可执行程序的地址（这意味着进程可以知道自己的源文件所在地）。这里有一个有趣的现象值得注意：当我们运行某个 <code>C</code> 程序后，如果把该程序 <code>exe</code> 指向的源文件和可执行程序删除，那么该进程有时依旧可以正常进行。这是因为代码和数据已经被加载进内存形成进程，进程启动后已经和源文件、可执行程序无关了，除非需要重新启动进程。</li><li>还有一个 <code>cmd</code> 链接文件，<code>cmd</code> 是指向进程的当前工作目录，这也可以解释一些 <code>C</code> 语言函数的现象：如果在 <code>C</code> 程序中使用 <code>fopen()</code>，第一个参数只使用了文件名字，默认打开的就是当前工作路径下的这个文件，所谓“当前工作路径”也就是这个 <code>cmd</code> 指向的位置。而每当代码被编译运行后，每个进程都会有一个属性，来保存自己所在的工作目录，由 <code>cmd</code> 来链接。</li></ul><p>对于 <code>Linux</code> 来说，进程是以文件的形式给出的，因此 <code>proc</code> 目录也必然是一个动态存储目录，内部文件经常发生变动。</p></blockquote></li></ol><h3 id="_3-2-进程标识" tabindex="-1"><a class="header-anchor" href="#_3-2-进程标识"><span>3.2.进程标识</span></a></h3><p>我们还可以在 <code>C</code> 代码中获取本进程的标识 <code>ID</code>，这样就变相获得了一个进程。需要注意的是，<code>C</code> 代码内所有的函数都只有在程序转化为进程的时候才会被调用，因此系统接口 <code>getpid()</code> 也只有在程序转化为进程的时候才会获取到本进程 <code>PID</code>。</p><img src="'+r+'" title="" alt="c54bd25a-5e76-49b0-bdc7-ed6e3b714e28" style="zoom:67%;"><p>运行代码后就会得到左侧的输出，这个时候我们验证一下进程的 <code>PID</code> 是否符合：</p><img title="" src="'+g+`" alt="01f3f44a-57aa-45a2-ad5a-2f403dd42088" style="zoom:50%;"><p>除了 <code>gitpid()</code> 还有一个 <code>gitppid()</code> 的调用，这个系统调用可以获取当前进程的父进程 <code>PPID</code>，这里如果我们利用 <code>ps</code> 命令就会发现这个 <code>PPID</code> 实际上就是 <code>bash</code>。一般情况下，使用系统命令和运行我们自己编写的程序所产生的进程，其父进程永远都是 <code>bash</code>。</p><p>我们把代码改 <code>getpid()</code> 为 <code>getppid()</code> 再运行代码就可以获取 <code>bash</code> 的 <code>id</code>，也就是您代码转化为进程的父进程 <code>id</code>。</p><h3 id="_3-3-进程杀死" tabindex="-1"><a class="header-anchor" href="#_3-3-进程杀死"><span>3.3.进程杀死</span></a></h3><p>这里只给出如何使用信号来杀死进程，而不讲解信号的原理。</p><p>结合上述的进程 <code>pid</code>，使用 <code>kill -9 &lt;PID&gt;</code> 可以杀死进程标识为 <code>PID</code> 的进程。<code>-9</code> 实际上是一个信号，即：给目标文件传递 <code>9</code> 号信号，这里关于信号的知识我们以后还会再提及。</p><p>我们还可以尝试杀死父进程 <code>bash</code>。执行后就可以发现，<code>bash</code> 已经没有办法正常工作了，有的时候甚至会直接退出 <code>bash</code> 界面（奔溃）...</p><p>需要注意的是，父子进程是独立运行的。</p><blockquote><p>补充：<code>killall &lt;信号&gt; &lt;进程名字&gt;</code> 有时会比使用 <code>kill</code> 方便一些。如果一个软件会使用多个进程，则可以使用 <code>pkill -9 &lt;进程名字&gt;</code> 将对应的进程全部杀死。不过注意，别随便乱用这些指令，除非您很清楚自己在做什么...</p></blockquote><h3 id="_3-4-进程创建" tabindex="-1"><a class="header-anchor" href="#_3-4-进程创建"><span>3.4.进程创建</span></a></h3><p>除了运行可执行程序来创建进程（<code>Linux</code> 使用命令来创建进程，<code>Windows</code> 使用鼠标点击快捷方式创建进程），我们还可以在代码中指使进程创建子进程。在 <code>C</code> 代码内可以使用 <code>fork()</code> 函数来创建子进程，但是这个 <code>fork()</code> 对比其他的普通函数会显得比较奇怪：失败返回 <code>-1</code>，成功的时候具有两个返回值（你没看错，两个返回值）：</p><ol><li><p>给父进程返回子进程的 <code>pid</code></p></li><li><p>给子进程返回 <code>0</code></p></li></ol><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 简单使用 fork()</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">stdio.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">unistd.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">sys/types.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // fork 之前是父进程     </span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">1.进程PID：</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%d</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 父进程PPID：</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%d\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> getpid</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(),</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> getppid</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">());</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">father-you can see me!</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">father-you can see me!</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">father-you can see me!</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // fork 之后就会创建一个子进程，具有和父进程同样的代码     </span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    fork</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">father-child-you can see me!</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">2.进程PID：</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%d</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 父进程PPID：</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%d\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> getpid</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(),</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> getppid</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">());</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    sleep</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    </span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一般而言，<code>fork()</code> 之后的代码是父子共享的（两者都可以看到/使用），同时运作的。但我们真正需要的不是让父子进程（任务）做一样的事情，而是父进程做一部分，子进程做另外一部分，以此来提高运行的效率。因此根据 <code>fork()</code> 的返回值，我们可以这么像下面这样编写代码。</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 使用 fork() 提高代码效率</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">stdio.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">unistd.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">sys/types.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // fork 之前是父进程</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">进程PID：</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%d</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 父进程PPID：</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%d\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> getpid</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(),</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> getppid</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">());</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    pid_t</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> id </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> fork</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 从这里以后父子进程的代码都是共享的，会根据 if 来做调整</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">id </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        // 进程创建失败    </span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        perror</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">fork</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        return</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    else</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">id </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">==</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        // 子进程做的事情</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        while</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">            printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">I am child,PID:</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%d</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> PPID:</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%d\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> getpid</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(),</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> getppid</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">());</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">            sleep</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    else</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        // 父进程做的事情</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        while</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">            printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">I am father,PID:</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%d</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> PPID:</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%d\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> getpid</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(),</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> getppid</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">());</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">            sleep</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">you can see me!</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    sleep</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个时候您的第一份真正意义上的多进程代码就出来了（虽然并没有做什么事情...），我们运行代码时就会发现，两个父子进行循环是同时进行的！如果我们使用 <code>ps</code> 不断测试，就会发现的确存在两个进程，并且两者的 <code>PID/PPID</code> 呈现父子关系。</p><img src="`+A+`" title="" alt="a7d3ac8b-2990-4367-9e85-6806cd8c8947" style="zoom:50%;"><p>那么为什么 <code>pid_t</code> 这个 <code>C</code> 语言变量会有两个值？这“不符合”我们以前的学习逻辑，难道一个内存空间中存储了两个值？这个现象我们在进程的地址空间中再来解答，现阶段只要知道怎么使用 <code>fork()</code> 就可以了。</p><p>不过我们可以先来理解一个问题：为什么设计为子进程返回 <code>0</code>，父进程返回子进程的 <code>PID</code> 呢？因为父进程需要得到子进程的 <code>PID</code> 来进行管理，子进程只需要知道是否被建立成功就可以。</p><p>父子进程哪一个先运行呢？这是由操作系统的调度器决定的。计算机内有大大小小的进程，数量极多。为了方便管理交给 <code>CPU</code> 调度，会以某种数据结构形成调度队列，由操作系统查看 <code>PCB</code> 中的调度信息还有调度算法来决定先调度哪一个进程，因此父子进程谁先被调度，对于用户来说是不确定的。</p><p>关于杀死进程和创建进程的更多细节，我们在后面还会再重新理解，这里提前提及只是为了让您更快上手一些简单的进程操作。</p><h2 id="_4-进程状态" tabindex="-1"><a class="header-anchor" href="#_4-进程状态"><span>4.进程状态</span></a></h2><p>我们之前讨论的进程是一个动态概念，而其某一时刻的状态就被称为进程实体/进程映像，这个您简单了解一下即可。而这一节我要给您解释的就是进程映像的不同状态，简称“进程状态”。</p><h3 id="_4-1-进程状态理论" tabindex="-1"><a class="header-anchor" href="#_4-1-进程状态理论"><span>4.1.进程状态理论</span></a></h3><h4 id="_4-1-1-粗略理解" tabindex="-1"><a class="header-anchor" href="#_4-1-1-粗略理解"><span>4.1.1.粗略理解</span></a></h4><p>所谓进程状态和状态切换，可以使用类似下面的代码来理解：</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 状态的代码理解</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">define</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> NEW</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">			//状态 1</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">define</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> RENNING</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">		//状态 2</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">define</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> BLOCK</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 3</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">			//状态 3</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//...</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">pcb</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">-&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">status</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> NEW</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">		//将进程 PCB 内的状态变量设置为状态 1</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//...</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">pcb</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">-&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">status</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ==</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> NEW</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">	//判断不同状态的进程，执行一些不同状态下的操作</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">/*..*/</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意这种状态的切换是一气呵成的，专业术语也叫“原子操作”，必须保证状态的转化要么不转，要么彻底转换完成。我之后也会帮助您理解原子的概念。</p><blockquote><p>补充：这种切换是使用关中断和开中断实现的，也就是关闭中断机制后进行切换后，再打开中断机制，这点您简单了解一下即可。</p></blockquote><p>到此我帮您建立起对进程状态的一个粗略认知，接下来我会帮您建立更加详细的理论体系，需要注意的是不同地方在某些说法上有些许不同，这对您来说可能会造成一些阅读困难。</p><h4 id="_4-1-2-深入理解" tabindex="-1"><a class="header-anchor" href="#_4-1-2-深入理解"><span>4.1.2.深入理解</span></a></h4><p>在计算机系统理论上，对于单核 <code>CPU</code> 来说（这里不考虑多核），为了提高效率，会配备一个属于自己的调度队列/运行队列，这个队列也会被描述起来，假设描述为 <code>struct runqueue{/*...*/};</code>。</p><p>里面会包含锁、字段等信息（很多东西，但是我们先不理会），还有存储了进程的个数 <code>count</code>，以及还有一个 <code>pcb*</code> 的指针，指向一个 <code>PCB</code> 结构体数据结构（有可能是链表，只需要将所有运行起来的进程串起来就可以）</p><figure><img src="`+c+`" alt="image-20240611203205027" tabindex="0" loading="lazy"><figcaption>image-20240611203205027</figcaption></figure><ol><li><p><strong>运行状态</strong>：<code>CPU</code> 在调度进程的时候就是依靠这个 <code>struct runqueue{/*...*/};</code> 的，只需要调用 <code>pcb</code> 指针指向的数据结构（链表），就可以访问所有的进程。 <mark>因此只要在运行队列中的进程，就可以称进程处于”运行状态“</mark>（在老的系统中，只有进程放在 <code>CPU</code> 中开始执行才算是”运行状态“，但是现代系统不是这样，而是进程放入运行队列即可。</p><p>因此对于现代系统来说：”创建/新建“、”就绪“、”执行“这三种进程状态已经没有太大的区分了），而 <code>pcb</code> 指向的一串正在等待 <code>CPU</code> 资源的进程就是”运行队列“。</p><p>再次强调，运行状态不是指该进程正在被 <code>CPU</code> 计算中，只有老系统才这么定义。另外，多核的情况下，就存在多个”运行队列“。</p></li><li><p><strong>就绪状态</strong>：该状态表示进程已经从非 <code>CPU</code> 设备那里获取到了资源，已经准备好摆 <code>CPU</code> 执行，但由于 <code>CPU</code> 正在执行其他进程，该进程暂时无法获得 <code>CPU</code> 时间（也就是无法获取可以在 <code>CPU</code> 中运行的时间，简称“时间片”）或者说无法获取 <code>CPU</code> 资源，这种状态就是”就绪状态“。也就是说，<mark>在运行队列中除了正在 <code>CPU</code> 中运行的进程，运行队列的其他进程都处于”就绪状态“</mark>。</p></li><li><p><strong>阻塞状态</strong>：系统中不只存在 <code>CPU</code> 资源，还有网卡、磁盘、显卡、键盘等其他设备资源。而这些资源往往有限，进程又太多，每一个进程需要这些资源。这个时候有的进程在被 <code>CPU</code> 计算之前，<mark>需要先去访问其他非 <code>CPU</code> 资源，因此我们称这个进程处于“阻塞状态”</mark>。</p><p>而这一串正在访问某个非 <code>CPU</code> 资源而暂时无法被 <code>CPU</code> 执行的进程所组成的队列也被称为“阻塞/等待队列”，多个非 <code>CPU</code> 设备就有多个阻塞队列。比如：在 <code>C</code> 语言中使用 <code>scanf()</code> 函数的时候，不可能让 <code>CPU</code> 一直在等待它输入。<code>CPU</code> 此时去调动其他进程了，而 <code>scanf()</code> 此时处于阻塞状态，一直在等待输入设备资源的输入。</p><p>在有些时候下载会”卡住“就是为了等待网络资源，此时也是处于阻塞状态。而如果操作系统察觉到该进程已经访问好非 <code>CPU</code> 资源了，因此将其链接到”运行队列“中，这就是所谓的”将该进程唤醒“。</p></li><li><p><strong>挂起状态</strong>：如果 <mark>内存即将被占满，此时操作系统会将长时间处于”阻塞等待“的进程代码和数据换出到磁盘中，这就是进程的“挂起状态”</mark>，而这个磁盘空间就是 <code>SWAP</code> 磁盘分区（即使写入磁盘效率比较慢，但也总比系统挂掉好）</p><p>而且基本很难被填满（一般是和内存大小的差不多，不可以设置太大，否者就会导致系统过于依赖 <code>SWAP</code> 分区，频繁调用置换算法，造成系统变慢），如果操作系统还扛不住就会造成奔溃，也就是发生了“宕机”（挂起还可以分为”就绪挂起“和”阻塞挂起“，不过我这里不细分这一概念，您简单查询一下即可，这两个概念不难理解，并且阻塞状态可以因为资源就绪转化为就绪挂起）。</p></li><li><p><strong>创建状态</strong>：==如果一个进程在创建过程中还没有加入到运行队列中，就被称为“创建状态”。==不过这个概念一般都不会使用某些宏来进行表示，一般操作系统不用刻意实现这个状态，本质是创建 <code>PCB</code> 实例化对象的过程。</p></li><li><p><strong>终止状态</strong>：如果一个进程完成了自己的任务，就可以由自身或外部的命令进行终止，也就是“终止状态”。这种终止行为有时还需要管理员权限才可以终止，本质是销毁 <code>PCB</code> 实例对象的过程。</p></li></ol><p>因此状态变化说白了就是：修改进程 <code>PCB</code> 示例对象所处的队列和 <code>PCB</code> 对象内某些表示进程状态的成员变量。也许您会问，这样频繁的切换进程状态，使得进程在不同的队列中，会不会造成丢失和效率问题呢？不会，因为一个进程 <code>PCB</code> 不一定只在一个队列之中。</p><blockquote><p>补充：在单核机器中，由于而整个过程由于 <code>CPU</code> 太快了，看起来好像多个运行队列都被 <code>CPU</code> 同时运行着。这也就是并发的概念，因此操作系统内多个线程的执行，在宏观上是并发的同时运行的，但是在微观上还是交替执行的，因为 <code>CPU</code> 只有一个。</p><p>后面我提到线程的时候还会深化这个概念...</p></blockquote><h3 id="_4-2-进程状态实现" tabindex="-1"><a class="header-anchor" href="#_4-2-进程状态实现"><span>4.2.进程状态实现</span></a></h3><p>上述的理论落实到 <code>Linux</code> 的系统中是怎么样的呢？让我们仔细研究一下内核里的状态。</p><p>这一部分的东西可以看一下内核源代码。源代码内部有对进程状态的描述，体现为 <code>sched.h</code> 中的宏定义中，也就是：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">/* Used in tsk-&gt;__state: */</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">define</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> TASK_RUNNING</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">			0x</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">00000000</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">define</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> TASK_INTERRUPTIBLE</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">		0x</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">00000001</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">define</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> TASK_UNINTERRUPTIBLE</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">		0x</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">00000002</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">define</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> __TASK_STOPPED</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">			0x</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">00000004</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">define</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> __TASK_TRACED</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">			0x</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">00000008</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">/* Used in tsk-&gt;exit_state: */</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">define</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> EXIT_DEAD</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">			0x</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">00000010</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">define</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> EXIT_ZOMBIE</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">			0x</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">00000020</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">define</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> EXIT_TRACE</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">			(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">EXIT_ZOMBIE</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> | EXIT_DEAD</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">/* Used in tsk-&gt;__state again: */</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">define</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> TASK_PARKED</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">			0x</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">00000040</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">define</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> TASK_DEAD</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">			0x</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">00000080</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">define</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> TASK_WAKEKILL</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">			0x</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">00000100</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">define</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> TASK_WAKING</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">			0x</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">00000200</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">define</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> TASK_NOLOAD</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">			0x</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">00000400</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">define</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> TASK_NEW</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">			0x</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">00000800</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">define</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> TASK_RTLOCK_WAIT</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">		0x</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">00001000</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">define</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> TASK_FREEZABLE</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">			0x</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">00002000</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">define</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> __TASK_FREEZABLE_UNSAFE</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">	       (</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">0x</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">00004000</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> IS_ENABLED</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">CONFIG_LOCKDEP</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">))</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">define</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> TASK_FROZEN</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">			0x</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">00008000</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">define</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> TASK_STATE_MAX</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">			0x</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">00010000</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">define</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> TASK_ANY</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">			(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">TASK_STATE_MAX</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">-1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// ...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您可以抽离出几个比较重要的状态：</p><ul><li><code>R(running)</code>，运行中的进程，可能在等 CPU 资源，也有可能正在被 CPU 调度中</li><li><code>S(sleeping)</code>，睡眠中的进程</li><li><code>D(disk sleep)</code>，磁盘睡眠中的进程</li><li><code>T(stopped)</code>，暂停的进程</li><li><code>t(tracing stop)</code>，停止并追踪的进程</li><li><code>Z(zombie)</code>，僵尸进程</li><li><code>X(dead)</code>，已经终止的进程</li></ul><h4 id="_4-2-1-运行状态和睡眠状态" tabindex="-1"><a class="header-anchor" href="#_4-2-1-运行状态和睡眠状态"><span>4.2.1.运行状态和睡眠状态</span></a></h4><p>接下来让我们写两份死循环代码生成的进程对比一下：</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 死循环1</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">stdio.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    while</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 死循环2</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">stdio.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    while</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%d\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以使用以下 <code>shell</code> 命令来分别查看两个进程：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 查看两个进程</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">while</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> :</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">do</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> ps</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> axj</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> |</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> head</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -n</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> ps</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ajx</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> |</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> grep</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> a.out</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> |</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> grep</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -v</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> grep</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> sleep</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">done</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面是两份代码各种的运行结果和脚本现象：</p><img src="`+y+'" title="" alt="9c197563-28c5-4d8c-8ad1-7419a3702121" style="zoom:50%;"><img src="'+B+'" title="" alt="0f664086-85a7-402e-9398-a7520624a272" style="zoom:50%;"><p>为什么第二段代码有的时候是“运行状态 <code>R</code>”，有的时候“休眠状态 <code>S</code> 呢”？因为 <code>CPU</code> 实在是太快了，第二段代码一直在访问非 <code>CPU</code> 资源即 <code>I/O</code> 时又太慢了，就处于经常处于运行状态和睡眠状态。</p><blockquote><p>补充：前台进程和后台进程。</p><p>前台进程是指用户当前正在交互的进程，它通常是用户启动并在终端上直接操作的进程。当一个进程在前台运行时，它会接收来自用户的输入，并将输出显示在终端上。前台进程通常会占用终端，阻塞其他进程的执行，直到该前台进程完成或暂停。</p><p>后台进程是指在用户启动后，在终端背后运行的进程。当一个进程在后台运行时，它不会占用终端，并且可以与其他进程并行执行。用户可以在终端上继续执行其他任务，而不必等待后台进程完成。</p><p>上述 <code>ps -axu</code> 中的进程状态携带的 <code>R+</code> 中的 <code>+</code> 就说明这个进程属于“前台进程”，前台进程一旦启动，执行命令就没有任何效果了，而且可以被 <code>[ctrl + z]</code>。如果希望自己的进程可以在后台运行，那么可以在末尾使用 <code>&amp;</code> 符号运行程序，这个时候还会回显一个 <code>PID</code>。</p><img src="'+D+'" title="" alt="b8e6a48b-e7a3-4d12-a157-228ff7a9982c" style="zoom:50%;"><p>这个时候我们可以看到这个进程已经少了 <code>+</code> 标志了。而要想杀死这个进程有很多方法，这里我们依旧使用 <code>kill</code> 命令的 <code>-9</code> 信号来杀死这个进程（<code>-9</code> 信号的权限很高，几乎所有进程都要响应），需要注意的是，无法使用 <code>[ctrl + c]</code> 杀死这个进程。</p><p>在 <code>Linux</code> 一旦启动前台进程，<code>bash</code> 就没有办法再接受您的指令了，您的输入会被前台进程强占。而启动后台进程 <code>bash</code> 依旧可以执行您的指令。这在有的时候下载某些资源的时候非常有用，不至于让我们原地干等。</p><p>我们其实一直忽略了 <code>shell</code> 会自动进行前后台切换的功能，一开始 <code>shell</code> 运行其他的前台进程时，会自动切入到后台，而如果使用指令把这个前台进程终止，<code>shell</code> 会自己会从后台切换为前台。</p><p>如果是已经在运行的前台进程，可以使用 <code>[ctrl+z]</code> 将其转移到后台暂停，为什么不直接在前台暂停呢？要是前台进程被暂停了键盘的输入就会失效（相当于 <code>bash</code> 挂掉了，因为对于一个会话来说，前台进程只有一个，键盘只会对前台进程进行交互），这也是为什么挂起是在后台挂起的原因。</p><p>而使用 <code>bg &lt;作业号&gt;</code> 可以将暂停的后台进程重新运行起来，但是还在后台运行，可以使用 <code>fg</code> 指令恢复前台运行。</p></blockquote><img src="'+o+'" title="" alt="37f3c7b3-d78e-4710-8254-0e6c491ec488" style="zoom:50%;"><p>“睡眠状态 <code>S</code>”（这里的睡眠有的时候也可以叫做可“中断睡眠”）实际上就是在等待某种资源或者事件完成，由于我们没有学过事件没有概念，可以暂时理解成阻塞状态。</p><p>可中断睡眠的意思就是：如果代码假设内有 <code>sleep(100)</code>，进程运行中处于“休眠状态 <code>S</code>”状态，并且可以使用 <code>-19</code> 可以停止进程，使进程变成“暂停状态 <code>T</code>”，也就是说这个进程在睡眠阶段被中断了。不仅可以使用 <code>kill -9 &lt;PID&gt;</code> 也可以使用 <code>[ctrl + c]</code> 杀死。</p><p>这种休眠状态也被叫“浅度休眠状态”。</p><img src="'+C+'" title="" alt="d183fb51-19b0-4253-b29a-baa42adebc70" style="zoom:50%;"><img src="'+v+'" title="" alt="e555b51f-c6a8-4765-896a-661a4511f14a" style="zoom:50%;"><p>而“磁盘休眠状态 <code>D</code>”，也是一种睡眠状态，又可叫“深度休眠状态”，而且在目前的机器状态下很难模拟出来，和 <code>S</code> 状态的区别就是：不可中断睡眠状态，不可被被动唤醒。</p><p>由于当计算机压力过大，操作系统会通过一定手段杀掉一些睡眠的进程来起到节省空间的作用。而之所以设置这个状态是因为操作系统在迫不得已的情况下会 <code>kill</code> 一些可中断睡眠的进程，为了避免某些重要的进程数据丢失，就可以设置深度睡眠，禁止被 <code>CPU</code> 杀掉，进程也就变得不可消失，保护了数据安全，只能等进程自己自动醒来。</p><p>深度睡眠是专门用来让进程访问磁盘设备时，防止进程被操作系统在极端情况被误杀的一种保护状态，只有在进程读取完磁盘数据的时候才能自动醒来，甚至使用 <code>-9</code> 的 <code>kill</code> 信号都无法杀掉处于“磁盘休眠状态 <code>D</code>”的进程。</p><p>那么我们真的没有其他办法杀掉这个处于“磁盘休眠状态 <code>D</code>”的进程么？还是有的，软件不行，硬件来凑，关机大法好！甚至很可能出现：只能使用拔除电源的硬关机方式杀死，因为使用内置的关机命令，有可能因为此时的磁盘还正在写入，导致软关机的方式无法光机。</p><p>有的时候如果磁盘的转速太低，而需要磁盘资源的进程有太多，也有可能导致出现大量的 <code>D</code> 状态进程...如果这样的进程太多了，操作系统有可能会被挂掉，此时操作系统处于“宕机”或者“半昏迷”的状态，这个时候只能选择断电。</p><p>为什么磁盘的转速会降低呢？有两个原因：</p><ol><li>磁盘“挂”掉了，已经不能被正常运行了</li><li>有时为了减少功率损耗，会降低磁盘的转速，甚至有的磁盘不工作的时候就直接不转动了</li></ol><blockquote><p>注意：有关磁盘的知识之后还会再详细提及。</p></blockquote><blockquote><p>注意：也许您注意到了 <code>Linux</code> 中实现的睡眠状态实际上就是进程的就绪状态，只不过换了一个说法罢了...</p></blockquote><blockquote><p>补充：不过倒是可以使用 <code>dd</code> 状态来模拟演示“磁盘休眠状态 <code>D</code>”，这点可以当拓展来看即可，有时间再来研究。</p><p>在 <code>Linux</code> 中，<code>dd</code> 命令被广泛用于数据的复制和转换操作。尽管 <code>dd</code> 命令本身并不会直接演示 <code>D</code> 状态，但它可能会导致进程进入 <code>D</code> 状态的情况。</p><p>当使用 <code>dd</code> 命令进行磁盘复制或读写操作时，它会与磁盘进行大量的 <code>I/O</code> 交互。如果所涉及的数据量较大或 <code>I/O</code> 速度较慢，就可能导致进程在等待 <code>I/O</code> 完成前都会处于进入 <code>D</code> 状态。</p><ol><li><p>例如，当使用 <code>dd</code> 命令从一个设备（如硬盘）读取数据时，如果目标设备上的数据尚未准备好或读取速度较慢，<code>dd</code> 命令所在的进程将会被阻塞，进入 <code>D</code> 状态，直到读取操作完成。</p></li><li><p>例如，当使用 <code>dd</code> 命令向设备写入数据时，如果目标设备无法及时处理写入请求或写入速度较慢，进程也会进入 <code>D</code> 状态，等待写入操作完成。</p></li></ol><p>在使用 <code>dd</code> 命令时，如果遇到进程长时间停留在 <code>D</code> 状态的情况，可能是由于磁盘操作的特性或环境造成的，可以适当调整命令参数或优化 <code>I/O</code> 性能来提高执行效率。</p></blockquote><h4 id="_4-2-2-暂停状态和停止并跟踪状态" tabindex="-1"><a class="header-anchor" href="#_4-2-2-暂停状态和停止并跟踪状态"><span>4.2.2.暂停状态和停止并跟踪状态</span></a></h4><p>那么“暂停状态 <code>T</code>”和“停止并跟踪状态 <code>t</code>”有什么区别么？</p><p>首先我们来模拟一下 <code>T</code> 或者 <code>t</code> 状态：<code>-19</code> 号信号就可以做到终止进程的目的，而 <code>-18</code> 号信号就可以使得进程继续运行。</p><p>使用 <code>gdb</code> 调试某个代码并且打入断点，<code>r</code> 操作后调试停在断点出，在另外一个控制台就可以查看出这个进程正处于 <code>t</code> 状态，也就是“停止并跟踪状态 <code>t</code>”。也就是说，这个状态更多用在调试代码打断点上。因此在编写代码时所使用的断点功能，实际就是利用的 <code>t</code> 状态来实现的。</p><p>处于这两个状态时，进程暂时不会访问任何资源，处于一种“停滞”状态，这实际上也是一种“阻塞状态”，只不过是等待用户的指令罢了...</p><img src="'+u+'" title="" alt="4a20b4e4-8f8d-44a3-9930-c7bc552a4079" style="zoom:50%;"><img src="'+m+'" title="" alt="c51d731f-bcc9-41d6-8a59-17e98b06eb53" style="zoom:50%;"><img src="'+b+`" title="" alt="ff7e76ce-f42d-4cc6-b71c-db43938ea90d" style="zoom:50%;"><h4 id="_4-2-3-终止状态和僵尸状态" tabindex="-1"><a class="header-anchor" href="#_4-2-3-终止状态和僵尸状态"><span>4.2.3.终止状态和僵尸状态</span></a></h4><p>而“终止状态 <code>X</code>”就是：如果需要销毁的进程实在太多，不可能一个进程被终止了就立刻被操作系统销毁了，因此这种状态是为操作系统做标记，好在操作系统处理好其他事情后根据 <code>X</code> 标记来销毁这些已经结束的进程（已经做好被操作系统回收的准备了）。因此这个 <code>X</code> 状态也很难看到和捕捉，瞬时性非常强。</p><blockquote><p>补充：操作系统回收进程的核心工作实际上就是将占据空间的 <code>PCB</code> 对象、代码、数据全部释放掉。</p></blockquote><p>而剩下的一个状态就是“僵尸状态 <code>Z</code>”，“僵尸状态 <code>Z</code>”是指一个进程已经退出，但是还不允许被操作系统回收（最多回收数据和代码），<code>PCB</code> 对象处于一个被检测返回结果的持续状态，需要检测退出的原因等。是任务成功了？还是任务失败了？</p><p>而且检测的返回结果也将通过 <code>return</code> 或者 <code>exit()</code> 写入到 <code>PCB</code> 对象里，只有检测完了才可以标记为“终止状态 <code>X</code>”，等待操作系统回收。</p><p>那么是谁在进行检测呢？一般是“父进程”或者“操作系统”来检测读取子进程剩下的 <code>PCB</code> 对象。在此之前，子进程的 <code>PCB</code> 对象内的数据必须被 <code>OS</code> 维护，并且设置了“僵尸状态 <code>Z</code>”。</p><p>正常来说是不会出现僵尸进程的，但如果父进程一直在执行某项任务，没来得及检查子进程的 <code>PCB</code> 对象内写入的数据，就有可能出现僵尸进程。下面演示“僵尸状态”：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 模拟僵尸进程的出现</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">stdio.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">unistd.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">sys/types.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">stdlib.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // fork之前是父进程</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">进程 PID：</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%d</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 父进程PPID：</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%d\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> getpid</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(),</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> getppid</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">());</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    pid_t</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> id </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> fork</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 从这里以后父子进程的代码都是共享的，会根据if来做调整，因此共享和执行是两回&gt;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">id </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        // 进程创建失败</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        perror</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">fork</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        return</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    else</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">id </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">==</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        // 子进程</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        while</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">            printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">I am child,PID:</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%d</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> PPID:</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%d\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> getpid</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(),</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> getppid</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">());</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">            sleep</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">            break</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        }</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        exit</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    else</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        // 父进程</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        while</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">            printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">I am father,PID:</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%d</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> PPID:</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%d\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> getpid</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(),</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> getppid</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">());</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">            sleep</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">you can see me!</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    sleep</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><img src="`+E+'" title="" alt="28b2094e-5ae8-4e7e-9249-f464412aa1ab" style="zoom:67%;"><p>并且左侧有回显“<code>&lt;defunct&gt;</code>”，由于进程处于“僵尸状态 <code>z</code>”，创建出来的 <code>PCB</code> 并没有被释放掉，会被 <code>OS</code> 一直维护，占用资源，因此这也是一种内存泄漏。</p><p>僵死进程会以终止状态保持在进程表中，并且会一直在等待父进程或者操作系统读取退出状态代码。</p><blockquote><p>吐槽：和僵尸电影里的僵尸不是很类似么，明明死去却依旧以“半死不活的状态（进程结束）”留停在“人间（计算机内）”，就需要“道士（父进程或者操作系统回收）”进行回收。</p></blockquote><p>那么是否可以创建一个恶意程序，让父进程不断创建出僵尸状态的进程来占取大量内存来“卡死”计算机呢？这种事情是有可能的，会发生严重的内存泄露！因此，我们在后续编写代码中必须要想办法回收僵尸进程。而关于僵尸进程的解决办法，我后续再提及。</p><blockquote><p>警告：由于僵尸进程已经处于进程退出的状态了，是无法使用 <code>-9</code> 信号杀死的！</p></blockquote><p>下面总结一下状态之间的动态变化：</p><figure><img src="'+f+`" alt="image-20240609195221050" tabindex="0" loading="lazy"><figcaption>image-20240609195221050</figcaption></figure><p><span style="text-emphasis:filled red;">这张图片有点丑，待补充...</span></p><h2 id="_5-进程托管" tabindex="-1"><a class="header-anchor" href="#_5-进程托管"><span>5.进程托管</span></a></h2><p>进程之间有父子关系，其中孤儿进程就是一种失去父进程的进程（注意不是进程状态，要和上面的进程状态概念做区分）。</p><p>父进程如果提前退出，那么子进程就会被称为“孤儿进程”，注意和“僵尸状态”做概念上的区分。</p><blockquote><p>区分：孤儿进程和僵尸状态</p><ol><li>如果子进程退出了，而父进程没有退出并且也不理会这个子进程（回收），那么此时的子进程就处于“僵尸状态”。如果理会了子进程，就是子进程被成功回收。</li><li>如果父进程先挂掉了，无论子进程是否结束，都可以叫此时的子进程为“孤儿进程”，若是子进程结束，则子进程又陷入了“僵尸状态”。</li></ol></blockquote><p>在代码编写逻辑错误的时候，如果出现了孤儿进程就会被“<code>1</code> 号 <code>init</code> 进程”领养，并且成为后台进程，下面我们来写一段代码来感受一下：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 模拟孤儿进程</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">stdio.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">unistd.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    pid_t</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> id </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> fork</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">id </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">==</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        //child</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        while</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">            printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">hello i am child</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">            sleep</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    else</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        //fatcher</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">        int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> n </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 6</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        while</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">n </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">            printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">hello i am fatcher</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\n</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> %d</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> n</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">            sleep</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">            n</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">--</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><img src="`+F+`" title="" alt="6edcd390-5547-4ff3-bfc5-d9c1abd24be5" style="zoom:50%;"><p>可以看到父进程一结束，子进程的 <code>PPID</code> 瞬间切换为 <code>1</code>，也就是被 <code>1号</code> 进程 <code>init/systemd</code> 所“领养”，这个进程可以简单理解为“系统本身”。</p><p>但是为什么父进程退出后，子进程要被“领养”呢？因为回收子进程的代码一般处于父进程中，如果子进程变成孤儿进程则没有人来回收该进程，那么就需要被其他进程领养进行回收。</p><p>而且从上面的结果图我们可以看到，如果子进程变成了孤儿进程，那就会变成后台运行的进程，这就意味着，我们无法直接使用 <code>[ctrl+c]</code> 快捷键方式终止这个进程（命令行显示该快捷键为 <code>^C</code>），必须使用 <code>-9</code> 信号杀死。</p><blockquote><p>吐槽：不过比较好玩的是，基本是在左侧不断输出后台进程的 <code>bash</code> 界面中依旧是可以正常输入命令的，只不过输入命令显得的有点乱……</p></blockquote><blockquote><p>补充：守护进程/精灵进程实际上就是孤儿进程，他们的父进程是 <code>1</code> 号 <code>init</code> 进程，退出后不会变成僵尸进程，一般孤儿进程的出现都是刻意为之，脱离了终端和登录会话的所有联系，可以用来独立执行一些周期性任务，因此这样的进程不算是内存泄露。</p></blockquote><h2 id="_6-进程优先" tabindex="-1"><a class="header-anchor" href="#_6-进程优先"><span>6.进程优先</span></a></h2><h3 id="_6-1-优先级概念" tabindex="-1"><a class="header-anchor" href="#_6-1-优先级概念"><span>6.1.优先级概念</span></a></h3><ol><li><p><code>CPU</code> 资源分配的先后顺序就是指进程的优先权，之所以设计优先级是因为 <code>CPU</code> 资源是有限的、稀缺的，但系统中的进程又太多。</p></li><li><p>优先权高的进程有优先执行权利，配置进程优先级别对多环境的 <code>Linux</code> 很有用，可以改善系统性能。</p></li><li><p>优先级在具体实现为 <code>PCB</code> 结构体内部的某个整数数据，交给调度器评判优先级来对进程队列进行“调度”。</p></li></ol><blockquote><p>区分：优先级和权限。</p><p>优先级是“已经保证能够得到申请的某种资源，就是要等候（已经有权限了，不然连等待都不行）”，而权限是“能否得到某种资源”。</p></blockquote><h3 id="_6-2-优先级范围" tabindex="-1"><a class="header-anchor" href="#_6-2-优先级范围"><span>6.2.优先级范围</span></a></h3><p>一般优先级范围在 <code>PRI∈[60~99]</code> 中，默认进程的优先级是 <code>80</code>，<code>60</code> 是较高的级别。</p><h3 id="_6-3-优先级查看" tabindex="-1"><a class="header-anchor" href="#_6-3-优先级查看"><span>6.3.优先级查看</span></a></h3><p>在 <code>Linux</code> 中 <code>优先级=老的优先级+nice值</code>，<code>nice值</code> 是什么呢？</p><p>下面我们来编写一个代码，并且使用命令 <code>ps -la</code> 的形式输出详细的进程列表，或者使用 <code>ps -al | head -1 &amp;&amp; ps -la | grep a.out</code> 输出。</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 用于测试优先级的代码</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">stdio.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">unistd.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    while</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">hello pid:</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%d\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> getpid</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">());</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        sleep</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><img src="`+x+'" title="" alt="204468e6-8836-4288-a7e0-20f397c2ff26" style="zoom:50%;"><p>我们梳理一下这里出现的几个重要的进程信息：</p><ol><li><p><code>UID</code> 代表执行者的身份</p></li><li><p><code>PID</code> 表该进程的代号</p></li><li><p><code>PPID</code> 代表该进程的父进程代号</p></li><li><p><code>PRI</code> 代表这个进程可被执行的优先级，其值越小越早被执行</p></li><li><p><code>NI</code> 代表这个进程的 <code>nice值</code>，表示进程可以被执行的优先级的修正数值，也就是说 <code>Linux</code> 中的进程优先级是可以被调整的，调整进程的 <code>nice值</code> 就是调整进程的优先级。如果 <code>nice值</code> 为负数，那么该程序的优先级会变小，反之变高，<code>PRI(new)=PRI(old)+nice</code></p></li></ol><h3 id="_6-4-优先级修改" tabindex="-1"><a class="header-anchor" href="#_6-4-优先级修改"><span>6.4.优先级修改</span></a></h3><p>还可以使用 <code>top</code> 工具来查看进程的优先级，进入 <code>top</code> 后输入 <code>r</code> 然后再输入某进程的 <code>PID</code>，接着输入想要的 <code>nice值</code> 即可修改进程的优先级。我们假设输入 <code>nice</code> 的值为 <code>30</code>，再来观察结果。</p><img src="'+_+'" title="" alt="5f559da0-fec0-456e-be22-53045f35ac14" style="zoom:50%;"><p>为什么 <code>PRI</code> 只加了 <code>19</code> 呢？因为我们规定了 <code>nice</code> 的取值范围是 <code>[-20,19]</code>，一共有 <code>40</code> 个级别。</p><img src="'+I+'" title="" alt="8c74fb0b-46d6-4d87-b385-c821b7b4b856" style="zoom:50%;"><p>如果需要高优先级，那么就必须使用管理员权限来调整 <code>nice值</code>，否则大概率只能调低优先级，调高就会出现上面的错误提示，下面我们使用 <code>sudo top</code> 来修改优先级。</p><img src="'+q+'" title="" alt="768afefe-3581-4e8b-b9c8-e3ce357507b7" style="zoom:50%;"><p>需要注意的是每次修改优先级是根据 <code>默认PRI值，即：80</code> 来结合 <code>nice值</code> 的，也就是说：每次设置 <code>nice</code> 值的时候，公式 <code>PRI(new)=PRI(old)+nice</code> 中的 <code>PRI(old)</code> 默认值为 <code>80</code>，而不是根据进程当前的 <code>PID</code> 值。</p><img title="" src="'+w+'" alt="eed391eb-0d77-4cf2-8518-e1a27cc0cad4" style="zoom:67%;"><p>一款优秀的操作系统在能提供优先级的同时还可以在调整优先级的时候尽量不打破调度平衡，因此 <code>nice值</code> 本身也不会特别大。</p><p>另外，类似的指令还有 <code>nice</code> 和 <code>renice</code> 指令、<code>setpriority()</code> 等也可以做到上述的优先级调整。</p><blockquote><p>补充：下面再普及一些有关进程调度的相关术语。</p><ol><li><p>竞争性：系统进程数量众多，而 <code>CPU</code> 资源只有少量，甚至只有一个，所以进程之间是有竞争关系的，为了高效完成任务，更加合理竞争资源，也就有了优先级</p></li><li><p>独立性：多进程运行，需要独享各种资源，多进程运行期间互不干扰，而父子进程之间也是具有独立性的。只有一个 <code>CPU</code> 的情况下理应只有一个进程在运行，但是一个时间端内不一定。</p></li><li><p>并发性：多个进程在一个 <code>CPU</code> 下采用进程切换的方式，在一端时间之内，让多个进程都得以推进，称之为“并发”（现在的个人电脑大多是单核的）。</p></li><li><p>并行性：多个进程在多个 <code>CPU</code> 先分别同时运行，这称之为“并行”。通常并行的多个 <code>CPU</code> 内部也是采用并发的设计。</p></li><li><p>时间片：一个进程不可能一直占用 <code>CPU</code>，要不然其他进程都会表现出卡死的状态，因此我们给一个进程设置了时间片，让该进程只能运行一个时间片段的时间，能运行多少看进程数据和 <code>CPU</code> 的计数，过了这段时间后 <code>CPU</code> 切换另外一个进程进行处理，也是按照一定时间段来运行这个进程，这样不断切换切换，达到“雨露均沾”的效果。因此哪怕是写出一个关于死循环的进程，也不会导致其他进程“卡死”的状态（但是实际上在 <code>Linux</code> 内）。</p></li><li><p>抢占与出让：如果操作系统发现有优先级更高的进程，哪怕当前 <code>CPU</code> 处理的程序没有过完一个时间片，也会“出让”给优先级更高的进程来“抢占”，<code>Linux</code> 就支持这种操作，也就是说 <code>Linux</code> 是基于时间片的轮转式抢占式内核。</p></li><li><p>切换与上下文：<code>CPU</code> 内部存在大量的寄存器，进程加载到 <code>CPU</code> 实际上是将数据加载到寄存器。如果进程 <code>A</code> 正在被运行，那么 <code>CPU</code> 内部的寄存器里面此时是进程 <code>A</code> 的临时数据，也叫做 <code>A</code> 的“上下文”，“上下文”数据在短期内不可以被丢弃，否则这个正在运行的 <code>A</code> 进程就废掉了。可是这样就有问题了，因为进程 <code>A</code> 是不可能一直把上下文存放在 <code>CPU</code> 内部的寄存器的，因此经过一个时间片后后，进程 <code>A</code> 在被其他进程切换时必须保存好自己的上下文数据，等到下次 <code>进程A</code> 又被 <code>CPU</code> 执行的时候，<code>CPU</code> 通过重新加载上下文才不会忘记这个进程的执行情况。有了上下文保存才能使进程有切换的可能。</p><p>不过需要注意的是，现在的操作系统可能不会让 <code>PCB</code> 直接保存上下文数据（这样的 <code>PCB</code> 对象太大了），有可能会利用 <code>TSS</code> 任务状态段（<code>struct tss_struct{/.../}</code>），在 <code>PCB</code> 对象中包含一个 <code>struct tss_struct tss</code>，来达到同样的目的（但是也是和 <code>PCB</code> 对象有关联的，实际情况可能会很复杂）。</p></li></ol></blockquote><h2 id="_7-进程调度" tabindex="-1"><a class="header-anchor" href="#_7-进程调度"><span>7.进程调度</span></a></h2><p>这里我们做一个知识拓展，主要是讲解 <code>Linux 2.6.32(32位平台)</code> 内核种的调度队列和调度原理（大 <code>O(1)</code> 调度）。</p><p>首先需要普及一个知识，一般操作系统可以按照调度的原理分为两种系统：</p><ol><li>分时系统的普通优先级：以调度器来作为核心原则来平衡调度进程，即使有优先级，也有可能进行进程切换达到平衡</li><li>实时系统的实时优先级：也就是一次调度，无需频繁切换，严格按照优先级来进行调度，这适合在追求响应速度的场景</li></ol><p>而我们使用的 <code>Linux</code> 这两种模式都支持，其中交给用户使用的 [60,99] 号的优先级也就是普通优先级。图中的的 <code>queue[140]</code> 中 <code>[100, 139]</code> 中的 <code>40</code> 个元素映射成 <code>[60,99]</code> 号优先级，供用户自由调整进程优先级。</p><figure><img src="'+P+'" alt="image-20231014161857819" tabindex="0" loading="lazy"><figcaption>image-20231014161857819</figcaption></figure><p>而为什么维护两份进程队列呢？这是因为有一些特殊情况：假设在 <code>99</code> 优先级进程前插入了许多 <code>80</code> 优先级的进程，那么对于 <code>99</code> 优先级的进程来说就完全没有被调度到的机会。</p><p>因此设置了两个指针 <code>active</code> 和 <code>expired</code>，分别维护两份运行队列。对于新进来的进程，会在过期运行队列里进行插入。因此这样活跃运行队列的进程会越来越少，而过期运行队列的进程会越来越多，此时达到一定程度后，交换 <code>active</code> 和 <code>expired</code> 内的内容，这样就可以达到快速拷贝，并且平衡进程的效果。</p><p>而所谓的进程抢占，其本质就是：“不把进程插入到过期运行队列，而是直接插入到活跃运行队列”。</p><p>而每次都要遍历 <code>queue</code> 数组的开销会比较大，因此就可以使用位图 <code>int bitmap[5]</code> 来加快扫描遍历，<code>5*8=40</code> 个比特位，位为 <code>1</code> 则代表有进程需要被调度，<code>0</code> 则没有。因此，只需要做简单的位操作就可以直接生成下标调度对应优先级的进程。</p><p>而另外一个 <code>nr_active</code> 则代表整个调度队列里一共有多少个进程正在被调度，通常发现 <code>nr_active == 0</code> 时，就会交换 <code>active</code> 和 <code>expired</code> 指针。</p><p>进程阻塞的时候，先让进程去获取非 <code>CPU</code> 资源，然后放入过期运行队列里等待下次指针交换被唤醒即可。</p><p>而整个查找过程很接近 <code>O(1)</code>，也就是内核的大 <code>O(1)</code> 调度算法。这种调度策略既保证了优先级的意义，又保证了平衡性。</p><h2 id="_8-进程空间" tabindex="-1"><a class="header-anchor" href="#_8-进程空间"><span>8.进程空间</span></a></h2><h3 id="_8-1-进程地址" tabindex="-1"><a class="header-anchor" href="#_8-1-进程地址"><span>8.1.进程地址</span></a></h3><h4 id="_8-1-1-进程地址的打印" tabindex="-1"><a class="header-anchor" href="#_8-1-1-进程地址的打印"><span>8.1.1.进程地址的打印</span></a></h4><p>我们以 <code>Linux 2.6.32(32位平台)</code> 为研究背景，探究一下对一个进程来说，自己可用的内存及其分布：</p><img title="" src="'+U+`" alt="dd286fcb-1e53-4cd7-8455-adbf522ca683" style="zoom:67%;"><p>关于这个地址空间分布我们可以通过 <code>C</code> 代码来证明：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">stdio.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">stdlib.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> g_value_2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> g_value_1 </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 10</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> argc</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char*</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> argv</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">[]</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char*</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> env</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">[]</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">code addr&lt;代码区/正文&gt;: </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%p\\n\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    const</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> str </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">hello word!</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    /*</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        注意“hello word!”是存储在正文代码区域（说），实际上所有的字面常量都是硬编码进代码的</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        而代码是只读的，不可以被修改的        </span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        而 str 变量的空间开辟在栈上，</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        但是 str 这个指针变量保存的是处于静态数据区内的“hello word!”里&#39;h&#39;的地址，</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        故打印 str 就是打印静态数据区的地址</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    */</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">read only addr&lt;静态区&gt;: </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%p\\n\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> str</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">init g_value_1 global addr&lt;已初始化全局变量区&gt;: </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%p\\n\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &amp;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">g_value_1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//static 变量也会放在这里，您可以自己试一下在这里加上一个 static 变量（这也就是为什么 static 变量只会初始化一次的原因）</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">uninit g_value_2 global addr&lt;未初始化全局变量区&gt;: </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%p\\n\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &amp;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">g_value_2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    int*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> p1 </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int*</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">malloc</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">sizeof</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 10</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    int*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> p2 </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int*</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">malloc</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">sizeof</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 10</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">heap addr&lt;堆区&gt;: </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%p\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> p1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">heap addr&lt;堆区&gt;: </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%p\\n\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> p2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">stack addr&lt;栈区&gt;: </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%p\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &amp;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">str</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">stack addr&lt;栈区&gt;: </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%p\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &amp;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">p1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">stack addr&lt;栈区&gt;: </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%p\\n\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &amp;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">p2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    for</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> argc</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">++</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">command line paramete&lt;命令行参数&gt;r：argv[</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%d</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">] = </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%p\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> argv</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    for</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> j </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> env</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">j</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">];</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> j</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">++</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">command line parameter&lt;环境变量&gt;：env[</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%d</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">] = </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%p\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> j</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> env</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">j</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    free</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">p1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    free</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">p2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ./a.out</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> a</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ab</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> abc</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> abcd</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> abcde</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> #后面是随意输入的参数</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">code</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> addr</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">代码区/正</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">文</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x40060d</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">read</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> only</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> addr</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">静态</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">区</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x400882</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">init</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> g_value_1</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> global</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> addr</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">已初始化全局变量</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">区</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x60104c</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">uninit</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> g_value_2</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> global</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> addr</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">未初始化全局变量</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">区</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x601054</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">heap</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> addr</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">堆</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">区</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x1974010</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">heap</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> addr</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">堆</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">区</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x1974040</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">stack</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> addr</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">栈</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">区</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x7ffddd6b80d0</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">stack</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> addr</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">栈</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">区</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x7ffddd6b80c8</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">stack</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> addr</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">栈</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">区</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x7ffddd6b80c0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">command</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> line</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> paramete</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">命令行参</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">数</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">r：argv[0]</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x7ffddd6ba346</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">command</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> line</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> paramete</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">命令行参</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">数</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">r：argv[1]</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x7ffddd6ba34e</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">command</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> line</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> paramete</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">命令行参</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">数</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">r：argv[2]</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x7ffddd6ba350</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">command</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> line</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> paramete</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">命令行参</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">数</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">r：argv[3]</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x7ffddd6ba353</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">command</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> line</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> paramete</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">命令行参</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">数</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">r：argv[4]</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x7ffddd6ba357</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">command</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> line</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> paramete</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">命令行参</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">数</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">r：argv[5]</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x7ffddd6ba35c</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">command</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> line</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> parameter</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">环境变</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">量</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">：env[0]</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x7ffddd6ba362</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">command</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> line</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> parameter</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">环境变</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">量</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">：env[1]</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x7ffddd6ba378</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">command</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> line</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> parameter</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">环境变</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">量</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">：env[2]</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x7ffddd6ba38c</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">command</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> line</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> parameter</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">环境变</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">量</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">：env[3]</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x7ffddd6ba3a3</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">command</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> line</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> parameter</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">环境变</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">量</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">：env[4]</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x7ffddd6ba3b7</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">command</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> line</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> parameter</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">环境变</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">量</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">：env[5]</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x7ffddd6ba3c7</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">command</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> line</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> parameter</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">环境变</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">量</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">：env[6]</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x7ffddd6ba3d5</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">command</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> line</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> parameter</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">环境变</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">量</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">：env[7]</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x7ffddd6ba3f6</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">command</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> line</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> parameter</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">环境变</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">量</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">：env[8]</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x7ffddd6ba412</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">command</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> line</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> parameter</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">环境变</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">量</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">：env[9]</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x7ffddd6ba41b</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">command</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> line</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> parameter</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">环境变</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">量</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">：env[10]</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x7ffddd6baad3</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">command</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> line</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> parameter</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">环境变</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">量</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">：env[11]</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x7ffddd6bab7a</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">command</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> line</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> parameter</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">环境变</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">量</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">：env[12]</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x7ffddd6bac29</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">command</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> line</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> parameter</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">环境变</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">量</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">：env[13]</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x7ffddd6bac42</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">command</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> line</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> parameter</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">环境变</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">量</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">：env[14]</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x7ffddd6bac68</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">command</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> line</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> parameter</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">环境变</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">量</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">：env[15]</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x7ffddd6bac78</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">command</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> line</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> parameter</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">环境变</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">量</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">：env[16]</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x7ffddd6bac97</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">command</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> line</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> parameter</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">环境变</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">量</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">：env[17]</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x7ffddd6baca6</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">command</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> line</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> parameter</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">环境变</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">量</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">：env[18]</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x7ffddd6bacae</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">command</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> line</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> parameter</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">环境变</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">量</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">：env[19]</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x7ffddd6bad30</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">command</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> line</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> parameter</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">环境变</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">量</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">：env[20]</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x7ffddd6bad3c</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">command</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> line</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> parameter</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">环境变</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">量</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">：env[21]</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x7ffddd6bad7c</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">command</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> line</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> parameter</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">环境变</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">量</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">：env[22]</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x7ffddd6badaa</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">command</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> line</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> parameter</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">环境变</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">量</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">：env[23]</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x7ffddd6bae02</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">command</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> line</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> parameter</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">环境变</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">量</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">：env[24]</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x7ffddd6bae25</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">command</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> line</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> parameter</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">环境变</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">量</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">：env[25]</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x7ffddd6bae8a</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">command</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> line</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> parameter</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">环境变</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">量</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">：env[26]</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x7ffddd6baeb3</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">command</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> line</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> parameter</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">环境变</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">量</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">：env[27]</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x7ffddd6baf16</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">command</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> line</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> parameter</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">环境变</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">量</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">：env[28]</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x7ffddd6baf87</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">command</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> line</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> parameter</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">环境变</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">量</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">：env[29]</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x7ffddd6bafa6</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">command</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> line</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> parameter</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">环境变</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">量</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">：env[30]</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x7ffddd6bafbc</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">command</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> line</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> parameter</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">环境变</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">量</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">：env[31]</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x7ffddd6bafd0</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">command</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> line</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> parameter</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">环境变</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">量</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">：env[32]</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x7ffddd6bafda</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里，打印出来的地址大小越来越大，也就是从低地址到高地址。您也可以通过一些文本指令倒过来打印。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ./a.out</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> a</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ab</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> abc</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> abcd</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> abcde</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> |</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> tac</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">command</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> line</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> parameter</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">环境变</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">量</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">：env[32]</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x7ffe2d93bfda</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">command</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> line</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> parameter</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">环境变</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">量</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">：env[31]</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x7ffe2d93bfd0</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">command</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> line</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> parameter</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">环境变</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">量</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">：env[30]</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x7ffe2d93bfbc</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">command</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> line</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> parameter</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">环境变</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">量</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">：env[29]</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x7ffe2d93bfa6</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">command</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> line</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> parameter</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">环境变</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">量</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">：env[28]</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x7ffe2d93bf87</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">command</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> line</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> parameter</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">环境变</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">量</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">：env[27]</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x7ffe2d93bf16</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">command</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> line</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> parameter</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">环境变</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">量</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">：env[26]</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x7ffe2d93beb3</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">command</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> line</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> parameter</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">环境变</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">量</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">：env[25]</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x7ffe2d93be8a</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">command</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> line</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> parameter</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">环境变</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">量</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">：env[24]</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x7ffe2d93be25</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">command</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> line</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> parameter</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">环境变</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">量</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">：env[23]</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x7ffe2d93be02</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">command</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> line</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> parameter</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">环境变</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">量</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">：env[22]</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x7ffe2d93bdaa</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">command</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> line</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> parameter</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">环境变</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">量</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">：env[21]</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x7ffe2d93bd7c</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">command</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> line</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> parameter</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">环境变</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">量</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">：env[20]</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x7ffe2d93bd3c</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">command</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> line</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> parameter</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">环境变</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">量</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">：env[19]</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x7ffe2d93bd30</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">command</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> line</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> parameter</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">环境变</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">量</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">：env[18]</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x7ffe2d93bcae</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">command</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> line</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> parameter</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">环境变</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">量</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">：env[17]</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x7ffe2d93bca6</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">command</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> line</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> parameter</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">环境变</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">量</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">：env[16]</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x7ffe2d93bc97</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">command</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> line</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> parameter</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">环境变</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">量</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">：env[15]</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x7ffe2d93bc78</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">command</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> line</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> parameter</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">环境变</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">量</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">：env[14]</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x7ffe2d93bc68</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">command</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> line</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> parameter</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">环境变</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">量</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">：env[13]</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x7ffe2d93bc42</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">command</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> line</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> parameter</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">环境变</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">量</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">：env[12]</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x7ffe2d93bc29</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">command</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> line</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> parameter</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">环境变</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">量</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">：env[11]</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x7ffe2d93bb7a</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">command</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> line</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> parameter</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">环境变</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">量</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">：env[10]</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x7ffe2d93bad3</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">command</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> line</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> parameter</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">环境变</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">量</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">：env[9]</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x7ffe2d93b41b</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">command</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> line</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> parameter</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">环境变</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">量</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">：env[8]</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x7ffe2d93b412</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">command</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> line</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> parameter</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">环境变</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">量</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">：env[7]</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x7ffe2d93b3f6</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">command</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> line</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> parameter</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">环境变</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">量</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">：env[6]</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x7ffe2d93b3d5</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">command</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> line</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> parameter</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">环境变</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">量</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">：env[5]</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x7ffe2d93b3c7</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">command</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> line</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> parameter</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">环境变</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">量</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">：env[4]</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x7ffe2d93b3b7</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">command</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> line</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> parameter</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">环境变</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">量</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">：env[3]</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x7ffe2d93b3a3</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">command</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> line</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> parameter</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">环境变</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">量</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">：env[2]</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x7ffe2d93b38c</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">command</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> line</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> parameter</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">环境变</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">量</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">：env[1]</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x7ffe2d93b378</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">command</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> line</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> parameter</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">环境变</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">量</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">：env[0]</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x7ffe2d93b362</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">command</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> line</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> paramete</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">命令行参</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">数</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">r：argv[5]</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x7ffe2d93b35c</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">command</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> line</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> paramete</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">命令行参</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">数</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">r：argv[4]</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x7ffe2d93b357</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">command</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> line</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> paramete</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">命令行参</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">数</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">r：argv[3]</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x7ffe2d93b353</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">command</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> line</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> paramete</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">命令行参</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">数</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">r：argv[2]</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x7ffe2d93b350</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">command</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> line</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> paramete</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">命令行参</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">数</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">r：argv[1]</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x7ffe2d93b34e</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">command</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> line</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> paramete</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">命令行参</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">数</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">r：argv[0]</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x7ffe2d93b346</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">stack</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> addr</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">栈</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">区</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x7ffe2d939be0</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">stack</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> addr</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">栈</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">区</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x7ffe2d939be8</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">stack</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> addr</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">栈</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">区</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x7ffe2d939bf0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">heap</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> addr</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">堆</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">区</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x19a9040</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">heap</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> addr</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">堆</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">区</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x19a9010</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">uninit</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> g_value_2</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> global</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> addr</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">未初始化全局变量</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">区</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x601054</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">init</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> g_value_1</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> global</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> addr</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">已初始化全局变量</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">区</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x60104c</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">read</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> only</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> addr</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">静态</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">区</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x400882</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">code</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> addr</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">代码区/正</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">文</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x40060d</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过上述代码的地址变化，我们可以验证进程地址空间是真实存在的。</p><blockquote><p>注释 <code>1</code>：未初始化数据全称为“未初始化全局数据区”、已初始化数据全称为“已初始化全局数据区”</p><p>注释 <code>2</code>：栈空间的整体空间开辟使用规律向下增长，堆空间的整体空间开辟使用规律向上增长（但是在使用空间都是向上使用的，利用类型这种“偏移量”的方式使用）。不过这些现象仅限于 <code>Linux</code> 中，<code>Windows</code> 操作系统为了系统安全考虑，在这方面改动比较多，这也就是为什么我限定了 <code>32</code> 位 <code>Linux</code> 背景的缘故。</p><p>注释 <code>3</code>：栈区和堆区中间有巨大的“镂空”，这里的共享区等我们以后讲到共享内存的时候会详细学习。</p><p>注释 <code>4</code>：同时根据多个栈地址和多个堆地址，我们可以发现栈和堆相向而生。</p><p>注释 <code>5</code>：上述代码的地址都是程序运行后才打印出来的，也就是进程自己打印出来的。</p></blockquote><p>在 <code>32</code> 位下一个进程的地址空间的取值范围是 <code>0x0000 0000 ~ 0xFFFF FFFF</code>。其中 <code>[0, 3GB]</code> 为用户空间，<code>[3GB, 4GB]</code> 为内核空间。往后我们理解地址空间，一定要想到这 <code>4GB</code> 的空间，而不仅仅是那 <code>3GB</code> 的空间。</p><h4 id="_8-1-2-进程地址的划分" tabindex="-1"><a class="header-anchor" href="#_8-1-2-进程地址的划分"><span>8.1.2.进程地址的划分</span></a></h4><p>内核中的“进程地址空间”的本质是一种“数据结构”的描述，本质也就是一种“数据结构”的定义，依靠这个数据结构来划分地址范围（在 <code>32</code> 位下，全部地址从 <code>0x 0000 0000</code> 开始编址到 <code>0x FFFF FFFF</code> 为止，进程地址空间细化了这块范围）。</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//进程地址空间地址划分</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">struct</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> mm_struct</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//这个结构体就是用来划分地址范围的，这里只是写了一个大概伪代码，其成员不是真的是下面这些，但是在实际实现中类似</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    //代码区</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> code_start</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> code_end</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    //</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> init_start</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> init_end</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> uninit_start</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> uninit_end</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> heep_start</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> heep_end</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> stack_start</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> stack_end</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    //...</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是，很多初学者会误认为进程地址空间分布是内存地址空间分布，但是实际上进程地址空间是一个抽象的概念，并不是内存的布局！</p><p>就连以前我们在 <code>C</code> 语言内打印的指针地址也不是真正的内存地址（是一个虚拟内存地址）。以前学习 <code>C</code> 语言的时候只是为了方便说明，因此没有在地址这里深入探究。</p><h4 id="_8-1-3-进程地址的现象" tabindex="-1"><a class="header-anchor" href="#_8-1-3-进程地址的现象"><span>8.1.3.进程地址的现象</span></a></h4><p>为什么说我们以前在 <code>C</code> 语言提到的内存地址不是真实内存地址而是虚拟内存地址呢？换句话来说，以前我们在语言层面说的内存难道不是真实的内存吗？我们首先可以通过一个 <code>C</code> 程序观察一下现象：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">stdio.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">unistd.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> g_val </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 100</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    pid_t</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> id </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> fork</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//创建子进程</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">id </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">==</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//子进程代码</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">        int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> cnt </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        while</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">            printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">I am a child. pid = </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%d</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">, ppid = </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%d</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">, g_val = </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%d</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">, &amp;g_val = </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%p</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">.</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> \\</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">            getpid</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(),</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> getppid</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(),</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> g_val</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &amp;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">g_val</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">            sleep</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">            cnt</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">++</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">            if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">cnt </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">==</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">            {</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                g_val </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 200</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">                printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">child chage g_val = 100 --&gt; g_val = 200</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">            }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    else</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//父进程代码</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        while</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">            printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">I am a father. pid = </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%d</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">, ppid = </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%d</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">, g_val = </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%d</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">, &amp;g_val = </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%p</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">.</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> \\</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">            getpid</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(),</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> getppid</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(),</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> g_val</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &amp;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">g_val</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">            sleep</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ./a.out</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">I</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> am</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> a</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> father.</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> pid</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 6946,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ppid</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 24702,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> g_val</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 100,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &amp;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">g_val</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 0x60105c.</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">I</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> am</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> a</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> child.</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> pid</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 6947,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ppid</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 6946,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> g_val</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 100,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &amp;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">g_val</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 0x60105c.</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">I</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> am</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> a</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> father.</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> pid</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 6946,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ppid</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 24702,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> g_val</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 100,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &amp;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">g_val</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 0x60105c.</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">I</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> am</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> a</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> child.</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> pid</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 6947,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ppid</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 6946,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> g_val</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 100,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &amp;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">g_val</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 0x60105c.</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">I</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> am</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> a</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> father.</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> pid</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 6946,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ppid</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 24702,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> g_val</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 100,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &amp;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">g_val</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 0x60105c.</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">I</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> am</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> a</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> child.</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> pid</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 6947,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ppid</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 6946,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> g_val</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 100,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &amp;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">g_val</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 0x60105c.</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">I</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> am</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> a</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> father.</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> pid</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 6946,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ppid</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 24702,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> g_val</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 100,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &amp;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">g_val</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 0x60105c.</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">child</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> chage</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> g_val</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 100</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> g_val</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 200</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">I</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> am</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> a</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> child.</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> pid</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 6947,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ppid</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 6946,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> g_val</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 200,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &amp;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">g_val</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 0x60105c.</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">I</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> am</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> a</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> father.</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> pid</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 6946,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ppid</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 24702,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> g_val</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 100,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &amp;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">g_val</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 0x60105c.</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">I</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> am</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> a</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> child.</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> pid</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 6947,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ppid</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 6946,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> g_val</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 200,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &amp;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">g_val</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 0x60105c.</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">I</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> am</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> a</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> father.</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> pid</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 6946,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ppid</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 24702,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> g_val</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 100,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &amp;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">g_val</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 0x60105c.</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">I</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> am</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> a</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> child.</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> pid</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 6947,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ppid</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 6946,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> g_val</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 200,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &amp;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">g_val</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 0x60105c.</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">I</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> am</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> a</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> child.</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> pid</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 6947,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ppid</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 6946,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> g_val</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 200,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &amp;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">g_val</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 0x60105c.</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">I</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> am</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> a</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> father.</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> pid</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 6946,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ppid</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 24702,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> g_val</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 100,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &amp;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">g_val</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 0x60105c.</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">I</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> am</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> a</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> father.</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> pid</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 6946,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ppid</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 24702,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> g_val</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 100,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &amp;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">g_val</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 0x60105c.</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">I</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> am</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> a</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> child.</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> pid</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 6947,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ppid</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 6946,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> g_val</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 200,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &amp;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">g_val</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 0x60105c.</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">I</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> am</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> a</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> father.</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> pid</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 6946,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ppid</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 24702,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> g_val</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 100,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &amp;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">g_val</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 0x60105c.</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">I</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> am</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> a</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> child.</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> pid</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 6947,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ppid</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 6946,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> g_val</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 200,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &amp;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">g_val</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 0x60105c.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>欸！我们发现了一个离谱的现象：子进程修改的全局变量不会影响父进程的输出该全局变量的值，也就是说”在同一个地址不同的两次访问，出现了不同值“。</p><p>那么这就让我们怀疑一个事实，全局变量的分别打印出来的两个相同数值地址，真的是“相同”的么？</p><p>也就是说，我们通过 <code>printf()</code> 和 <code>&amp;</code> 打印出来的地址绝对不是物理意义（或者叫”实际意义“）上的内存地址，因为如果是真实的地址，是不可能同时存储两个值的。</p><p>实际在 <code>C</code> 语言出来的地址是虚拟地址（在 <code>Linux</code> 里也叫”线性地址“）。每个进程都认为自己用的地址是真实地址（认为自己独享整个内存空间，拥有一个进程地址空间），实际上它被操作系统”欺骗“了，它使用的是虚拟地址，这些虚拟地址整体构成虚拟空间/进程地址空间。</p><blockquote><p>补充 <code>1</code>：实际上几乎所有带有”地址“概念的语言使用的地址都是虚拟地址。</p><p>补充 <code>2</code>：不止是 <code>CPU</code> 有寄存器，其他外设或者显卡也有寄存器，这些地址也应该被利用，所以我们给计算机一个页表，使得虚拟地址可以通过页表来一一映射到内存地址、显卡寄存器地址等等真实地址，而我们的程序在调用的时候也会误认为自己用的是内存地址，从而达到统一对待真实地址的目的。</p></blockquote><h3 id="_8-2-映射地址" tabindex="-1"><a class="header-anchor" href="#_8-2-映射地址"><span>8.2.映射地址</span></a></h3><p>在很久以前，多个进程的确是直接写入物理内存，也就是直接使用物理地址的。但是，一旦在运行某个进程的过程有可能出现一些危险的情况：</p><ol><li><p>野指针问题：对野指针的访问有可能出现篡改其他进程数据的情况，这是极其危险的。而且对于黑客来说，如果某个进程是需要密钥等方式才可以进入，那么就会出现某些黑客软件在运行过程中通过野指针窃取该进程数据的可能，导致数据不安全。</p></li><li><p>内存碎片问题：如果直接加载进内物理存，就极有可能出现内存碎片问题，导致内存空间分配不合理，空间效率底下。</p></li></ol><p>因此直接写进物理空间的方式极其不安全、不合理。于是就出现了虚拟地址空间，每个进程通过虚拟地址空间，都认为自己占用了整个进程地址空间，实际上这是操作系统的一种“骗术”，操作系统在管理每一个进程的虚拟地址空间，再一一映射到物理内存，这样子就可以解决上面的两个问题。</p>`,208)),h(a,{id:"mermaid-995",code:"eJxLL0osyFDwCeJyjFZ6Nrn3yd45zzfvfr57vsbTJS3PJ7S9mDnrWff8p3M2PJ3boKkUy+UUrfRi/+znK7oNlWIVdHXtFJwMYSIQRc9X7no5fYuhBkQjlAfUCVZco/Ry4dYXC1cY2iCbq/O8cyXQKgjHTqlGwZHLGWaoEVSnM1ZrjFCsMUK3xoiQNS4wQ42hOl2wWmOMYo0xujXGhKxxhRlqAtXpitUaExRrTNCtMSFkjRvM0DyoTjes1uShWJOHbk0eIWu4HIHKa5SezVjwdEMLUMQ9GqqmrfXp2hmxXACikD0a"}),s[1]||(s[1]=i(`<p>在 <code>task_struct</code> 结构体中，有一个成员 <code>mm_struct* mm</code>，指向该一个进程所拥有的虚拟地址空间（也就是之前讲到的类似 <code>struct mm_struct{/*...*/};</code> 的东西），而操作系统通过某种映射关系（或者叫“页表”）来把虚拟地址映射到物理内存中。地址空间对象和页表（用户级）是每一个进程都私有一份的。</p><p>只要保证每一个进程的页表映射的是不同区域，就能做到进程之间相互独立、安全。</p><blockquote><p>补充 <code>1</code>：有了操作系统映射，我们不仅仅可以将虚拟地址映射到内存，甚至可以映射到其他硬件内部的类似寄存器的存储物件，让数据直接写入到硬件里。</p><p>补充 <code>2</code>：<code>32</code> 位操作系统的内存寻址能力就是 <code>4G</code>，即使安装了 <code>16G</code> 内存条，也只能识别和使用其中的 <code>4G</code>。这是由于 <code>32</code> 位系统的地址空间最大只有 <code>4G</code>。然而，实际上，<code>32</code> 位系统一般只能识别到 <code>3.25G</code> 的内存。因此，如果您的电脑安装了 <code>32</code> 位操作系统，且拥有超过 <code>4G</code> 的内存，会有至少 <code>12G</code> 的内存是永远用不到的，这无疑是一种浪费。</p><p>对于拥有 <code>4G</code> 或 <code>4G</code> 以上内存的设备，推荐使用 <code>64</code> 位操作系统。<code>64</code> 位系统目前最高可以识别 <code>192G</code> 左右的内存。此外，<code>PAE</code>（物理地址扩展）允许 <code>32</code> 位操作系统在特定情况下使用大于 <code>4G</code> 的物理内存。<code>Linux</code> 在开启 <code>PAE</code> 的模式下能支持在 <code>32</code> 位系统中使用超过 <code>4G</code> 的内存。<code>Windows XP</code> 系列虽然支持 <code>PAE</code>，但实际在使用中最大内存限制在了 <code>4G</code>。</p><p>补充 <code>3</code>：<code>CPU</code> 在执行进程代码时，进程将虚拟地址给 <code>CPU</code>，而 <code>CPU</code> 内部的 <code>CR3</code> 寄存器存储当前进程页表的地址（页表对象也是数据，肯定在物理地址上存储，这里不能存放页表的虚拟地址，会出现因果困境问题），辅助 <code>CPU</code> 通过”进程传递过来的虚拟地址“和”<code>CR3</code> 指向的页表“进行访址的操作，而切换进程的时候就会更换该寄存器的内容。</p><p>补充 <code>4</code>：有关于“页表”，实际上不仅仅会存储虚拟地址和物理地址，还会存储一个权限字段，代表指向的物理地址可读还是可写，可以对访存进行安全检查。</p><p>补充 <code>5</code>：页表内还有一个标志字段，用来表明虚拟地址对应的物理地址是否分配了以及是否有内容，这样就可以让一些进程在阻塞的时候，判断是单纯的阻塞（阻塞就设置没有分配，但是有内容）还是阻塞挂起（阻塞挂起就设置分配没有了，内容也没有了）。而进程如果被挂起，该进程的虚拟地址对应的物理地址就可以让给别的进程使用，达到效率优化，避免过大的内存被一个进程全部占用。</p><p>而如果进程在使用虚拟内存访问物理内存的时候，标志字段还没有设置好（没有分配，并且也没有内容），这个时候操作系统就会暂时停止进程的访址需求，去给进程在物理内存申请物理地址，填充好对应的内容，并且给给进程的页表建立虚拟地址和物理地址的联系，再让进程继续访址。而这个过程，就叫”缺页中断“（并且对于进程来说这一切是看不见的）。</p><p>补充 <code>6</code>：“进程地址空间”、“线性地址空间”、“虚拟地址空间”是同一个概念。</p></blockquote><h3 id="_8-3-地址现象" tabindex="-1"><a class="header-anchor" href="#_8-3-地址现象"><span>8.3.地址现象</span></a></h3><p>经过前面的铺垫，我们现在终于可以解释前面父子进程代码的问题所在了。父子进程使用的同名的全局变量，在写入时发生了临时拷贝，虚拟地址一样，但是从物理地址上看根本就是两个变量！</p><p>子进程会继承很多父进程的数据，但是也不是全部照搬复制，也是有所修改的，其中就包括地址空间。可以看到虚拟内存都是一样的，一开始还没有修改的时候，由于分页一样，所以物理内存是一样的。</p><p>但是如果子进程修改了 <code>g_val</code>，操作系统会重新开辟一块物理内存，并且修改分页映射中的物理地址，但是虚拟地址没有被改变，因此此时父子进程能在同一个虚拟地址访问不同的两个物理内存的数据（这种策略也叫“写时拷贝”，后面还会继续详谈）。</p><blockquote><p>补充：此时我们还可以开始回答之前遗留的问题。</p><p><code>fork()</code> 为什么会有两个返回值？这是因为在代码 <code>pid_t id = fork();</code> 中，<code>fork()</code> 返回的值实际上是给 <code>id</code> 变量做一种写入，就会发生写时拷贝，导致 <code>id</code> 有在两个物理内存中存储，但是在父子进程各自页表中的虚拟地址是一样的。</p><p>而由于父子进程的代码时一样的，都会执行 <code>if-else</code> 的判断。</p><p>父子进程通过各自的页表从内存中获取 <code>id</code>，而父子进程在物理内存中 <code>id</code> 的地址是不同的，因此会有两个返回值。而在父子进程各自的虚拟空间中，<code>id</code> 都是一样的地址值。</p><p>这样，从代码表面上来看，<code>if-else</code> 的两个部分都会被执行。</p></blockquote><h3 id="_8-4-地址生成" tabindex="-1"><a class="header-anchor" href="#_8-4-地址生成"><span>8.4.地址生成</span></a></h3><p>当我们的程序在编译的时候，在生成可执行程序且还没有加载到内存中的时候存在地址么？答案是：可执行程序在编译的时候，内部实际上早就有地址了！</p><blockquote><p>补充：因此，我们之前讲过 <code>mm_struct{/*...*/};</code> 对虚拟地址做了划分，但是实际的每一个虚拟地址从哪里来呢？答案是在可执行程序里本身就具有虚拟地址，需要交给操作系统自己去读取。</p></blockquote><p>地址空间不要仅仅是 <code>0S</code> 内部要遵守的，其实编译器也要遵守，即：编详器编译代码的时候，就已经给我们形成了“各个区域”。并且采用和 <code>Linux</code> 内核中一样的编址方式，给每一个变量，每一行代码都进行了虚拟编址（对于磁盘中的可执行程序，除了存储代码本身，还存储了每一句和变量对应的地址。这些地址是虚拟地址，由编译器编址，方便编译做跳转）。</p><p>故程序在编译的时候，每一个字段早已经具有了一个虚拟地址。</p><p>而虚拟地址也是数据，因此代码被加载到内存中的时候，不仅仅是加载了代码，实际上虚拟地址也被加载进去了。</p><p>程序内部地址使用的是地址，依旧是编译器编好的地址，当程序加载到内存，每行代码、每个变量就被操作系统安排了对应的物理地址，并且制作了进程自己的映射页表。</p><p>并且 <code>CPU</code> 读取的是虚拟地址。根据程序的第一个虚拟地址，通过进程结构内的进程地址空间范围，再根据页表的映射关系，查找到物理内存内的代码和虚拟空间，又拿取到虚拟地址再循环上面的步骤进行处理。</p><h3 id="_8-5-细致划分" tabindex="-1"><a class="header-anchor" href="#_8-5-细致划分"><span>8.5.细致划分</span></a></h3><p>实际上，地址进程空间要比我们想象的还要复杂，不仅仅只是分为几个区域，还能再被划分。</p><p>而这个划分的依据就是 <code>vm_area_struct{/*...*/};</code>，在内核中的具体实现如下：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">struct</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> vm_area_struct</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">	/* The first cache line has the info for VMA tree walking. */</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">	union</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">		struct</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">			/* VMA covers [vm_start; vm_end) addresses within mm */</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">			unsigned</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> long</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> vm_start</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//开始</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">			unsigned</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> long</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> vm_end</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//结束</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">		};</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">ifdef</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> CONFIG_PER_VMA_LOCK</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">		struct</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> rcu_head</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> vm_rcu</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">	/* Used for deferred freeing. */</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">endif</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">	};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">	struct</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> mm_struct</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">vm_mm</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">	/* The address space we belong to. */</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">	pgprot_t</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> vm_page_prot</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">   </span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">	/*...*/</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+T+`" alt="image-20231026141329546" tabindex="0" loading="lazy"><figcaption>image-20231026141329546</figcaption></figure><p>实际上，在 <code>Linux</code> 中，<code>mm_struct</code> 被称为“内存描述符”，<code>vm_area_struct</code> 被称为“线性空间”，合起来才是地址空间，这里只是简单一提。</p><blockquote><blockquote><p>补充 <code>1</code>：段表（<code>Segment Table</code>）和页表（<code>Page Table</code>）是操作系统中用于内存管理的两种数据结构，它们都用于支持虚拟内存的概念，但实现方式和目的略有不同。</p><p><strong>段表（<code>Segment Table</code>）：</strong></p><ul><li>段式管理是基于用户视角的内存管理。它将程序的地址空间分为逻辑上的段，如代码段、数据段、堆栈段等。</li><li>每个段都是连续的地址空间，但各个段之间可以是非连续的。</li><li>段表用于存储每个段的基地址和长度，以及其他控制信息。</li><li>地址转换时，虚拟地址由段号和段内偏移组成。段号用来索引段表，找到段的基地址，然后与段内偏移相加得到物理地址。</li></ul><p><strong>页表（<code>Page Table</code>）：</strong></p><ul><li>页式管理是基于系统视角的内存管理。程序的地址空间被划分为大小固定的页，而物理内存被划分为同样大小的帧。</li><li>页表用于存储每个页与帧之间的映射关系。</li><li>地址转换时，虚拟地址由页号和页内偏移组成。页号用来索引页表，找到对应的帧号，然后与页内偏移相加得到物理地址。</li></ul><p><strong>区别：</strong></p><ul><li><strong>逻辑分割 vs 物理分割</strong>：段表基于逻辑上的程序结构进行分割，反映了程序的逻辑结构；而页表基于物理内存的等分，与程序逻辑结构无关。</li><li><strong>大小不等 vs 大小固定</strong>：在段式管理中，每个段的大小可以不同；在页式管理中，所有页的大小是固定的。</li><li><strong>段表大小</strong>：通常每个程序只有一个段表，并且段表的大小依赖于程序的结构；页表的大小则取决于虚拟地址空间的大小，每个页对应一个页表项。</li><li><strong>内部碎片</strong>：段式管理可能产生外部碎片，但不会有内部碎片；页式管理没有外部碎片，但可能有内部碎片。</li></ul><p>在现代操作系统中，往往将段式和页式管理结合起来使用，即先将虚拟地址空间划分为段，然后再将每个段细分为页，这种方式被称为段页式内存管理，兼具两者的优点。</p></blockquote><blockquote><p>补充 <code>2</code>：在内存管理中，碎片指的是无法被有效利用的内存空间。根据碎片的产生位置和性质，通常分为外部碎片和内部碎片。</p><p><strong>外部碎片（<code>External Fragmentation</code>）：</strong></p><ul><li>当内存分配是基于变长分区（如段式管理）时，内存中的空闲区域可能会分散成许多小片碎片。</li><li>这些碎片本身可能是相对较小的，它们之间被已分配的区域隔开，无法连续。</li><li>即使这些碎片的总和可能足够满足某个内存请求，但因为它们不连续，不能被用来分配一个需要连续内存的大的内存块。</li><li>外部碎片的问题可以通过压缩（移动已分配区域以聚集所有空闲区域）或者使用更好的分配算法（如最佳拟合、最坏拟合等）来缓解。</li></ul><p><strong>内部碎片（<code>Internal Fragmentation</code>）：</strong></p><ul><li>当内存分配是基于固定大小的分区（如页式管理）时，分配给程序的内存块可能会稍大于实际所需。</li><li>这意味着在每个已分配的内存块内部，都可能存在一小块未被利用的空间。</li><li>比如，如果所有内存块都是 4KB 大小，但程序只需要 3.5KB，那么剩下的 0.5KB 在这个内存块内部是无法被其他程序利用的，造成了内部碎片。</li><li>内部碎片无法通过压缩来解决，因为它是由于分区大小固定而造成的。</li></ul><p>内部碎片和外部碎片都会导致内存的浪费，但它们的处理方式不同。通常，内存管理算法会尝试平衡这两种类型的碎片，以最大化内存的利用率。</p></blockquote></blockquote><h2 id="_9-进程操作-二" tabindex="-1"><a class="header-anchor" href="#_9-进程操作-二"><span>9.进程操作（二）</span></a></h2><p>这里的进程操作相比 [进程操作（一）](# 3.进程操作（一）) 要更加详细，偏重原理和底层，并且有一些补充。</p><h3 id="_9-1-进程创建" tabindex="-1"><a class="header-anchor" href="#_9-1-进程创建"><span>9.1.进程创建</span></a></h3><p>前面讲得 <code>fork()</code> 已经足够多了，但是这里再复习和补充以下。</p><h4 id="_9-1-1-进程创建原理" tabindex="-1"><a class="header-anchor" href="#_9-1-1-进程创建原理"><span>9.1.1.进程创建原理</span></a></h4><p>在 <code>Linux</code> 中，<code>fork()</code> 可以从已经存在的进程中创建一个新进程，新进程为子进程，原进程为父进程。</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">unistd.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//需要包含的头文件</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">sys/types.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">pid_t</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> fork</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">void</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//返回值：</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//1.子进程中返回 0</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//2.父进程返回子进程 id，出错返回-1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>具体的使用如下：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">stdio.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">unistd.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">我是父进程</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    pid_t</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> id </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> fork</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">id </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">创建子进程失败 n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        return</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    else</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">id </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">==</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        // 子进程</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        while</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">            printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">我是子进程: pid: </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%d</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">，ppid: </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%d\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> getpid</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(),</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> getppid</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">());</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">            sleep</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    else</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        //父进程</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        while</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">            printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">我是父进程: pid: </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%d</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">，ppid: </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%d\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> getpid</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(),</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> getppid</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">());</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">            sleep</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>fork()</code> 使得系统多了一个进程，父进程在调用 <code>fork()</code> 时，内核做了以下事情：</p><ol><li><p>分配新的内存块和创建新的内核数据结构 <code>task_struct</code> 对象</p></li><li><p>以父进程为模板，将父进程大部分数据内容深拷贝到子进程的 <code>task_struct</code> 对象中（不能是浅拷贝，有的数据是每个进程独有的，比如：进程 <code>PID</code> 就会不一样）</p></li><li><p>添加子进程到进程列表中</p></li><li><p><code>fork()</code> 返回，系统开始使用调度器调度</p></li></ol><p>由于子进程没有自己的代码和数据，所以子进程只能共享/使用父进程的代码和数据。</p><figure><img src="`+S+`" alt="image-20231026151750005" tabindex="0" loading="lazy"><figcaption>image-20231026151750005</figcaption></figure><ol><li><p>而对于代码：都是不可写的，只可读，所以父子共享（共享所有的代码）没有问题（后面会有一种操作导致代码数据也会被写时拷贝）。</p></li><li><p>而对于数据：不能直接共享，有可能需要隔离开，避免互相影响（隔离是通过页表来实现的）。</p><p>对“不会访问”或者“只做读取”的数据不需要拷贝多一份副本出来。</p><p>对于有可能会做修改的数据，操作系统虽然需要拷贝出一份副本给子进程使用，但是操作系统没有立刻进行拷贝（因为有可能就算给了子进程副本，子进程也暂时用不到），而是使用了“写时拷贝”技术实现父子间数据分离。</p><p>也就是说：只有写入修改的时候才进行拷贝副本，这样做可以提高效率。</p></li></ol><blockquote><p>补充 <code>1</code>：写时拷贝不仅仅发生在子进程修改父进程数据的的情况，还发生在父进程和子进程共享父进程数据的时候，父进程自己也修改了自己数据的情况中！</p><p>补充 <code>2</code>：写时拷贝的发生时机就是“缺页中断”的时候。</p><p>在使用 <code>fork()</code> 其中，会设置父子进程内部对应的物理地址都是只读的（就是设置页表内的权限字段，这是 <code>fork()</code> 的工作之一），只有当子进程需要对地址指向的内容进行修改时，会向操作系统发出类似“错误”的报告，操作系统检查后，认为这种“错误”不是真的错误，而是子进程需要新的空间进行写入。</p><p>此时操作系统就会通过这种“触发策略”来向内存申请空间，把父进程的内容拷贝到新空间内，再重新映射子进程的页表，指向这块新开辟的空间，并且将页表内的字段改为“可读写”。</p><p>但是为什么一定要拷贝父进程的东西呢？反正都要写入不是么？原因很简单，覆盖（全部修改）和修改（部分修改）是不一样的。有可能会再父进程原有数据的基础上做部分修改而已，比如：<code>++i</code>，就需要根据原有的 <code>i</code> 值来递增并作修改。</p></blockquote><p>另外，虽然子进程可以看到 <code>fork()</code> 之前的代码（也必须看得到，否者类似定义和声明语句就会失效造成代码出现问题），但是依旧只会执行 <code>fork()</code> 后面的代码，这是为什么呢？这是为了避免出现父进程创建子进程，子进程创建子子进程...这种死循环情况。</p><p>那为什么操作系统怎么知道从哪里开始执行呢？我们之前在 [2.进程描述](# 2.进程描述) 里有提到过程序计数器的概念，由于进程有可能会被中断（可能没有执行完），因此下次继续执行该进程的时候就需要知道从哪行代码继续开始，这个时候就需要 <code>PC</code>（<code>pointer code</code>）指针（也就是 <code>EIP</code> 寄存器）来记录当前进程的执行位置，在进程退出 <code>CPU</code> 后就将这歌寄存器内的数据还给进程，等待下次进程被 <code>CPU</code> 计算时重新又进程交给 <code>PC</code> 寄存器。</p><p>而子进程也会从父进程中继承该寄存器存储的数据，可以根据这个数据直接找到子进程后续要执行的代码，因此子进程中不会重复调用 <code>fork()</code> 造成循环调用。</p><p>而 <code>fork()</code> 系统调用之所以有两个返回值，是因为父进程代码会被子进程共享，就会有两次调用，导致有两个返回值。</p><p>而为什么同一个地址的变量可以存储两个返回值呢？这是因为：父子进程都会通过 <code>return</code> 对 <code>id</code> 这个变量进行写入，所以就会发生写时拷贝，使得父子各有一个 <code>id</code> 变量，可以存储不同的值。因此这两个返回值一定是存储在不同地方的，但是为什么父子打印出来的地址是一样的呢？这就需要利用之前的 [进程空间](# 8.进程空间) 知识，这里打印的地址不是物理地址，而是编译器分配的虚拟地址。</p><h4 id="_9-1-2-创建多个子进程" tabindex="-1"><a class="header-anchor" href="#_9-1-2-创建多个子进程"><span>9.1.2.创建多个子进程</span></a></h4><p>先创建多个子进程：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">unistd.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">stdio.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">stdlib.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">define</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> N</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 10</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Worker</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> cnt </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 10</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    while</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">cnt</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">--</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">I am child process, [pid:</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%d</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">], [ppid:</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%d</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">], [cnt:</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%d</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">]</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> getpid</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(),</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> getppid</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(),</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> cnt</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        sleep</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    for</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">i </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> N</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">++</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        sleep</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">        pid_t</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> id </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> fork</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">id </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">==</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">            //child 进程只会执行一次循环</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">            printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">[creat child </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%d</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">]</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">            Worker</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">            exit</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//子进程退出，暂时变成僵尸状态</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        }</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        //father 进程执行循环，但是不会进入 if 语句</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    //这里只有父进程走到这里</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    sleep</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">100</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//由于我们还没有讲解僵尸进程的解决方法，因此这里就让父进程多等一会，直到全部子进程结束再来回收</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行上述代码之前，先写一个 <code>test.sh</code> 脚本，然后先使用 <code>bash test.sh</code> 运行 <code>shell</code> 脚本再运行 <code>a.out</code>，来观察进程直接发生的变化（不过打印输出的先后顺序取决于调度器）。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">while</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> :</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    do</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> ps</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ajx</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> |</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> head</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &amp;&amp;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> ps</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ajx</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> |</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> grep</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> a.out</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> |</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">grep</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -v</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> grep</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    echo</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">------------</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    sleep</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">done</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>补充：还有一个接口 <code>clone()</code> 也可以创建子进程，但是更加复杂，有机会再补充...</p></blockquote><h3 id="_9-2-进程终止" tabindex="-1"><a class="header-anchor" href="#_9-2-进程终止"><span>9.2.进程终止</span></a></h3><p>进程终止原理上就是创建进程反动作：销毁 <code>pcb</code> 结构体、销毁地址空间、页表等等资源销毁。</p><h4 id="_9-2-1-进程终止的情况" tabindex="-1"><a class="header-anchor" href="#_9-2-1-进程终止的情况"><span>9.2.1.进程终止的情况</span></a></h4><p>进程终止存在以下情况：</p><ol><li><p>代码运行完毕，结果正确</p></li><li><p>代码运行完毕，结果错误</p></li><li><p>代码异常终止，程序崩溃</p></li></ol><h4 id="_9-2-2-进程终止的信息" tabindex="-1"><a class="header-anchor" href="#_9-2-2-进程终止的信息"><span>9.2.2.进程终止的信息</span></a></h4><p>以前我们在写 <code>main()</code> 的时候，结尾总是会写 <code>return 0;</code> 但是这个语句到底是什么呢？实际上 <code>main()</code> 会被其他函数调用，因此这个返回值就会交给这个函数，但是这个函数又需要交付返回值给谁呢？实际上是作为进程退出码交付给了父进程 <code>bash</code>，可以在运行一个 <code>C</code> 代码后使用 <code>echo $?</code> 来查看最近一次父进程 <code>bash</code> 得到的进程退出码。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> cat</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> test.c</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">int</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 123</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> gcc</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> test.c</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ./a.out</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> echo</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> $?</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">123</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而 <code>main()</code> 返回 <code>0</code> 代表第一种情况（代码运行完毕，结果正确），非 <code>0</code> 代表第二种情况（代码运行完毕，结果错误）。而成功我们就无需关心了，错误就会返回多种非零进程退出码。</p><p>进程退出码（也就是 <code>main()</code> 的返回值）我们是有了，但是只有一串数字，这是无法直接进行错误探究的，所以我们需要将进程退出码人为映射转化为包含错误信息字符串的方案（使用 <code>strerror(&lt;退出码&gt;)</code> 即可将退出码转化为 <code>Linux</code> 下的错误信息字符串）。</p><ol><li><p>自己设计一套退出方案</p></li><li><p>使用系统/语言规定的退出码方案</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> cat</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> test.c</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#include &lt;stdio.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#include &lt;string.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">int</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    int</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    for(i</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> i</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 200</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> i++</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">        printf</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">&quot;%s\\n&quot;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> strerror</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> gcc</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> test.c</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ./a.out</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Success</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Operation</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> not</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> permitted</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">No</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> such</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> file</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> or</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> directory</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">No</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> such</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> process</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Interrupted</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> system</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> call</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Input/output</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> error</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">No</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> such</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> device</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> or</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> address</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Argument</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> list</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> too</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> long</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Exec</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> format</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> error</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Bad</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> file</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> descriptor</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">No</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> child</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> processes</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Resource</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> temporarily</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> unavailable</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Cannot</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> allocate</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> memory</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Permission</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> denied</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Bad</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> address</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Block</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> device</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> required</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Device</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> or</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> resource</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> busy</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">File</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> exists</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Invalid</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> cross-device</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> link</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">No</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> such</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> device</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Not</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> a</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> directory</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Is</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> a</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> directory</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Invalid</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> argument</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Too</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> many</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> open</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> files</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> in</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> system</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Too</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> many</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> open</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> files</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Inappropriate</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ioctl</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> for</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> device</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Text</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> file</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> busy</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">File</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> too</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> large</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">No</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> space</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> left</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> on</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> device</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Illegal</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> seek</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Read-only</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> file</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> system</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Too</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> many</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> links</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Broken</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> pipe</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Numerical</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> argument</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> out</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> of</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> domain</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Numerical</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> result</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> out</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> of</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> range</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Resource</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> deadlock</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> avoided</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">File</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> name</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> too</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> long</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">No</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> locks</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> available</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Function</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> not</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> implemented</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Directory</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> not</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> empty</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Too</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> many</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> levels</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> of</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> symbolic</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> links</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Unknown</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> error</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 41</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">No</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> message</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> of</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> desired</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> type</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Identifier</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> removed</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Channel</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> number</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> out</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> of</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> range</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Level</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> not</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> synchronized</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Level</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 3</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> halted</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Level</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 3</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> reset</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Link</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> number</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> out</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> of</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> range</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Protocol</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> driver</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> not</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> attached</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">No</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> CSI</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> structure</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> available</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Level</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> halted</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Invalid</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> exchange</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Invalid</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> request</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> descriptor</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Exchange</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> full</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">No</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> anode</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Invalid</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> request</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> code</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Invalid</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> slot</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Unknown</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> error</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 58</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Bad</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> font</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> file</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> format</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Device</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> not</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> a</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> stream</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">No</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> data</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> available</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Timer</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> expired</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Out</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> of</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> streams</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> resources</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Machine</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> is</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> not</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> on</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> the</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> network</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Package</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> not</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> installed</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Object</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> is</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> remote</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Link</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> has</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> been</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> severed</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Advertise</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> error</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Srmount</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> error</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Communication</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> error</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> on</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> send</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Protocol</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> error</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Multihop</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> attempted</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">RFS</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> specific</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> error</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Bad</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> message</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Value</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> too</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> large</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> for</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> defined</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> data</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> type</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Name</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> not</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> unique</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> on</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> network</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">File</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> descriptor</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> in</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> bad</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> state</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Remote</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> address</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> changed</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Can</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> not</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> access</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> a</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> needed</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> shared</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> library</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Accessing</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> a</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> corrupted</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> shared</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> library</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">.lib</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> section</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> in</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> a.out</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> corrupted</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Attempting</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> to</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> link</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> in</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> too</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> many</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> shared</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> libraries</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Cannot</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> exec</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> a</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> shared</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> library</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> directly</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Invalid</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> or</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> incomplete</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> multibyte</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> or</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> wide</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> character</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Interrupted</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> system</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> call</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> should</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> be</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> restarted</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Streams</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> pipe</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> error</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Too</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> many</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> users</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Socket</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> operation</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> on</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> non-socket</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Destination</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> address</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> required</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Message</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> too</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> long</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Protocol</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> wrong</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> type</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> for</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> socket</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Protocol</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> not</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> available</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Protocol</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> not</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> supported</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Socket</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> type</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> not</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> supported</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Operation</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> not</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> supported</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Protocol</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> family</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> not</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> supported</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Address</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> family</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> not</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> supported</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> by</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> protocol</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Address</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> already</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> in</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> use</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Cannot</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> assign</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> requested</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> address</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Network</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> is</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> down</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Network</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> is</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> unreachable</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Network</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> dropped</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> connection</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> on</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> reset</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Software</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> caused</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> connection</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> abort</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Connection</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> reset</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> by</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> peer</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">No</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> buffer</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> space</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> available</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Transport</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> endpoint</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> is</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> already</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> connected</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Transport</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> endpoint</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> is</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> not</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> connected</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Cannot</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> send</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> after</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> transport</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> endpoint</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> shutdown</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Too</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> many</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> references:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> cannot</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> splice</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Connection</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> timed</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> out</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Connection</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> refused</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Host</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> is</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> down</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">No</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> route</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> to</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> host</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Operation</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> already</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> in</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> progress</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Operation</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> now</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> in</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> progress</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Stale</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> file</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> handle</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Structure</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> needs</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> cleaning</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Not</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> a</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> XENIX</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> named</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> type</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> file</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">No</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> XENIX</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> semaphores</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> available</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Is</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> a</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> named</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> type</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> file</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Remote</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> I/O</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> error</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Disk</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> quota</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> exceeded</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">No</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> medium</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> found</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Wrong</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> medium</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> type</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Operation</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> canceled</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Required</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> key</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> not</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> available</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Key</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> has</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> expired</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Key</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> has</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> been</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> revoked</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Key</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> was</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> rejected</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> by</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> service</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Owner</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> died</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">State</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> not</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> recoverable</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Operation</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> not</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> possible</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> due</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> to</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> RF-kill</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Memory</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> page</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> has</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> hardware</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> error</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Unknown</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> error</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 134</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Unknown</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> error</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 135</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Unknown</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> error</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 136</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Unknown</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> error</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 137</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Unknown</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> error</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 138</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Unknown</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> error</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 139</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Unknown</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> error</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 140</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Unknown</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> error</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 141</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Unknown</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> error</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 142</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Unknown</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> error</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 143</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Unknown</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> error</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 144</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Unknown</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> error</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 145</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Unknown</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> error</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 146</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Unknown</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> error</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 147</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Unknown</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> error</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 148</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Unknown</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> error</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 149</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Unknown</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> error</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 150</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Unknown</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> error</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 151</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Unknown</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> error</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 152</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Unknown</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> error</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 153</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Unknown</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> error</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 154</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Unknown</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> error</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 155</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Unknown</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> error</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 156</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Unknown</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> error</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 157</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Unknown</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> error</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 158</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Unknown</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> error</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 159</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Unknown</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> error</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 160</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Unknown</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> error</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 161</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Unknown</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> error</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 162</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Unknown</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> error</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 163</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Unknown</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> error</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 164</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Unknown</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> error</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 165</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Unknown</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> error</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 166</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Unknown</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> error</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 167</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Unknown</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> error</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 168</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Unknown</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> error</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 169</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Unknown</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> error</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 170</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Unknown</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> error</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 171</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Unknown</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> error</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 172</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Unknown</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> error</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 173</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Unknown</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> error</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 174</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Unknown</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> error</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 175</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Unknown</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> error</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 176</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Unknown</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> error</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 177</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Unknown</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> error</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 178</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Unknown</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> error</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 179</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Unknown</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> error</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 180</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Unknown</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> error</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 181</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Unknown</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> error</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 182</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Unknown</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> error</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 183</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Unknown</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> error</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 184</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Unknown</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> error</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 185</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Unknown</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> error</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 186</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Unknown</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> error</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 187</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Unknown</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> error</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 188</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Unknown</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> error</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 189</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Unknown</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> error</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 190</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Unknown</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> error</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 191</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Unknown</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> error</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 192</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Unknown</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> error</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 193</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Unknown</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> error</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 194</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Unknown</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> error</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 195</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Unknown</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> error</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 196</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Unknown</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> error</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 197</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Unknown</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> error</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 198</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Unknown</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> error</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 199</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到只提供了 <code>[0,133]</code> 范围的错误码对应字符。</p></li></ol><p>而 <code>C</code> 语言提供了一个全局变量 <code>errno</code>，如果在调用 <code>C</code> 接口的时候发生错误，那么就会设置该变量为对应的错误码，可以使用 <code>strerror(errno)</code> 输出原因。</p><p>因此退出码和错误码是有区别的，一个描述进程，一个描述函数调用，这两种码可以一起结合使用，也可以自定义。</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">stdio.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">string.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">errno.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ret </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    </span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">before: </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%d\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> errno</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    FILE</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> fp </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> fopen</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">./log.txt</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">r</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//注意这个文件是不存在的</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">fp </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">==</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> NULL</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    	printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">after: </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%d</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">, error string: </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%s\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> errno</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> strerror</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">errno</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">));</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        ret </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> errno</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    </span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ret</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//错误码和退出码达成一致</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>补充：有些时候我们会发现，<code>Linux</code> 内的有些系统调用，也会设置 <code>errno</code>，这是为什么呢？这不是 <code>C</code> 才有的全局变量么？怎么系统调用也可以设置？原因很简单，很多 <code>Linux</code> 下的系统调用实际上也是用 <code>C</code> 写的，自然可以设置这个语言级别的全局变量。</p></blockquote><p>如果一个代码形成的进程运行起来出现异常了，那么其退出码就没有意义了，因为这个进程是中间就因为异常（比如：空指针解引用写入（不允许用户写入到内核空间）、除 <code>0</code> 错误）崩溃了（崩溃是语言概念，更深一步就是操作系统将这个进程杀死了）。</p><p>而进程出现的异常信息，会被操作系统检测到，转化为对应的信号（可以用 <code>kill -l</code> 查看系统规定的信号），此时操作系统就会给进程发生对应的信号，最终杀掉进程（有关信号的原理我们以后再来深入）。</p><p>因此，我们可以做到让一个正常的代码收到操作系统信号而终止：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> cat</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> test.c</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#include &lt;stdio.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#include &lt;unistd.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">int</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    while(1</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">        printf</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">&quot;I am a code!%d\\n&quot;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> getpid</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        sleep(1</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">//错误码和退出码达成一致</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> gcc</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> test.c</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ./a.out</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">I</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> am</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> a</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> code!26422</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">I</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> am</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> a</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> code!26422</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">I</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> am</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> a</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> code!26422</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">I</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> am</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> a</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> code!26422</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">I</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> am</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> a</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> code!26422</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">I</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> am</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> a</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> code!26422</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">I</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> am</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> a</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> code!26422</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Floating</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> point</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> exception</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> kill</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -l</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> 1</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) SIGHUP       2) SIGINT       3) SIGQUIT      4) SIGILL       5) SIGTRAP</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> 6</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) SIGABRT      7) SIGBUS       8) SIGFPE       9) SIGKILL     10) SIGUSR1</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">11</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) SIGSEGV     12) SIGUSR2     13) SIGPIPE     14) SIGALRM     15) SIGTERM</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">16</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) SIGSTKFLT   17) SIGCHLD     18) SIGCONT     19) SIGSTOP     20) SIGTSTP</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">21</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) SIGTTIN     22) SIGTTOU     23) SIGURG      24) SIGXCPU     25) SIGXFSZ</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">26</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) SIGVTALRM   27) SIGPROF     28) SIGWINCH    29) SIGIO       30) SIGPWR</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">31</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) SIGSYS      34) SIGRTMIN    35) SIGRTMIN+1  36) SIGRTMIN+2  37) SIGRTMIN+3</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">38</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) SIGRTMIN+4  39) SIGRTMIN+5  40) SIGRTMIN+6  41) SIGRTMIN+7  42) SIGRTMIN+8</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">43</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) SIGRTMIN+9  44) SIGRTMIN+10 45) SIGRTMIN+11 46) SIGRTMIN+12 47) SIGRTMIN+13</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">48</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) SIGRTMIN+14 49) SIGRTMIN+15 50) SIGRTMAX-14 51) SIGRTMAX-13 52) SIGRTMAX-12</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">53</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) SIGRTMAX-11 54) SIGRTMAX-10 55) SIGRTMAX-9  56) SIGRTMAX-8  57) SIGRTMAX-7</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">58</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) SIGRTMAX-6  59) SIGRTMAX-5  60) SIGRTMAX-4  61) SIGRTMAX-3  62) SIGRTMAX-2</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">63</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) SIGRTMAX-1  64) SIGRTMAX</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> kill</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -8</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 26422</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到明明代码没有浮点错误（一般除以 <code>0</code> 就会出现这个错误），在接受到 <code>-8</code> 信号后进程依旧以该异常而终止了。因此判断一个进程是否出异常，只要看有没有收到信号即可。</p><blockquote><p>补充：其中需要注意，信号是从 <code>1</code> 开始的，因此 <code>0</code> 给进程就是表示没有收到信号，非 <code>0</code> 信号给进程就会造成进程因为异常而终止。</p></blockquote><p>总结：父进程只需要根据“退出码”和“信号”即可完整查看子进程的所有运行状况。</p><h4 id="_9-2-3-进程终止的方法" tabindex="-1"><a class="header-anchor" href="#_9-2-3-进程终止的方法"><span>9.2.3.进程终止的方法</span></a></h4><h5 id="_9-2-3-1-正常终止" tabindex="-1"><a class="header-anchor" href="#_9-2-3-1-正常终止"><span>9.2.3.1.正常终止</span></a></h5><h6 id="_9-2-3-1-1-return" tabindex="-1"><a class="header-anchor" href="#_9-2-3-1-1-return"><span>9.2.3.1.1.return</span></a></h6><p><code>main</code> 函数的返回值叫做进程退出码，除了 <code>0</code> 还可以是其他值。</p><p>可以使用其他值（例如：<code>return 10</code>）试试，然后通过 <code>echo $?</code> 可以查看最近一次进程返回的退出码。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ll</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">total</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> vim</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> test.c</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> cat</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> test.c</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#include &lt;stdio.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">int</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    const</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> char</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">*</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> s</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Hello, I am limou~\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    printf</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">&quot;%s&quot;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> s</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 10</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> gcc</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> test.c</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ./a.out</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Hello,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> I</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> am</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> limou~</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> echo</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> $?</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">10</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而 <code>return</code> 对于 <code>mian()</code> 是进程终止，但对于其他被 <code>main()</code> 调用的子函数来说只是函数的返回值。也就是说：<code>retrun</code> 会根据所处地不同，语义也不同。</p><h6 id="_9-2-3-1-2-exit" tabindex="-1"><a class="header-anchor" href="#_9-2-3-1-2-exit"><span>9.2.3.1.2.exit</span></a></h6><p>在代码中手动调用 <code>exit()</code>，将会引起正常运行的进程发生终止，该函数头文件是 <code>&lt;stdlib.h&gt;</code>。该函数在代码的任何地方语义都是一样的（都是终止进程，不同于 <code>return</code> 语句，因此一般推荐使用这个函数终止进程）</p><h6 id="_9-2-3-1-3-exit" tabindex="-1"><a class="header-anchor" href="#_9-2-3-1-3-exit"><span>9.2.3.1.3._exit()</span></a></h6><p>上面的 <code>exit()</code> 是 <code>C</code> 语言提供的，而实际上还有一个系统接口方案 <code>_exit()/_Exit()</code>，头文件为 <code>&lt;unistd.h&gt;</code>。虽然也是终止进程的，但是和 <code>exit()</code> 也还有一些差别。</p><blockquote><p>补充：<code>exit()</code> 和 <code>_exit()</code> 的区别</p><p><code>exit()</code> 的会刷新缓冲区数据，但是 <code>_exit()</code> 不会刷新。</p><p>也就是说 <code>C</code> 提供的 <code>exit()</code> 多了一些“动作”（执行用户的权力、冲刷缓冲、关闭流等等），然后才终止进程。而在实际开发上，我们更加推荐使用 <code>exit()</code>。</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">stdio.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">stdlib.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">unistd.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">You can see me!</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">sleep</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">exit</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">10</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//会刷新缓冲区</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">return</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">stdio.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">stdlib.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">unistd.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">You can see me!</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">sleep</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">_exit</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">10</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">return</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>前一份代码运行后会刷新出文本，后一段代码运行后则不会刷新出文本（被当作垃圾数据了）。</p><p>刷新只有几种情况，程序自己调用 <code>fflush()</code>、一些刷新条件（比如：<code>\\n</code>）、进程结束退出时系统强制要求刷新缓冲区。</p><p>另外，这个缓冲区在哪里呢？但是我们可以肯定：缓冲区一定不在操作系统内部。如果由操作系统内部维护的话，那么 <code>_exit()</code> 也可以刷新，这个缓冲区应该是 <code>C</code> 标准库维护的。这样子就可以封装 <code>_exit()</code> 和语言上的缓存区（以及一些其他动作）成库函数 <code>exit()</code>。</p></blockquote><h5 id="_9-2-3-2-异常退出" tabindex="-1"><a class="header-anchor" href="#_9-2-3-2-异常退出"><span>9.2.3.2.异常退出</span></a></h5><p>使用快捷键 <code>[ctrl+c]</code> 发生信号给进程，来终止进程（适用于前台运行进程）。</p><p>或者使用 <code>kill</code> 命令，也是发送信号终止进程（适用于后台运行进程）。</p><h3 id="_9-3-进程等待" tabindex="-1"><a class="header-anchor" href="#_9-3-进程等待"><span>9.3.进程等待</span></a></h3><h4 id="_9-3-1-进程等待的目的" tabindex="-1"><a class="header-anchor" href="#_9-3-1-进程等待的目的"><span>9.3.1.进程等待的目的</span></a></h4><p>如果子进程退出，父进程不再理会，就有可能造成僵尸进程，使用 <code>kill -9</code> 也无法去除（因为这个进程已经“死”了）。此时进程占用着资源，造成内存泄露。因此父进程给子进程派遣任务后，需要知道子进程的运行结果，是否正确、是否退出。这个时候父进程就通过进程等待的方式，回收子进程资源，获取子进程退出信息（获取与释放资源）。</p><p>当然，父进程不一定需要通过进程等待的方式获取两个数字（错误码和信号），但是系统调用必须要有能让父进程等待的接口设计。</p><blockquote><p>注意：本节我只是带您学习错误码，关于信号的知识后续会专门开设一个小节来深入探究，这里您只需要知道如何查看系统的信号列表，然后大致理解一下即可...</p></blockquote><h4 id="_9-3-2-进程等待的方法" tabindex="-1"><a class="header-anchor" href="#_9-3-2-进程等待的方法"><span>9.3.2.进程等待的方法</span></a></h4><h5 id="_9-3-2-1-wait" tabindex="-1"><a class="header-anchor" href="#_9-3-2-1-wait"><span>9.3.2.1.wait()</span></a></h5><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">sys/types.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">sys/wait.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">pid_t</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> wait</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int*</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> status</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//参数：是一个输出型参数，用于获取子进程退出状态，不关心则可以设置成为 NULL，这个参数后面讲解 waitpid() 时会详细解释（实际上就是退出结果，但是包含了退出码和异常状态）</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//返回值：返回被等待进程 pid，失败返回 -1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>父进程调用 <code>wait()</code> 后，处于阻塞状态，等待任意一个子进程变成“僵尸”状态，然后回收子进程的资源，并且返回该进程的 <code>pid</code>。下面用一个例子来演示该接口：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">stdio.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">stdlib.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">unistd.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">sys/types.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">sys/wait.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Worker</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> cnt </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 5</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    while</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">cnt</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">I am child process, pid: </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%d</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">, ppid: </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%d</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">, cnt: </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%d\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> getpid</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(),</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> getppid</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(),</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> cnt</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">--</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        sleep</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    pid_t</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> id </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> fork</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">id </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">==</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        //child</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        Worker</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        exit</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">10</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    else</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        //father</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        sleep</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">10</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//在后 10 秒子进程处于僵尸状态</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">        pid_t</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> rid </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> wait</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">NULL</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">rid </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">==</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> id</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">            printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">I am father process, wait success, pid: </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%d\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> getpid</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">());</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>若父进程没有 <code>sleep(10)</code>，子进程还处于没有返回的状态，那是否还会调用 <code>wait()</code> 呢？实际上是会的，此时父进程处于阻塞状态，会一直等待子进程结束返回。</p><blockquote><p>补充：虽然我们无法确认是哪一个进程先开始被 <code>CPU</code> 调度运行，但是通过 <code>wait()</code> 我们可以控制让父进程一定在最后退出。</p></blockquote><p>这种阻塞式的等待比较暴力，一旦阻塞，父进程就会一直等待，什么事情都没有办法做，因此我们通常使用 <code>waitpid()</code> 会多一些，该接口可以让父进程一边做自己的事情，一边等待回收子进程。</p><h5 id="_9-3-2-2-waitpid" tabindex="-1"><a class="header-anchor" href="#_9-3-2-2-waitpid"><span>9.3.2.2.waitpid()</span></a></h5><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">sys/types.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">sys/wait.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">pid_ t </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">waitpid</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">pid_t</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> pid</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> int*</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> status</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> options</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//参数：</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">	//1.pid（等谁）：</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">		//1.1.Pid == -1，表示等待任一个子进程，和与 wait() 的方式等效（有可能存在多个子进程的情况）</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">         //1.2.Pid &gt; 0，等待其进程 ID 与 pid 相等的子进程</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">         //1.3.pid == 0，表示 TODO，后面讲</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    //2.status（退出结果）:</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">		//该参数是一个输出型参数，可以使用一些宏或者函数提取出子进程的退出码和异常状态</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">         //2.1.WEXITSTATUS(status): 若 WIFEXITED 非零，则提取返回子进程退出码（查看进程的退出码）  </span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">         //2.2.WIFEXITED(status): 若正常终止子进程就返回真（查看进程是否是正常退出）</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    //3.options（怎么等）:</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">         //设置阻塞等待：父进程处于阻塞状态等待回收子进程则设置为 0，该参数默认为 0</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">         //设置非阻塞等待：使用 WNOHANG 时（Wait No Hang），若 pid 指定的子进程没有结束，则 waitpid() 函数返回 0，不予以等待，父进程继续执行自己的代码。若子进程结束，则返回该子进程的 ID</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//返回值：  </span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    //1.当正常返回的时候 waitpid() 返回收集到的子进程的进程 ID</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    //2.如果设置了选项 WNOHANG（非阻塞等待），而调用中 waitpid() 发现没有已退出的子进程可收集，则返回 0（也就是调用该函数成功，但是子进程并未全部退出，注意是“全部”）</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    //3.如果调用中出错，则返回 -1，这时 errno 会被设置成相应的值以指示错误所在（例如：指定的 pid 填错了）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意：<code>waitpid()</code> 可以通过参数设定转化为 <code>wait(NULL)</code> 的等价模式，<code>wait(NULL) &lt;=&gt; waitpid(-1, NULL, 0)</code>。</p></blockquote><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">stdio.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">stdlib.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">unistd.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">sys/types.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">sys/wait.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Worker</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> cnt </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 5</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    while</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">cnt</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">I am child process, pid: </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%d</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">, ppid: </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%d</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">, cnt: </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%d\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> getpid</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(),</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> getppid</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(),</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> cnt</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">--</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        sleep</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    pid_t</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> id </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> fork</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">id </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">==</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        //child</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        Worker</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        exit</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">10</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    else</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        //father</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">        int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> status </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">        pid_t</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> rid </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> waitpid</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">id</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &amp;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">status</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//和使用 wait() 是一样的</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">rid </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">==</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> id</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">            printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">I am father process, wait success, pid: </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%d\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> getpid</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">());</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们重点讲解一下 <code>status</code> 输出型参数，该参数可以查验进程的退出码和异常状态，两个信息结合为一个二进制序列，是按照 <code>32</code> 比特位的方式整体使用的，我们只了解低的 <code>16</code> 位就可以（实际上这个二进制序列还包含其他信息，不过这些我们暂时不用去了解）。其中：</p><ol><li>次低 <code>8</code> 位表示退出码，可以使用 <code>(status&gt;&gt;8) &amp; 0xFF</code> 位操作获取，通过返回码判断进程结果是否正确</li><li>低 <code>7</code> 位表示进程收到的信号（即异常状态），可以使用 <code>status &amp; 0x7F</code> 位操作获取（信号 <code>0</code> 表示程序正常运行，非 <code>0</code> 为奔溃），通过信号判断进程是否异常</li><li>还有 <code>1</code> 个比特位是 <code>core dump</code> 标志，这个我们之后讲信号再来谈及（是否具备 <code>core dump</code>）</li></ol><p>因此我们需要对输出做一定位操作，才能得到子进程使用 <code>exit()</code> 返回的退出码，以及进程的异常状态。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> cat</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> main.c</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#include &lt;stdio.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#include &lt;stdlib.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#include &lt;unistd.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#include &lt;sys/types.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#include &lt;sys/wait.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">void</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Worker</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    int</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> cnt</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 5</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    while(cnt</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">        printf</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">&quot;I am child process, pid: %d, ppid: %d, cnt: %d\\n&quot;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> getpid</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> getppid</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> cnt--</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        sleep(1</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">int</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    pid_t</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> id</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> fork</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    if(id</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ==</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        //child</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        Worker</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">        exit</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">10</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    }</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    else</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        //father</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        int</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> status</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        pid_t</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> rid</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> waitpid</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">id,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &amp;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">status,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">//和使用</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> wait</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 是一样的</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        if(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">rid</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ==</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> id</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        {</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">            printf</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">&quot;I am father process, wait success, pid: %d, rpid: %d, exit code: %d, exit sig: %d\\n&quot;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">            ,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> getpid</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> rid,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (status </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;&gt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 8</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&amp;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> 0xFF,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> status</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &amp;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> 0x7F</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> gcc</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> main.c</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ./a.out</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">I</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> am</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> child</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> process,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> pid:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 21558,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ppid:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 21557,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> cnt:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 5</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">I</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> am</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> child</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> process,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> pid:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 21558,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ppid:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 21557,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> cnt:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 4</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">I</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> am</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> child</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> process,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> pid:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 21558,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ppid:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 21557,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> cnt:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 3</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">I</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> am</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> child</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> process,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> pid:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 21558,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ppid:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 21557,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> cnt:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">I</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> am</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> child</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> process,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> pid:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 21558,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ppid:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 21557,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> cnt:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">I</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> am</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> father</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> process,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> wait</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> success,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> pid:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 21557,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> rpid:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 21558,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> exit</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> code:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 10,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> exit</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> sig:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实际上操作系统已经为我们提供了相关的位操作函数或宏：<code>WEXITSTATUS(status)</code> 和 <code>WIFEXITED(status)</code>。</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">stdio.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">stdlib.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">string.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">errno.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">unistd.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">sys/types.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">sys/wait.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Worker</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> cnt </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 5</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    while</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">cnt</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">I am child process, pid: </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%d</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">, ppid: </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%d</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">, cnt: </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%d\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> getpid</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(),</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> getppid</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(),</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> cnt</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">--</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        sleep</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    pid_t</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> id </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> fork</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">id </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">==</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        //child</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        Worker</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        //下面这两句可以测试进程因为异常退出的情况</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        //int a = 10;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        //a /= 0;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        exit</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">10</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    else</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        //father</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">        int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> status </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">        pid_t</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> rid </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> waitpid</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">id</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &amp;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">status</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//和使用 wait() 是一样的</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">rid </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">==</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> id</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">            if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">WIFEXITED</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">status</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">))</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//如果进程正常终止，返回真</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">            {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">                printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">child process normal quit, exit code: </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%d\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> WEXITSTATUS</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">status</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">));</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">            }</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">            else</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">            {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">                printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">child process quit except</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">            }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是让父进程一直处于阻塞状态时有些浪费资源，因此我们可以让 <code>waitpid()</code> 的第三个参数 <code>options = WNOHANG</code> 来使父进程和未结束的子进程一起运行，让父进程不发生阻塞，并且一边等待子进程结束返回（而这个接口就注定要被重复使用，即：非阻塞轮询），此时父进程就可以在较短时间内做一些自己想要做的事情。</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">stdio.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">stdlib.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">unistd.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">sys/types.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">sys/wait.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Worker</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> cnt</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">I am child, pid: </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%d</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">, ppid: </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%d</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">, cnt: </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%d\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> getpid</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(),</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> getppid</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(),</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> cnt</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    pid_t</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> id </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> fork</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">id </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">==</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        //child</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">        int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> cnt </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 10</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        while</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">cnt</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">            Worker</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">cnt</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">            cnt</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">--</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">            sleep</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        }</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        exit</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    //father</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    while</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">        int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> status </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">        pid_t</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> rid </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> waitpid</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">id</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &amp;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">status</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> WNOHANG</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">rid </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">            //等待成功，子进程当前是退出的</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">            printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">child quit sucess, exit code </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%d</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">, exit signal </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%d\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">status </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;&gt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 8</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &amp;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> 0x</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">FF</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> status </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> 0x</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">7F</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">            break</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        }</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        else</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">rid </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">==</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">            //调用成功，但是子进程还没有返回</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">            printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">father do other thing...</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">            //下面父进程开始做一些其他的事情</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">            //...</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        }</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        else</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">            //调用失败（大部分情况是不会失败的）</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">            printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">wait failed</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">            break</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        }</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        sleep</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>如果子进程发送了某些操作系统不允许的操作，就会导致操作系统向子进程发送信号，因此父进程回收子进程的时候，就会察觉出子进程发生异常</p></blockquote><h4 id="_9-3-3-进程等待的原理" tabindex="-1"><a class="header-anchor" href="#_9-3-3-进程等待的原理"><span>9.3.3.进程等待的原理</span></a></h4><p><code>wait()/waitpid()</code> 能够获取进程退出码和异常状态的本质是：读取了子进程的 <code>task_struct</code> 对象内部的进程退出结果和信号，这点可以从内核的源代码中查看到，在 <code>task_struct{/*...*/};</code> 中存在字段 <code>int exit_code, exit_signal</code>。</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">task_struct </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    /*...*/</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">endif</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">	struct</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> mm_struct</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">		*</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">mm</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">	struct</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> mm_struct</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">		*</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">active_mm</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">	int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">				exit_state</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">	int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">				exit_code</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">	int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">				exit_signal</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">	/* The signal sent when the parent dies: */</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">	int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">				pdeath_signal</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">	/* JOBCTL_*, siglock protected: */</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    </span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    /*...*/</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而这个两个函数是“系统调用”的一种，当然有权限访问 <code>PCB</code> 对象内部这一字段的信息。</p><p>我们之前在讲解阻塞的时候有提到过，阻塞的本质是硬件提供了进程队列，只要进程还在队列中没有读取到硬件的资源就会处于阻塞状态。</p><p>而软件也同样可以这样处理，实际上每一个 <code>PCB</code> 对象里面都有一个内置的等待队列，父进程等待子进程的时候就是需要获取子进程的资源，因此只需要把父进程加入到子进程 <code>PCB</code> 对象的等待队列里即可，这样父进程就变成阻塞状态了，这种阻塞就也叫做“软件条件”。</p><blockquote><p>补充：四个主要宏的作用</p><ol><li><p><strong>WIFEXITED(status)</strong></p><ul><li><strong>作用</strong>: 检查子进程是否正常退出。</li><li><strong>返回值</strong>: 如果子进程正常退出，返回非零值（true）；否则，返回零（false）。</li><li><strong>使用场景</strong>: 在调用 <code>wait</code> 或 <code>waitpid</code> 后，使用这个宏可以判断子进程是否通过调用 <code>exit</code> 或返回 <code>main</code> 函数退出。</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>c复制代码if (WIFEXITED(status)) {</span></span>
<span class="line"><span>    printf(&quot;Child exited with status %d\\n&quot;, WEXITSTATUS(status));</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>WEXITSTATUS(status)</strong></p><ul><li><strong>作用</strong>: 获取子进程的退出状态码。</li><li><strong>返回值</strong>: 返回子进程的退出状态码（<code>exit</code> 函数的参数或 <code>main</code> 函数的返回值）。</li><li><strong>使用场景</strong>: 在确认子进程正常退出后，可以使用这个宏获取子进程的退出状态码。</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>c复制代码if (WIFEXITED(status)) {</span></span>
<span class="line"><span>    int exit_status = WEXITSTATUS(status);</span></span>
<span class="line"><span>    printf(&quot;Child exited with status %d\\n&quot;, exit_status);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>WIFSIGNALED(status)</strong></p><ul><li><strong>作用</strong>: 检查子进程是否因为一个未捕获的信号而终止。</li><li><strong>返回值</strong>: 如果子进程因信号终止，返回非零值（true）；否则，返回零（false）。</li><li><strong>使用场景</strong>: 在调用 <code>wait</code> 或 <code>waitpid</code> 后，使用这个宏可以判断子进程是否因信号终止。</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>c复制代码if (WIFSIGNALED(status)) {</span></span>
<span class="line"><span>    printf(&quot;Child terminated by signal %d\\n&quot;, WTERMSIG(status));</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>WTERMSIG(status)</strong></p><ul><li><strong>作用</strong>: 获取导致子进程终止的信号编号。</li><li><strong>返回值</strong>: 返回导致子进程终止的信号编号。</li><li><strong>使用场景</strong>: 在确认子进程因信号终止后，可以使用这个宏获取导致终止的信号编号。</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>c复制代码if (WIFSIGNALED(status)) {</span></span>
<span class="line"><span>    int term_signal = WTERMSIG(status);</span></span>
<span class="line"><span>    printf(&quot;Child terminated by signal %d\\n&quot;, term_signal);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol></blockquote><h3 id="_9-4-进程替换" tabindex="-1"><a class="header-anchor" href="#_9-4-进程替换"><span>9.4.进程替换</span></a></h3><h4 id="_9-4-1-进程替换概念" tabindex="-1"><a class="header-anchor" href="#_9-4-1-进程替换概念"><span>9.4.1.进程替换概念</span></a></h4><p>之前我们是父进程创建子进程，子进程共享父进程的代码。那有没有办法做到子进程单独使用自己的程序，而不使用父进程的代码呢？这是可以的，这里使用到的技术就叫“程序替换”。</p><h4 id="_9-4-2-进程替换原理" tabindex="-1"><a class="header-anchor" href="#_9-4-2-进程替换原理"><span>9.4.2.进程替换原理</span></a></h4><p>程序替换会通过一个特定接口（<code>exec</code> 系列的调用），加载磁盘上的一个程序，加载代码和数据到调用进程的进程地址空间中。</p><p>也就是说，子进程往往要调用 <code>exec</code> 系列的调用来执行另一个程序。</p><ol><li>当某个进程调用 <code>exec</code> 系列的调用时，该进程的用户空间代码和数据完全被新程序替换，和父进程完全不一样，并且从新程序的启动例程开始执行。</li><li>调用 <code>exec</code> 系列接口时，并不创建新的进程，只是做了替换，所以调用 <code>exec</code> 系列结构后，进程的 <code>id</code> 没有发生改变。</li></ol><p>使用 <code>exec</code> 系列的函数实际上就是进程加载到内存的过程（将进程从磁盘加载到内存），也就是加载器最重要的功能！并且应该是先创建出进程对象，然后再加载的（因为有可能暂时还不用运行进程，只需要有对象就行），这就是我们所说“程序加载进内存”的具体过程。</p><p>由于子进程也是进程，因此在下面图解中，我单独讨论进程调用 <code>execl()</code> 时发生的过程。</p><h5 id="_9-4-2-1-替换使用" tabindex="-1"><a class="header-anchor" href="#_9-4-2-1-替换使用"><span>9.4.2.1.替换使用</span></a></h5><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">stdio.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">unistd.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">pid: </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%d</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">, exec command begin</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> getpid</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">());</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    execl</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/usr/bin/ls</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">ls</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">-a</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">-l</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> NULL</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//调用系统接口，达到程序替换的目的</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">pid: </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%d</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">, exec command end</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> getpid</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">());</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行后该代码后，该进程先执行了第一句打印语句，然后调用了系统的命令 <code>ls</code>，但时没有执行最后一句打印语句。</p><h5 id="_9-4-2-2-替换图解" tabindex="-1"><a class="header-anchor" href="#_9-4-2-2-替换图解"><span>9.4.2.2.替换图解</span></a></h5><p>上述代码的图解如下：</p><figure><img src="`+L+`" alt="image-20231108170939570" tabindex="0" loading="lazy"><figcaption>image-20231108170939570</figcaption></figure><p>而如果一个父进程创建出多个子进程，每个子进程都进行程序替换，那么就可以统一由父进程来调控各个子进程，这就是 <code>shell</code> 命令提示符的雏形（在本系列中我还会带您实现一个简易版本的 <code>shell</code> 命令提示符）。</p><h4 id="_9-4-3-进程替换调用" tabindex="-1"><a class="header-anchor" href="#_9-4-3-进程替换调用"><span>9.4.3.进程替换调用</span></a></h4><p><code>exec</code> 系列函数本质是加载程序的函数/加载器，有如下常见系统调用：</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// exec 系列调用</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">unistd.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> execl</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char*</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> path</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char*</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> arg</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ...</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> execv</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char*</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> path</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char*</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> argv</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[]);</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> execlp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char*</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> file</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char*</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> arg</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ...</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> execvp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char*</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> file</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char*</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> argv</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[]);</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> execle</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char*</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> path</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char*</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> arg</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ...</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char*</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> envp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[]);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_9-4-3-1-execl" tabindex="-1"><a class="header-anchor" href="#_9-4-3-1-execl"><span>9.4.3.1.execl()</span></a></h5><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> execl</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char*</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> path</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char*</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> arg</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ...</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这个函数我们前面已经使用过了，这里再详细解释一些细节。</p><p>这个函数的参数有：</p><ol><li><code>path</code> 是程序的所在路径</li><li><code>arg</code> 和可变参数列表传入命令行参数，并且以 <code>NULL</code> 结尾表示命令结束</li></ol><p>而一旦 <code>execl()</code> 调用成功，后续的代码就会被替换（实际上前面的代码也会被替换，但是前面的代码已经先运行了）。<code>execl()</code> 调用成功是不需要有返回值的（虽然函数返回一个 <code>int</code>，但是主要是返回错误值），因为被替换前的代码已经全部被替换了，也就不需要返回值了</p><p>如果调用 <code>execl()</code> 后失败，依旧会继续执行后面的代码，而不会进行替换。因此对于该调用，直接在 <code>execl()</code> 后使用 <code>exit()</code> 即可。成功替换就不会有执行 <code>exit()</code> 的机会，替换失败也可以直接退出代码。</p><p>如果父进程没有创建出子进程，那就必须替换父进程本身，此时就会影响父进程的其他工作（因此子进程存在的意义就在此，父进程像包工头：揽活，子进程就像工人：干活）。</p><p>在加载新程序之前，父子进程间数据和代码的关系是“代码共享、数据写时拷贝”。加载新程序后，实际上也是一种数据写入，那么代码需不需要写时拷贝，将父子的代码隔离？是的，必须要分离。因此在进程替换这一环节，数据和代码都会进行写时拷贝（这实际上就是一种解耦）。</p><p>但是被替换的进程怎么知道最开始执行的地方在哪里呢？在 <code>Linux</code> 中可执行程序的格式就是 <code>ELF</code>，该文件头部有一些字段（例如：<code>entry</code>）可以记录执行程序的入口地址，我们调用 <code>execl()</code> 后就将这个字段的信息交给被替换进程的 <code>PC/EIP</code> 指针指，后续执行就可以直接从替换程序的入口地址开始执行。</p><p>理解这一个函数后，后续所有同系列替换调用就会很容易理解了。</p><blockquote><p>补充：有的时候，传递命令行参数作为 <code>execl()</code> 第二个参数的时候，第一个字符串如果发生错误，也会执行出正确的结果（例如：<code>execl(&quot;/usr/bin/ls&quot;, &quot;lsaaa&quot;, &quot;-a&quot;, &quot;-l&quot;, NULL);</code>）。</p><p>这是因为如果第一个参数传递的程序地址正确的话，那么也会正确调用这个地址处的程序，这说明这个调用的健壮性很不错。</p><p>但需要注意的是，最好不要这么做，尽可能写成标准的形式吧！</p></blockquote><h5 id="_9-4-3-2-execlp" tabindex="-1"><a class="header-anchor" href="#_9-4-3-2-execlp"><span>9.4.3.2.execlp()</span></a></h5><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> execlp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char*</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> file</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char*</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> arg</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ...</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这个函数名里的 <code>p</code> 就是指 <code>path</code>，这个调用会自动在环境变量中查找和 <code>file</code> 相同的程序名字进行程序替换。</p><ol><li><code>file</code> 是要在环境变量中查找的程序名</li><li><code>arg</code> 和可变参数列表传入命令行参数，并且以 <code>NULL</code> 结尾表示命令结束</li></ol><blockquote><p>吐槽：我个人最喜欢用这一个，但是这一个有一个小坑点，就是有可能要把需要执行的工具名称写两次，我暂时还不太理解这一做法的理由是什么...</p></blockquote><h5 id="_9-4-3-3-execle" tabindex="-1"><a class="header-anchor" href="#_9-4-3-3-execle"><span>9.4.3.3.execle()</span></a></h5><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> execle</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char*</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> path</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char*</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> arg</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ...</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char*</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> envp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[]);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在 <code>execl()</code> 基础上，还可以手动向目标进程多传递环境变量列表。</p><h5 id="_9-4-3-4-execv" tabindex="-1"><a class="header-anchor" href="#_9-4-3-4-execv"><span>9.4.3.4.execv()</span></a></h5><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> execv</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char*</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> path</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char*</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> argv</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[]);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>可以把 <code>execl()</code> 中的 <code>l</code> 可以看作 <code>list</code> 单词来理解，把 <code>execv()</code> 中的 <code>v</code> 看作 <code>vector</code> 单词来理解，只需传递一个保存字符串的数组（这个数组里也要包含结尾的 <code>NULL</code> 成员）即可。因此两个函数只是传参方式有些许不同，其他都一样。</p><h5 id="_9-4-3-5-execvp" tabindex="-1"><a class="header-anchor" href="#_9-4-3-5-execvp"><span>9.4.3.5.execvp()</span></a></h5><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> execvp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char*</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> file</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char*</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> argv</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[]);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>类似上述理解。</p><h5 id="_9-4-3-6-execve" tabindex="-1"><a class="header-anchor" href="#_9-4-3-6-execve"><span>9.4.3.6.execve()</span></a></h5><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> execve</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char*</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> filename</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char*</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> argv</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[],</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char*</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> envp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[]);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这个函数是真正的系统调用，是其他替换调用的底层实现。</p><blockquote><p>补充 <code>1</code>：还有一个 <code>execvpe()</code>，为了避免记忆混乱，这里单独列出这个函数。</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> execvpe</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char*</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> file</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char*</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> argv</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[],</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char*</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> envp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[]);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>补充 <code>2</code>：无论是什么语言，运行起来最后都会变成进程，因此上述提及的调用就可以做到“在 <code> C</code> 语言中调用其他语言代码生成的进程（不单单是系统本身的命令程序）”，这就意味着可以进行多种语言的代码合作。</p><p>补充 <code>3</code>：是否有环境变量是否继承和进程替换没有关系。那上述可以传递环境变量的接口有什么意义呢？意义在传递我们自己的环境变量，在程序内部就书写了一个环境变量数组，这个程序运行起来后使用进程替换时，就可以保证让新替换进来进程只能使用我们传递的环境变量。</p><p>如果不希望覆盖，只是希望新增环境变量，就可以使用 <code>putenv()</code> 向当前进程添加环境变量，进而显式传递 <code>environ</code> 全局变量给新替换进程（这也是默认行为），也就可以达到增加环境变量的目的。</p><p>补充 <code>4</code>：环境变量也是数据，父进程也会将这份数据交给子进程拷贝，但是在调用进程替换接口的时候，代码和数据都会被覆盖，环境变量也会被替换么？答案是不会，事实上，程序替换只会替换进新程序的代码和数据，不会替换继承下来的环境变量。</p><p>补充 <code>5</code>：如果上述的接口您有查看过 <code>man</code> 手册，就会发现大部分接口都只能在 <code>man</code> 的 <code>3</code> 号手册中查询，这意味着这些接口都不是严格意义上的系统接口，实际上真正的系统接口在 <code>man</code> 的 <code>2</code> 号手册内可以找到，这个调用就是 <code>execve()</code>，也就是其他替换调用的底层函数。</p></blockquote><blockquote><p>补充：作业的概念和使用</p><p>在 <code>Unix-like</code> 操作系统中，<code>jobs &lt;作业号&gt;</code> 指令可以用来查看后台进程/作业（<code>background jobs</code>）信息，常用选项为：</p><ul><li><strong>-l</strong>：显示作业号（<code>job number</code>）、状态、命令行和进程组信息</li><li><strong>-p</strong>：仅显示后台作业的进程 <code>ID</code></li><li><strong>-n</strong>：如果作业状态是 <code>Stopped</code>（挂起），使用 <code>-n</code> 选项也会显示挂起的作业。</li></ul><p>假设有一个后台运行的作业，你可以使用 <code>jobs</code> 来查看它的状态和作业号：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># jobs 使用例子</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> sleep</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1000</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &amp;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> 12345</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">   # [1] 是作业号，12345 是进程 ID</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> jobs</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">+  Running                 sleep 1000 </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&amp;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>sleep 1000</code> 被放入后台运行，<code>jobs</code> 命令显示了该作业的状态为 <code>Running</code>，作业号为 <code>[1]</code>，进程 ID 为 <code>12345</code>。</p><p>要将一个作业调回前台运行，可以使用 <code>fg</code> 命令，后面跟着作业号。例如：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># fg 使用例子</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> fg</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> %1</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">   # 将作业号为 1 的作业调回前台运行</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，终端会切换到 <code>sleep 1000</code> 进程的输出，并且您可以继续通过按下 <code>[Ctrl+C]</code> 等方式来结束该作业。</p></blockquote><h3 id="_9-5-进程限制" tabindex="-1"><a class="header-anchor" href="#_9-5-进程限制"><span>9.5.进程限制</span></a></h3><p>可以对进程的资源占用进行设置，这通常使用 <code>setrlimit()</code> 接口来达到目的，<code>限制类型，软限制和硬限制</code>。<code>sys/time.h 和 sys/resource.h</code></p><ul><li>软限制（Soft Limit）：软限制是操作系统强制执行的当前资源限制。进程可以在其生命周期内随时更改其软限制，只要新的软限制不超过硬限制。</li><li>硬限制（Hard Limit）：硬限制是操作系统允许设置的最大资源限制。进程可以降低其硬限制，但只有超级用户（通常是 root）可以将其硬限制提高。硬限制提供了一个上限，确保进程不能任意增加其资源使用。</li></ul><p>以下是一个示例，演示如何使用 <code>setrlimit()</code> 来限制进程的最大内存使用量和 CPU 时间：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">sys/resource.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">iostream</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">stdexcept</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> setMemoryLimit</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">size_t</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> maxMemory</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    struct</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> rlimit</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> rl</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    rl</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">rlim_cur</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> maxMemory</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    rl</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">rlim_max</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> RLIM_INFINITY</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    setrlimit</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">RLIMIT_AS</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &amp;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">rl</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> setCpuTimeLimit</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">time_t</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> maxCpuTime</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    struct</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> rlimit</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> rl</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    rl</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">rlim_cur</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> maxCpuTime</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    rl</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">rlim_max</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> RLIM_INFINITY</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    setrlimit</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">RLIMIT_CPU</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &amp;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">rl</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // Set memory limit to 100 MB</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    setMemoryLimit</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1024</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1024</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 100</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // Max == 100MB(包含程序本身和用户申请的)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // Set CPU time limit to 10 seconds</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // setCpuTimeLimit(10);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // Simulate workload</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    for</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1000000000</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ++</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">        int*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> p </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> int</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1024</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1024</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">];</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">cout </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 20</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;&lt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">endl</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，原理是收到了信号造成运行异常，<code>CPU</code> 对应的信号就是 <code>24</code> 号信号，内存对应的信号就是 <code>11</code> 号信号：</p><ul><li><code>setMemoryLimit()</code> 函数使用 <code>setrlimit()</code> 来设置进程的虚拟内存最大值（<code>RLIMIT_AS</code>）。</li><li><code>setCpuTimeLimit()</code> 函数使用 <code>setrlimit()</code> 来设置进程的最大 CPU 时间（<code>RLIMIT_CPU</code>）。</li><li><code>main()</code> 函数中调用了这两个函数来设置限制，并运行一个简单的工作负载来测试这些限制。</li></ul><p>你可以根据需要调整内存和 CPU 时间的限制值。在实际使用中，需要确保你有足够的权限来设置这些限制。对于某些资源，非特权用户可能只能降低限制，而不能提高它们。</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">iostream</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">sys/time.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">sys/resource.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 资源限制</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    struct</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> rlimit</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> r</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">};</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    r</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">rlim_cur</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 进程占用秒数</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    r</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">rlim_max</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> RLIM_INFINITY</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">setrlimit</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">RLIMIT_CPU</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &amp;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">r</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> !=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">cerr </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;&lt;</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Failed to set resource limit</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;&lt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">endl</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        return</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    while</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">true</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        ;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 无限循环</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><blockquote><p>结语：...</p></blockquote>`,181))])}const W=n(N,[["render",G]]),X=JSON.parse('{"path":"/1.%E7%BC%96%E7%A0%81%E4%BF%AE%E5%85%BB/3.%E7%B3%BB%E7%BB%9F%E7%BD%91%E7%BB%9C/okgrdzg4/","title":"进程基础","lang":"zh-CN","frontmatter":{"createTime":"2025/04/09 23:31:29","permalink":"/1.编码修养/3.系统网络/okgrdzg4/","title":"进程基础","description":"1.进程概念 我们启动一个软件，本质就是启动了一个进程。在 Windows 下如果我们启动了某个应用程序，然后打开资源管理器（常见的快捷键是 [ctrl+alt+delete]，或者直接打开系统的“搜索”输入“资源管理器”点击即可打开）就可以看到有一个对应的软件出现在进程列表中： 7e10f4e1-cf7c-4507-b8ec-f2a989d717a3...","head":[["meta",{"property":"og:url","content":"https://limou3434.github.io/work-blog-website/work-blog-website/1.%E7%BC%96%E7%A0%81%E4%BF%AE%E5%85%BB/3.%E7%B3%BB%E7%BB%9F%E7%BD%91%E7%BB%9C/okgrdzg4/"}],["meta",{"property":"og:site_name","content":"缡墨"}],["meta",{"property":"og:title","content":"进程基础"}],["meta",{"property":"og:description","content":"1.进程概念 我们启动一个软件，本质就是启动了一个进程。在 Windows 下如果我们启动了某个应用程序，然后打开资源管理器（常见的快捷键是 [ctrl+alt+delete]，或者直接打开系统的“搜索”输入“资源管理器”点击即可打开）就可以看到有一个对应的软件出现在进程列表中： 7e10f4e1-cf7c-4507-b8ec-f2a989d717a3..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-19T14:21:17.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-19T14:21:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"进程基础\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-19T14:21:17.000Z\\",\\"author\\":[]}"]]},"headers":[],"readingTime":{"minutes":98.81,"words":29642},"git":{"updatedTime":1745072477000,"contributors":[{"name":"limou3434","username":"limou3434","email":"898738804@qq.com","commits":6,"avatar":"https://avatars.githubusercontent.com/limou3434?v=4","url":"https://github.com/limou3434"}]},"autoDesc":true,"filePathRelative":"notes/1.编码修养/3.系统网络/011_ljp_2023_09_09_进程基础.md","categoryList":[{"id":"4358b5","sort":10000,"name":"notes"},{"id":"557f7c","sort":1,"name":"编码修养"},{"id":"7ab59a","sort":3,"name":"系统网络"}],"bulletin":true}');export{W as comp,X as data};
