import{_ as i,c as a,b as e,o as n}from"./app-DcSFSDZX.js";const l={};function h(t,s){return n(),a("div",null,s[0]||(s[0]=[e(`<h2 id="_1-环境变量概念" tabindex="-1"><a class="header-anchor" href="#_1-环境变量概念"><span>1.环境变量概念</span></a></h2><p>首先要知道几个事实：</p><ol><li><code>Linux</code> 里面使用的命令行指令，也是经过代码编写产生的可执行文件。而在 <code>Linux</code> 下的任何文件路径都可以使用这些指令，那能不能让我们自己编写的代码也这样呢？答案是可以，不过需要使用环境变量。</li><li>在编译 <code>C/C++</code> 代码的时候，我们是不知道链接时期需要的的动态静态库在哪里的，都是照样可以链接成功，生成可执行程序，原因也是有相关环境变量帮助编译器进行查看。</li></ol><p>环境变量是指在操作系统中用来指定操作系统运行环境的一些参数（类似语言的全局变量），环境变量通常具有某些特殊用途，在系统中通常具有全局的特性。</p><p>下面是一些常见的环境变量：</p><ol><li><p><code>PATH</code>：指定命令的搜索路径</p></li><li><p><code>HOME</code>：指定用户的主工作目录（指令 <code>cd ~</code> 就是根据 <code>HOME</code> 变量来进行确认的）</p></li><li><p><code>SHELL</code>：当前 <code>Shell</code>，其值通常为 <code>/bin/bash</code>。</p></li><li><p><code>HISTSIZE</code>：其值为设置 shell 历史记录大小的变量（使用 <code>history</code> 指令可以查看 <code>HISTSIZE</code> 条历史指令）</p></li><li><p><code>LS_COLORS</code>：环境变量是用于设置 <code>ls</code> 命令在终端中显示不同文件类型和属性时的颜色的变量。通过指定不同文件类型和属性对应的颜色码，可以使文件在终端中以不同的颜色进行区分和显示</p></li><li><p><code>LOGNAME</code>：记录登录的用户名</p></li><li><p><code>PWD</code>：保存当前的路径</p></li></ol><p><code>Linux</code> 中的环境变量有很多，基本都是独立工作的，各有各的功能（在 <code>Windows</code> 操作系统里也是有环境变量的）。</p><h2 id="_2-环境变量查看" tabindex="-1"><a class="header-anchor" href="#_2-环境变量查看"><span>2.环境变量查看</span></a></h2><ol><li><p>使用命令 <code>echo $NAME</code> 即可查看对应变量的情况，注意需要带上 <code>$</code> 符号。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> which</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> pwd</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">/usr/bin/pwd</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> echo</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> $PATH</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">...</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">:/usr/bin:</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">...</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> #这里可以找到pwd可执行文件的所在地，还有其他的地址，使用“:”进行分割</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>还可以使用命令 <code>env</code> 来查看当前系统的所有环境变量，这里输出结果有很多，可以看到所有的环境变量及其值（无法查看 <code>shell</code> 环境变量）</p></li><li><p><code>set</code> 命令则是显示本地定义的 <code>shell</code> 变量和环境变量（关于 <code>shell</code> 变量后面有提及）</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> limou=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">123456789</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> set</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> text</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> cat</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> text</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> |</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> grep</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> limou</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">limou</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">123456789</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="_3-环境变量修改" tabindex="-1"><a class="header-anchor" href="#_3-环境变量修改"><span>3.环境变量修改</span></a></h2><p>如果我们想要实现我们自己编写的可执行程序和 <code>Linux</code> 内置指令一样的使用效果，有两种方法：</p><ol><li><p>把您自己写的可执行程序放进 <code>PATH</code> 环境变量中的文件路径下，这样就可以像使用 <code>Linux</code> 指令一样使用自己编写的可执行程序（一般放在 <code>/usr/bin</code> 下比较多，这种行为叫做“给系统安装程序”，但是这种做法不建议，有可能污染操作系统）。</p></li><li><p>还有一种方法是使用命令 <code>export &lt;环境变量&gt;=$&lt;环境变量&gt;:新值</code> 配置 <code>PATH</code> 环境变量，这样操作不会污染到系统的文件。如果使用命令 <code>unset 某环境变量</code> 可以清除某个环境变量，如果使用 <code>unset PATH</code> 后就会发现其他的 <code>Linux</code> 指令都无法使用了，不过不用担心，下次登录还是会恢复默认的 <code>PATH</code> 值的，这是因为系统再重新登录的时候，会重新读取保存环境变量的配置文件（也就是家目录下的 <code>.bash_profile</code> 文件），而父进程 <code>bash</code> 会重新加载环境变量。</p><p>另外，可以使用 <code>export</code> 指令将已经存在的 <code>shell</code> 变量转变为环境变量，只需要使用 <code>export &lt;已经存在的shell变量&gt;</code> 即可。</p><blockquote><p>补充 <code>1</code>：实际上对应环境变量这样的“系统变量”，还有一个“本地变量”，即：<code>shell</code> 变量，就是直接在 <code>bash</code> 定义一个变量，这个变量的值可以使用 <code>echo $&lt;sheel变量名&gt;</code> 指令查看，但不能使用 <code>env</code> 命令查看，因为它还不是环境变量，其作用域只在 <code>bash</code> 父进程中，还没有被其他子进程继承。</p><p>补充 <code>2</code>：不过，既然不能将 <code>shell</code> 变量继承给子进程，那么在父进程下运行的 <code>echo</code> 不也是 <code>bash</code> 的子进程么，它是怎么读取到我们设置的 <code>shell</code> 变量的呢？如果我们使用 <code>PATH=&quot;&quot;</code> 把 <code>PATH</code> 清空，就会惊奇发现，其他大部分命令都失效了，但是 <code>echo</code> 命令依旧可以正常打印 <code>shell</code> 变量。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> limou=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">123456789</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> echo</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> $limou</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">123456789</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> PATH=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> echo</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> $limou</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">123456789</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> echo</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> $PATH</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> echo</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> $HOME</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">/home/ljp</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> echo</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> $SHELL</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ls</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">bash:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ls:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> No</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> such</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> file</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> or</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> directory</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> touch</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">bash:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> touch:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> No</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> such</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> file</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> or</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> directory</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是因为在 <code>Linux</code> 中，大部分的常规命令都是磁盘上真实存在，并且需要由 <code>fork()</code> 创建子进程来执行的，但是还有一些命令不需要创建子进程来执行，这种命令由 <code>bash</code> 自己来执行，也叫做 <code>bash</code> 的内建命令。因此 <code>echo</code> 命令不会创建子进程，直接在 <code>bash</code> 内执行，当然可以获取 <code>bash</code> 自己读取的到的变量（环境变量和 <code>shell</code> 变量）。这样的内建命令有很多，包括 <code>pwd</code>、<code>export</code> 等等。</p></blockquote><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> limou=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1234567</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> echo</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> $limou</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">1234567</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> env</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> |</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> grep</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> $limou</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> export</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> limou</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> env</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> |</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> grep</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> $limou</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">limou</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">1234567</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述环境变量添加操作实际上是加载到内存中，而不是加载到环境变量配置文件中。</p><blockquote><p>补充：通常，在 CentOS 上，<code>~/.bash_profile</code> 是用于登录 <code>shell</code> 的配置文件，而 <code>~/.bashrc</code> 是用于非登录 shell 的配置文件。如果你希望在每次登录时都加载环境变量，通常会在 <code>~/.bash_profile</code> 中进行设置。</p></blockquote></li><li><p>直接将环境变量的名字和值以 <code>export &lt;环境变量名&gt;=&lt;环境变量值&gt;</code> 的形式写入 <code>.bash_profile</code> 则可以达到登录即可使用自定义环境变量的目的，但是也有污染的可能。</p></li></ol><blockquote><p>注意：一般情况下，在 <code>Linux</code> 命令行中修改环境变量只适用于本次会话（本次登录），一旦退出登录就无效了，不过如果修改的是保存环境变量的文件就会永久有效。</p></blockquote><h2 id="_4-环境变量组织" tabindex="-1"><a class="header-anchor" href="#_4-环境变量组织"><span>4.环境变量组织</span></a></h2><p>环境变量通常使用环境变量表组织起来，而环境表是一个字符指针数组，每个指针指向一个以 <code>\\0</code> 结尾的环境变量字符串，并且最后一个元素指向 <code>NULL</code> 表示结尾，这样做就可以将所有环境变量组织起来。</p><p>因此我们编写代码的时候可以使用以下的 <code>main()</code> 接口来接受和操作运行程序时使用的选项和环境变量：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">stdio.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">string.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> argc</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char*</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> argv</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[],</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char*</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> env</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[])</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">strcmp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">argv</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">argc </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">],</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">-order</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ==</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">---------</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        for</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> env</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">];</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">++</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">            printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%s\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> env</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        }</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">---------</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的 <code>env</code> 数组也就对应上面提到的由环境变量构成的 <code>char*</code> 类型数组，该数组视 <code>NULL</code> 的结尾。</p><p>上面的 <code>mian()</code> 程序被系统启动后，接受了两张表，一是命令行参数表，二是环境变量表</p><h2 id="_5-环境变量接口" tabindex="-1"><a class="header-anchor" href="#_5-环境变量接口"><span>5.环境变量接口</span></a></h2><p>在上面的代码中，<code>main</code> 函数可以带上三个参数，第三参数实际上就是有关环境变量的参数（前两个数选项个数和选项字符数组）：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> mian</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> argc</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> argv</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">[]</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> env</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">[]</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>除了这种方法还可以使用 <code>unistd.h</code> 内定义的 <code>environ[]</code> 全局数组来获取环境变量的值。</p><p>但是最常用的是使用 <code>stdlib.h</code> 的 <code>getenv()</code> 函数，可以根据参数来获取对应的环境变量值（其参数是想获取环境变量的变量名字符串）。</p><p>还有一些其他有关环境变量的接口，您可以自行探索一下。</p><blockquote><p>补充 <code>1</code>：一般 <code>main()</code> 的环境变量参数是由父进程继承过来的，父进程也是从它自己的父进程获取的，因此环境变量最终在 <code>bash</code> 进程获取，而所有进程的父进程是当前 <code>bash</code>。这也就是环境变量之所以具有全局属性的本质原因，而 <code>env[]</code> 参数也是依靠父进程传参的。</p><p>这种父子传递关系，您可以在 <code>bash</code> 下自己创建一个自定义的环境变量，然后使用 <code>C</code> 语言库内的 <code>getenv()</code> 函数读取环境变量来验证。</p><p>欸，但是父进程的环境变量又是那里来的？是操作系统读取配置文件后得来的。</p><p>补充 <code>2</code>：<code>shell</code> 变量没有办法在 <code>C</code> 代码中使用 <code>getenv()</code> 获取。</p><p><code>shell</code> 变量实际上最常用的场景是在 <code>shell</code> 脚本里，这个 <code>shell</code> 脚本我们以后再提及。</p></blockquote><p>还有一些其他的环境变量接口，例如：可以向进程导入环境变量的 <code>int putenv(const char* env)</code>，而子进程也可以通过该父进程继承这个环境变量。</p>`,27)]))}const d=i(l,[["render",h]]),k=JSON.parse('{"path":"/1.%E7%BC%96%E7%A0%81%E4%BF%AE%E5%85%BB/3.%E7%B3%BB%E7%BB%9F%E7%BD%91%E7%BB%9C/cpg60x70/","title":"环境变量","lang":"zh-CN","frontmatter":{"createTime":"2025/04/09 23:31:29","permalink":"/1.编码修养/3.系统网络/cpg60x70/","title":"环境变量","description":"1.环境变量概念 首先要知道几个事实： Linux 里面使用的命令行指令，也是经过代码编写产生的可执行文件。而在 Linux 下的任何文件路径都可以使用这些指令，那能不能让我们自己编写的代码也这样呢？答案是可以，不过需要使用环境变量。 在编译 C/C++ 代码的时候，我们是不知道链接时期需要的的动态静态库在哪里的，都是照样可以链接成功，生成可执行程序，...","head":[["meta",{"property":"og:url","content":"https://limou3434.github.io/work-blog-website/work-blog-website/1.%E7%BC%96%E7%A0%81%E4%BF%AE%E5%85%BB/3.%E7%B3%BB%E7%BB%9F%E7%BD%91%E7%BB%9C/cpg60x70/"}],["meta",{"property":"og:site_name","content":"缡墨"}],["meta",{"property":"og:title","content":"环境变量"}],["meta",{"property":"og:description","content":"1.环境变量概念 首先要知道几个事实： Linux 里面使用的命令行指令，也是经过代码编写产生的可执行文件。而在 Linux 下的任何文件路径都可以使用这些指令，那能不能让我们自己编写的代码也这样呢？答案是可以，不过需要使用环境变量。 在编译 C/C++ 代码的时候，我们是不知道链接时期需要的的动态静态库在哪里的，都是照样可以链接成功，生成可执行程序，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-19T14:21:17.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-19T14:21:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"环境变量\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-19T14:21:17.000Z\\",\\"author\\":[]}"]]},"headers":[],"readingTime":{"minutes":7.67,"words":2300},"git":{"updatedTime":1745072477000,"contributors":[{"name":"limou3434","username":"limou3434","email":"898738804@qq.com","commits":6,"avatar":"https://avatars.githubusercontent.com/limou3434?v=4","url":"https://github.com/limou3434"}]},"autoDesc":true,"filePathRelative":"notes/1.编码修养/3.系统网络/012_ljp_2023_09_27_环境变量.md","categoryList":[{"id":"4358b5","sort":10000,"name":"notes"},{"id":"557f7c","sort":1,"name":"编码修养"},{"id":"7ab59a","sort":3,"name":"系统网络"}],"bulletin":true}');export{d as comp,k as data};
