import{_ as o,c as i,b as s,o as t}from"./app-DcSFSDZX.js";const d={};function r(n,e){return t(),i("div",null,e[0]||(e[0]=[s('<h2 id="_1-redis-的概念" tabindex="-1"><a class="header-anchor" href="#_1-redis-的概念"><span>1.Redis 的概念</span></a></h2><p><code>Redis</code> 是一种开源的内存数据库，用于存储数据结构，例如字符串、哈希表、列表、集合、有序集合等。它被设计为快速、灵活，并支持多种数据结构的操作。<code>Redis</code> 通常用作缓存、消息代理、会话存储等用途。它支持多种编程语言，并有许多客户端库可供开发者使用。Redis 也有持久化选项，可以将数据保存到磁盘上，以便在重启时恢复数据。</p><h2 id="_2-redis-的原理" tabindex="-1"><a class="header-anchor" href="#_2-redis-的原理"><span>2.Redis 的原理</span></a></h2><p><code>Redis</code> 所有数据都是存放在内存中的，把数据放在内存中是 <code>Redis</code> 速度快的最主要原因。另外 <code>Redis</code> 是 ⽤ <code>C</code> 语 ⾔ 实现的，⼀ 般来说 <code>C</code> 语 ⾔ 实现的最终程序会更快。另外 <code>Redis</code> 一开始采用的是单线程，预防了多线程可能产 ⽣ 的竞争问题。不够后面的 <code>Redis</code> 在 <code>6.0</code> 版本引 ⼊ 了多线程机制，但主要也是在处理 ⽹ 络和 <code>IO</code>，不涉及到数据命令，即命令的执行仍然采 ⽤ 了单线程模式。</p><p>从网络角度上，<code>Redis</code> 还使用了 <code>IO</code> 多路复用的方式，实际上就是 <code>ET</code> 模式的 <code>epoll</code>（<code>Redis</code> 的核心任务主要是操作内存的数据结构，不会吃很多的 <code>CPU</code> 资源）。</p><p>另外，<code>Redis</code> 的很多核心功能都是比较简单的逻辑，简单逻辑就代表简单执行，就会非常快速。</p><h2 id="_3-redis-的特点" tabindex="-1"><a class="header-anchor" href="#_3-redis-的特点"><span>3.Redis 的特点</span></a></h2><h3 id="_3-1-redis-的优点" tabindex="-1"><a class="header-anchor" href="#_3-1-redis-的优点"><span>3.1.Redis 的优点</span></a></h3><p><code>Redis</code> 相对于传统的关系型数据库（如 <code>MySQL</code>）或自定义内存中的变量有一些优势，这些优势可能导致选择 <code>Redis</code>：</p><ol><li><p><strong>性能快速</strong>：这里的性能快速是和 <code>MySQL</code> 进行对比。</p><p>(1)<code>Redis</code> 是一个基于内存的数据库，因此读写速度非常快，适合需要快速响应的应用场景，如缓存系统或计数器（因此常常是 <code>MySQL</code> 的一个替代方案，但是存储容量没有 <code>MySQL</code> 多，不过有一种方案就是两者同时结合使用，热点数据使用 <code>Redis</code>，其余数据使用 <code>MySQL</code>）。</p></li><li><p><strong>数据结构</strong>：<code>Redis</code> 支持丰富的数据结构，如字符串、哈希表、列表、集合、有序集合、<code>GEO(地理信息定位)</code>...，这使得它可以更灵活地存储和操作数据，而不仅仅局限于关系型数据库的表结构（和 <code>MySQL</code> 关系数据库不同，<code>Redis</code> 是基于键值对来组织数据的，是一种典型的非关系型数据库）。</p></li><li><p><strong>可编程的</strong>：可以使用命令行操作 <code>Redis</code>，也可以使用编程语言脚本的方式批量执行一些操作（主要使用 <code>Lua</code>，也是一种较火的语言）。</p></li><li><p><strong>可拓展性</strong>：可以使用 <code>C/C++、Rust</code> 来为 <code>Redis</code> 功能做拓展（本质是安装动态链接库，类似 <code>.so/.dll</code> 等），例如支持更多数据结构和更多交互命令。</p></li><li><p><strong>持久化数据</strong>：虽然 <code>Redis</code> 是基于内存的，但它提供了持久化选项，可以将数据定期写入磁盘，确保数据不会因为系统崩溃而丢失。并且也有两种持久化方案，<code>RDB</code> 和 <code>AOF</code>，前者是基于快照数据的持久化，后者是基于日志数据的持久化。</p></li><li><p><strong>水平拓展</strong>：<code>Redis</code> 支持主从复制和集群模式，可以在多个主机部署多个节点。</p></li><li><p><strong>高可用性</strong>：多个节点上可以复制数据（备份/冗余），提高系统的可用性和容错能力，从节点就相当于主节点的备份。</p></li><li><p><strong>原子操作</strong>：<code>Redis</code> 支持原子操作，能够保证多个操作的原子性，避免了多线程或多进程并发操作数据时可能出现的竞态条件。</p></li><li><p><strong>客户端语言多</strong>：客户端可以支持的语言非常多，包括但不限于 <code>Cpp, Java, Python, Node.js...</code>，使用起来非常简单。</p></li><li><p><strong>主从复制功能</strong>：提供了复制功能，实现了多个相同数据的 <code>Redis</code> 副本。</p></li><li><p><strong>高可用</strong>：提供了哨兵机制，保证 <code>Redis</code> 的故障发现和故障自动转移。</p></li></ol><p>总的来说，<code>Redis</code> 适用于需要高性能、低延迟、丰富数据结构和高可用性的应用场景，如缓存、实时数据分析、会话存储等。虽然在某些情况下使用传统的关系型数据库或自定义内存变量也可以实现类似的功能，但 <code>Redis</code> 提供了更好的性能和更丰富的功能。</p><p>进程间通信，如果是单机，就需要通过管道或者共享内存等机制来传递数据。而如果涉及到多台主机，就会涉及到网络通信。而 <code>Redis</code> 就是基于网络把内存中数据交给别的进程甚至是其他主机中进程来使用，并且一般是基于分布式系统的。</p><p><code>Redis</code> 经常会被作为：</p><ul><li><p>存储数据的非关系实时数据库（具有更低的存储和更高的效率）</p></li><li><p>使用 <code>session</code> 配合 <code>cookie</code> 实现会话管理...</p></li><li><p>消息队列消息中间件（这里不是进程通信中的消息队列），是网络中的生产者消费者模型（知名的消息队列就有 <code>RabbitMQ、Kafka、RocketMQ</code> 等，不过 <code>Redis</code> 的不常使用，多是顺带方便才使用）</p><div class="hint-container important"><p class="hint-container-title">重要</p><p>补充：<code>Redis</code> 一开始是作为消息中间件（消息队列）的一个生产者-消费者模型解决方案，但是这种类似的解决方案已经有更优的方案了。</p></div></li></ul><h3 id="_3-2-redis-的缺点" tabindex="-1"><a class="header-anchor" href="#_3-2-redis-的缺点"><span>3.2.Redis 的缺点</span></a></h3><p>数据量大的场景中无法使用，受限于内存空间存储空间不大等。</p><h2 id="_4-redis-的版本" tabindex="-1"><a class="header-anchor" href="#_4-redis-的版本"><span>4.Redis 的版本</span></a></h2><h3 id="_4-1-redis-2-6-2012-年发布" tabindex="-1"><a class="header-anchor" href="#_4-1-redis-2-6-2012-年发布"><span>4.1.Redis 2.6 (2012 年发布)</span></a></h3><ul><li><strong>Lua 脚本支持</strong>：服务端支持执行 <code>Lua</code> 脚本。</li><li><strong>移除虚拟内存功能</strong>。</li><li><strong>去除客户端连接数硬编码限制</strong>。</li><li><strong>键的过期时间支持毫秒</strong>。</li><li><strong>只读功能</strong>：提供只读节点功能。</li><li><strong>新增位图命令</strong>：<code>bitcount</code> 和 <code>bitop</code>。</li><li><strong>redis-benchmark 增强</strong>：支持定制化压测，CSV 格式输出等。</li><li><strong>基于浮点数的自增命令</strong>：<code>incrbyfloat</code> 和 <code>hincrbyfloat</code>。</li><li><strong>redis-cli 支持 Lua 脚本执行</strong>：通过 <code>--eval</code> 参数。</li><li><strong>shutdown 命令增强</strong>。</li><li><strong>Info 命令优化</strong>：按 section 输出，新增统计项。</li><li><strong>核心代码重构</strong>：去掉集群相关代码，Redis Cluster 将在 3.0 版本中支持。</li><li><strong>优化 sort 命令</strong>。</li></ul><h3 id="_4-2-redis-2-8-2013-年发布" tabindex="-1"><a class="header-anchor" href="#_4-2-redis-2-8-2013-年发布"><span>4.2.Redis 2.8 (2013 年发布)</span></a></h3><ul><li><strong>主从复制功能增强</strong>：降低网络问题引起的全量复制压力。</li><li><strong>IPv6 支持</strong>：初步支持 <code>IPv6</code>。</li><li><strong>config set 支持设置 <code>maxclients</code></strong>。</li><li><strong>bind 命令支持多个 IP 地址绑定</strong>。</li><li><strong>显式进程名</strong>：便于使用 <code>ps</code> 命令查看。</li><li><strong>config rewrite</strong>：将 <code>config set</code> 持久化到配置文件。</li><li><strong>新增 pubsub 命令</strong>：增强发布订阅功能。</li><li><strong>Redis Sentinel 第二版</strong>：生产环境可用。</li></ul><h3 id="_4-3-redis-3-0-2015-年发布" tabindex="-1"><a class="header-anchor" href="#_4-3-redis-3-0-2015-年发布"><span>4.3.Redis 3.0 (2015 年发布)</span></a></h3><ul><li><strong>Redis Cluster</strong>：官方分布式实现。</li><li><strong>优化对象编码</strong>：嵌入式字符串对象编码，优化内存访问，提升下载速度。</li><li><strong>LRU 算法优化</strong>：显著提升性能。</li><li><strong>migrate 命令优化</strong>：新增 <code>copy</code> 和 <code>replace</code> 参数，提升迁移速度。</li><li><strong>client pause 命令</strong>：暂停客户端请求处理。</li><li><strong>bitcount 命令性能提升</strong>。</li><li><strong>config set 支持不同单位设置 <code>maxmemory</code></strong>。</li><li><strong>日志优化</strong>：日志中反映实例角色（master 或 slave）。</li><li><strong>incr 命令性能提升</strong>。</li></ul><h3 id="_4-4-redis-3-2-2016-年发布" tabindex="-1"><a class="header-anchor" href="#_4-4-redis-3-2-2016-年发布"><span>4.4.Redis 3.2 (2016 年发布)</span></a></h3><ul><li><strong>GEO 功能</strong>：新增地理位置相关命令。</li><li><strong>SDS 优化</strong>：在速度和空间利用上进行优化。</li><li><strong>List 编码类型</strong>：新增 <code>quicklist</code> 编码类型。</li><li><strong>一致性保证</strong>：从节点读取过时数据的一致性保证。</li><li><strong>新增 hstrlen 命令</strong>。</li><li><strong>debug 命令增强</strong>：支持更多参数。</li><li><strong>Lua 脚本功能增强</strong>。</li><li><strong>Lua Debugger</strong>：调试 <code>Lua</code> 脚本。</li><li><strong>config set 支持更多配置项</strong>。</li><li><strong>RDB 格式优化</strong>：更新 <code>RDB</code> 格式，兼容旧格式。</li><li><strong>加速 RDB 加载速度</strong>。</li><li><strong>spop 命令支持个数参数</strong>。</li><li><strong>cluster nodes 命令加速</strong>。</li><li><strong>更新 Jemalloc 到 4.0.3</strong>。</li></ul><h3 id="_4-5-redis-4-0-2017-年发布" tabindex="-1"><a class="header-anchor" href="#_4-5-redis-4-0-2017-年发布"><span>4.5.Redis 4.0 (2017 年发布)</span></a></h3><ul><li><strong>模块系统</strong>：引入模块系统，支持第三方扩展。</li><li><strong>PSYNC 2.0</strong>：优化主从切换，避免全量复制。</li><li><strong>LFU 缓存剔除算法</strong>：与 <code>LRU</code> 相比，<code>LFU</code> 基于访问次数，优化了缓存淘汰。</li><li><strong>非阻塞 <code>del</code> 命令</strong>：新增 <code>unlink</code> 命令，异步删除键。</li><li><strong>memory 命令</strong>：提供内存监控和统计。</li><li><strong>RDB-AOF 混合持久化格式</strong>：结合 <code>RDB</code> 和 <code>AOF</code> 优点。</li><li><strong>Redis Cluster 兼容 NAT 和 Docker</strong>。</li></ul><h3 id="_4-6-redis-5-0-2018-年发布" tabindex="-1"><a class="header-anchor" href="#_4-6-redis-5-0-2018-年发布"><span>4.6.Redis 5.0 (2018 年发布)</span></a></h3><ul><li><strong>流数据类型</strong>：新增 <code>stream</code> 数据类型。</li><li><strong>新的 Redis 模块 API</strong>：包括定时器、集群和字典 <code>API</code>。</li><li><strong>RDB 支持存储 LFU 和 LRU 信息</strong>。</li><li><strong>集群管理器迁移至 C 语言</strong>：从 <code>redis-trib.rb</code> 移植到 <code>redis-cli</code>。</li><li><strong>新增有序集合命令</strong>：<code>zpopmin</code>、<code>zpopmax</code> 及其阻塞变体。</li><li><strong>升级 Active Defragmentation 到 v2 版本</strong>。</li><li><strong>HyperLogLog 优化</strong>。</li><li><strong>内存统计报告增强</strong>。</li><li><strong>client unblock 命令</strong>。</li><li><strong>弃用“slave”术语</strong>，改用“replica”。</li><li><strong>Lua 脚本优化</strong>：支持跨副本执行，并且可以超时。</li></ul><h3 id="_4-7-redis-6-0-2020-年发布" tabindex="-1"><a class="header-anchor" href="#_4-7-redis-6-0-2020-年发布"><span>4.7.Redis 6.0 (2020 年发布)</span></a></h3><ul><li><strong>多线程 IO</strong>：仅用于处理网络数据的读写和协议解析，命令执行仍为单线程。</li><li><strong>client-side-caching（客户端缓存）功能</strong>。</li><li><strong>支持 RESP 3</strong>：在兼容 RESP 2 的基础上引入 RESP 3 协议。</li><li><strong>连接支持 SSL</strong>：增强安全性。</li><li><strong>增强 ACL 权限控制</strong>：细化对命令和键的操作权限控制。</li><li><strong>Redis 集群代理模块</strong>：Redis Cluster Proxy。</li><li><strong>提升 RDB 加载速度</strong>。</li></ul><h3 id="_4-8-redis-7-0-2022-年发布" tabindex="-1"><a class="header-anchor" href="#_4-8-redis-7-0-2022-年发布"><span>4.8.Redis 7.0 (2022 年发布)</span></a></h3><ul><li><strong>AOF 存储方式优化</strong>：改为在一个文件夹下存储多个文件。</li><li><strong>RDB 版本更新为 10</strong>：不再与旧版本兼容。</li><li><strong>ziplist 转 listpack</strong>：在读取旧的 RDB 文件或主节点复制文件时进行转换。</li><li><strong>配置更改</strong>：<code>protected-mode</code> 默认开启，防止未授权连接。</li><li><strong>ACL 中 pub/sub 频道默认阻塞</strong>。</li><li><strong>TTL 时间标识</strong>：从节点 TTL 时间标识为绝对时间。</li><li><strong>不再支持 gopher 协议</strong>。</li><li><strong>配置 <code>replica-serve-stale-data=no</code> 时，主节点不可用时 <code>ping</code> 命令不返回值</strong>。</li></ul><hr><p>File not found</p>',35)]))}const c=o(d,[["render",r]]),a=JSON.parse('{"path":"/1.%E7%BC%96%E7%A0%81%E4%BF%AE%E5%85%BB/4.%E6%8C%81%E4%B9%85%E5%AD%98%E5%82%A8/redis/cilf6vda/","title":"先导课程","lang":"zh-CN","frontmatter":{"createTime":"2025/04/24 16:09:13","permalink":"/1.编码修养/4.持久存储/redis/cilf6vda/","title":"先导课程","description":"1.Redis 的概念 Redis 是一种开源的内存数据库，用于存储数据结构，例如字符串、哈希表、列表、集合、有序集合等。它被设计为快速、灵活，并支持多种数据结构的操作。Redis 通常用作缓存、消息代理、会话存储等用途。它支持多种编程语言，并有许多客户端库可供开发者使用。Redis 也有持久化选项，可以将数据保存到磁盘上，以便在重启时恢复数据。 2....","head":[["meta",{"property":"og:url","content":"https://limou3434.github.io/work-blog-website/work-blog-website/1.%E7%BC%96%E7%A0%81%E4%BF%AE%E5%85%BB/4.%E6%8C%81%E4%B9%85%E5%AD%98%E5%82%A8/redis/cilf6vda/"}],["meta",{"property":"og:site_name","content":"缡墨"}],["meta",{"property":"og:title","content":"先导课程"}],["meta",{"property":"og:description","content":"1.Redis 的概念 Redis 是一种开源的内存数据库，用于存储数据结构，例如字符串、哈希表、列表、集合、有序集合等。它被设计为快速、灵活，并支持多种数据结构的操作。Redis 通常用作缓存、消息代理、会话存储等用途。它支持多种编程语言，并有许多客户端库可供开发者使用。Redis 也有持久化选项，可以将数据保存到磁盘上，以便在重启时恢复数据。 2...."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-30T12:08:04.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-30T12:08:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"先导课程\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-30T12:08:04.000Z\\",\\"author\\":[]}"]]},"headers":[],"readingTime":{"minutes":8.36,"words":2508},"git":{"updatedTime":1746014884000,"contributors":[{"name":"limou3434","username":"limou3434","email":"898738804@qq.com","commits":7,"avatar":"https://avatars.githubusercontent.com/limou3434?v=4","url":"https://github.com/limou3434"}]},"autoDesc":true,"filePathRelative":"notes/1.编码修养/4.持久存储/redis/000_ljp_2024_04_13_先导课程.md","categoryList":[{"id":"4358b5","sort":10000,"name":"notes"},{"id":"557f7c","sort":1,"name":"编码修养"},{"id":"8ba8e4","sort":4,"name":"持久存储"},{"id":"5710ca","sort":10001,"name":"redis"}],"bulletin":true}');export{c as comp,a as data};
