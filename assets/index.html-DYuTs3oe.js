import{_ as i,c,b as d,o as s}from"./app-DcSFSDZX.js";const o="/work-blog-website/assets/1716977937215-mJaoD8st.jpg",a="/work-blog-website/assets/1717219621741-CebAsNE4.jpg",n="/work-blog-website/assets/1717236869578-D1P3uaop.jpg",t={};function p(l,e){return s(),c("div",null,e[0]||(e[0]=[d('<h2 id="_1-协议结构" tabindex="-1"><a class="header-anchor" href="#_1-协议结构"><span>1.协议结构</span></a></h2><p>以太网实际上就是一种局域网技术，全称以太网协议。本身不是一种具体的网络，而是一种技术标准。除了以太网，还可以使用无线局域网（<code>Wi-Fi</code>）、令牌环（<code>Token Ring</code>）等技术来搭建局域网，实现设备之间的网络通信。</p><p>另外，由于十分接近网络的具体实现，以太网协议除了软件方面的规定（也就是帧格式），还制定了一些物理规定，例如必须使用双绞线（起始就是带有水晶头的电脑网线）来搭建局域网，传输速率规定分级为 <code>10M、100M、1000M</code> 等。</p><p>同样，您需要带着 <strong>如何保证数据交付给下一个主机</strong> 的目的去看待以太协议。</p><p>以太网协议是一种链路层的协议，其对应的软件规定主要是对以太网的帧格式规定，帧格式如下：</p><figure><img src="'+o+`" alt="1716977937215" tabindex="0" loading="lazy"><figcaption>1716977937215</figcaption></figure><p>这里的目的地址和源地址填写的是 <code>MAC</code> 地址（物理地址），用于识别数据链路层中相邻的节点，不使用 <code>ip</code> 的主要原因是为了概念解耦。而类型（可填入 <code>0800\\0806\\8035</code> 类型）是由上层协议决定的，用于进行不同网络协议的交付。数据字段中主要填充 <code>IP</code> 报文，当然也可以是网络层的其他协议报文。</p><h2 id="_2-封装分离" tabindex="-1"><a class="header-anchor" href="#_2-封装分离"><span>2.封装分离</span></a></h2><p>其解包过程很简单，报头也是定长的，很容易分离和交付，同时还需要根据 <code>2</code> 字节类型来向上交付，也是类似进行指针移动填充数据来添加报头。</p><h2 id="_3-报文管理" tabindex="-1"><a class="header-anchor" href="#_3-报文管理"><span>3.报文管理</span></a></h2><p>待补充...</p><h2 id="_4-协议特点" tabindex="-1"><a class="header-anchor" href="#_4-协议特点"><span>4.协议特点</span></a></h2><h3 id="_4-1-局域网络的通信原理" tabindex="-1"><a class="header-anchor" href="#_4-1-局域网络的通信原理"><span>4.1.局域网络的通信原理</span></a></h3><h4 id="_4-1-1-通信原理" tabindex="-1"><a class="header-anchor" href="#_4-1-1-通信原理"><span>4.1.1.通信原理</span></a></h4><p><code>mac</code> 地址是在网卡中独有的一串数字序列，每个网卡携带的 <code>mac</code> 地址是全球唯一的（但是不排除某些虚拟机可以虚拟一个虚拟 <code>mac</code> 地址）。使用 <code>ifconfig</code> 就可以看到使用 <code>:</code> 分割的 <code>mac</code> 地址，一般是一个网卡对应一个不变的 <code>mac</code> 地址。</p><p>通常 <code>mac</code> 地址由 <code>6</code> 组一字节的二进制数字构成，常用冒号（<code>:</code>）或短横线（<code>-</code>）分隔，每组都是十六进制表示法则。</p><details class="hint-container details"><summary>详情</summary><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">00:1A:2B:3C:4D:5E</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">或</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">00-1A-2B-3C-4D-5E</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p><code>mac</code> 地址分为两个部分：</p><ul><li><strong>OUI（组织唯一标识符）</strong>：前 <code>24</code> 位（前 <code>3</code> 字节）：由 IEEE 分配给设备制造商，标识制造商的唯一标识，<code>00:1A:2B</code> 表示某个特定厂商（如 <code>Intel、Cisco</code>）。</li><li><strong>NSI（设备标识）</strong>：后 <code>24</code> 位（后 <code>3</code> 字节）：由设备制造商分配，用于唯一标识该厂商生产的设备，<code>3C:4D:5E</code> 表示设备的具体编号。</li></ul><p><code>mac</code> 地址为路由转发提供依据，<code>ip</code> 地址只是标识源地址和目的地址，而 <code>mac</code> 是报文传输过程中上一站和下一站的地址。<code>mac</code> 地址会根据路由转发的变化而常常变化，但是 <code>ip</code> 地址保存不变，这两套地址本身并不冲突，甚至可以说因为两者是两个层中解耦开的概念，所以两者毫无关系。</p><p>我们先考虑在一个局域网中的通信，局域网中的一个计算机发送以太报文后，所有的计算机都会收到广播消息，但是只有对应 <code>mac</code> 地址的计算机会对报文进行接受（其他计算机都会解包报文进行，发现目的 <code>mac</code> 地址和自己不符合就直接进行丢弃，上层感知不到就会认为计算机根本没有收到数据）。对应 <code>mac</code> 地址的计算机在收到报文后，解包以太报文后，根据 <code>IP</code> 头中的 <code>8</code> 位协议类型交给对应的 <code>TCP/UDP</code>，因此在一直向上解包直到应用层得到需要的数据即可。而如果这个过程逆向来看，就是一个返回消息的过程。</p><div class="hint-container important"><p class="hint-container-title">重要</p><p>补充：但是有些网卡是可以通过设置“混杂模式”来获取所有的报文，对所有以太报文都不进行丢弃，这也是一些抓包工具的原理。</p></div><h4 id="_4-1-2-碰撞域" tabindex="-1"><a class="header-anchor" href="#_4-1-2-碰撞域"><span>4.1.2.碰撞域</span></a></h4><p>但上述的通信方案是带有漏洞的，网络中会有大量的数据在同时发送（相对于在喧嚣的人群中进行 <code>1</code> 对 <code>1</code> 交流），这个时候就会出现数据碰撞问题。首先我们把一个可能发送碰撞的局域网称为一个 <strong>碰撞域</strong>。</p><h4 id="_4-2-3-碰撞算法" tabindex="-1"><a class="header-anchor" href="#_4-2-3-碰撞算法"><span>4.2.3.碰撞算法</span></a></h4><p>那发送机器和接受机器怎么察觉到碰撞的诞生呢？并且如何避免更大的碰撞呢？这就需要谈到碰撞检测算法和碰撞避免算法。</p><p>一旦检测出碰撞，就会发送主机就会休眠一段时间，等待网络不再过堵再进行发送。而局域网实际上就是一份共享资源，因此这个过程看起来有点像加锁，因此避免碰撞的思路和锁的思路有些类似，这里的解决方案就是试探，碰撞了就再试直到成功。</p><div class="hint-container note"><p class="hint-container-title">注</p><p>吐槽：因此局域网如果太大，出现碰撞的概率就越大，从这里也可以看出运营商硬件的强大之处。</p></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>注意：关于碰撞检测算法和碰撞避免算法，您也可以前去了解一下，这里不展开细讲...</p></div><h4 id="_4-2-4-碰撞划分" tabindex="-1"><a class="header-anchor" href="#_4-2-4-碰撞划分"><span>4.2.4.碰撞划分</span></a></h4><p>另外，网络中还有一种叫做 <strong>交换机</strong> 的桥接设备，可以做到在同一个局域网中，只将数据包发送到通局域网内的目标设备，拦截下发送到其他地方的广播报文，因此可以减少网络流量，避免造成碰撞的垃圾数据在广大的网络中进行扩散。因此交换机的最大作用就在于划分碰撞域，减少碰撞的概率，避免网络拥塞产生的干扰。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>注意：关于交换机，您也可以前去了解一下，这里不展开细讲...</p></div><h4 id="_4-2-5-碰撞洪泛" tabindex="-1"><a class="header-anchor" href="#_4-2-5-碰撞洪泛"><span>4.2.5.碰撞洪泛</span></a></h4><p>局域网数据帧发送的时候。越长越好还是越短越好？两者都不好，太长容易发生碰撞，太短传输效率变低。因此一般会规定一个数据长度最小是 <code>46</code> 字节，最大字节未 <code>1500</code> 字节，不够 <code>46</code> 字节也需要补充位。这个数据也就是 <code>mtu(最大传输单元)</code> 的范围，之前网络层的时候我有简单提及过，这也导致了上述数据如果需要避免过多的碰撞就需要对数据大小进行限定，出现 <code>TCP</code> 传输报文的 <code>mss(最大段尺寸)</code> 规定。</p><div class="hint-container important"><p class="hint-container-title">重要</p><p>补充：不同主机设定的 <code>mss</code> 可能不太一样，因此早在三次握手中发送 <code>SYN(TCP连接类型报文)</code> 的时候，双方会得知各自的 <code>mss</code> 值，协商选择较小的作为最终 <code>mss</code> 的值，这个值最终会包含在 <code>tcp</code> 报文的选项中。</p></div><p>如果我们绕过数据链路层的碰撞避免算法，就会导致一台主机不会因为碰撞进入休眠，而是不断发送数据，这个时候就是为了碰而碰，就会导致“碰撞洪泛（<code>Collision Flooding</code>）”的攻击。</p><h3 id="_4-2-mac-地址更替和-arp-协议" tabindex="-1"><a class="header-anchor" href="#_4-2-mac-地址更替和-arp-协议"><span>4.2.Mac 地址更替和 ARP 协议</span></a></h3><h4 id="_4-2-1-arp-协议结构" tabindex="-1"><a class="header-anchor" href="#_4-2-1-arp-协议结构"><span>4.2.1.ARP 协议结构</span></a></h4><p>在网络转化过程中，<code>ip</code> 地址不变，<code>mac</code> 地址会发生变化么？会的，并且变化很快！但是下一跳的 <code>mac</code> 地址是怎么获取呢？这就有点小 <code>bug</code> 了，发送端的 <code>源mac</code> 地址还无所谓很容易获取，但是下一跳的 <code>目的mac</code> 地址怎么获取呢？如果没有 <code>目的mac</code> 地址就没有办法对以太报文进行封装。</p><p>首先每台网络设备都有自己的 <code>mac</code> 地址，一个报文到达某个硬件后，源 <code>mac</code> 地址会被替换为这个地址，但是目的 <code>mac</code> 地址怎么办呢？这就会涉及到 <code>ARP</code> 协议了。<code>ARP</code> 协议是在链路层和网络层之间的协议。我们虽然没有 <code>mac</code> 地址，但是有需要发送的目标 <code>ip</code> 地址（因为需要用到 <code>ip</code> 地址，所以说是介于两者之间）。因此我们就需要在同一个网段中，通过目标 <code>ip</code> 解析出 <code>目标mac</code> 地址。而对应的解析协议就是 <code>ARP</code> 协议，也就是地址解析协议（局域网协议）。</p><p>只有通过 <code>ARP</code> 协议解析得到目的 <code>mac</code> 地址，才能成功封装以太报文。</p><div class="hint-container important"><p class="hint-container-title">重要</p><p>补充：实际上这个协议可以算是一种子协议（以太网协议中有一个帧类型协议，就可以填入这种协议类型）。</p></div><figure><img src="`+a+`" alt="1717219621741" tabindex="0" loading="lazy"><figcaption>1717219621741</figcaption></figure><p>上图就是以太报文中 <code>28</code> 字节的 <code>ARP</code> 请求/响应报文，因此 <code>ARP</code> 协议其实是链路层和网络层中间的一种协议。</p><ul><li><code>2</code> 位的硬件类型指链路层网络类型，以太网就是 <code>1</code>，也可能是其他值</li><li><code>2</code> 位协议类型指要转化的地址类型，如果填入 <code>0x0800</code> 则表示要把 <code>ip</code> 地址转化为 <code>mac</code> 地址，也可能是其他值</li><li><code>1</code> 位硬件地址长度对于以太网来说是 <code>6</code> 字节的 <code>mac</code> 地址长度</li><li><code>1</code> 位协议地址长度对于 <code>ip</code> 地址来说是 <code>4</code> 字节的 <code>ip</code> 地址长度</li><li><code>2</code> 位 <code>op</code> 字段若为 <code>1</code> 就是 <code>arp</code> 请求，为 <code>2</code> 代表 <code>arp</code> 应答。任何主机都可以发送 <code>arp</code> 请求，也可能接收到别人的 <code>arp</code> 请求，亦或者是别人的应答，因此可以使用 <code>op</code> 来进行请求和响应区别</li><li>剩下的地址都比较简单明了，这里不详说</li></ul><div class="hint-container important"><p class="hint-container-title">重要</p><p>[!IMPORTANT]</p><p>补充：如果主机 <code>A</code> 向主机 <code>B</code> 发生 <code>IP</code> 报文，途中经过了 <code>n</code> 个路由器，那么 <code>ARP</code> 解析调用了 <code>n+1</code> 次。因为一次 <code>ARP</code> 是为了解决找到下一跳（路由器）的问题，找到最后一个路由器时，这个路由器一定和主机 <code>B</code> 处于同一个局域网中，最后这个路由器不需要依靠 <code>mac</code> 地址，直接依靠自己分配给主机 <code>B</code> 的 <code>ip</code> 地址就可以把报文发送给主机 <code>B</code>（这个过程中肯定是直接知道主机 <code>B</code> 的 <code>mac</code> 地址的），不需要依赖 <code>ARP</code> 再次做解析。</p></div><div class="hint-container important"><p class="hint-container-title">重要</p><p>[!IMPORTANT]</p><p>补充：两个 <code>ip</code> 地址匹配的意思是指在一个网络号中，这种情况下使用相同的掩码可以得到同一个网络号，这种情况下两个 <code>ip</code> 地址处于一个子网中。</p></div><h4 id="_4-2-2-arp-解析过程" tabindex="-1"><a class="header-anchor" href="#_4-2-2-arp-解析过程"><span>4.2.2.ARP 解析过程</span></a></h4><p><strong>对于请求</strong>，发送端的 <code>源mac</code> 地址和发送端 <code>源ip</code> 地址对发送端来说很容易获取，并且也可以从上层知道 <code>目标ip</code> 地址，这三个地址都可以直接填入上述 <code>arp</code> 报文中的对应字段中。但是 <code>目标mac</code> 地址暂时无法得知，因此会被设置为全 <code>f</code>（也就是比特位全置为 <code>1</code>，这是相当于一个广播地址）。并且把 <code>op</code> 字段设置位 <code>1</code>，设置好两个长度和两个类型。然后开始进一步封装为以太报文，还记得以太报头中的帧类型么？除了填写 <code>0800</code> 的 <code>IP</code> 类型，还可以填写 <code>0806</code> 噢！代表以太报文的正文内容不是 <code>ip</code> 而是 <code>arp</code>。而以太报头中的 <code>源mac</code> 地址发送端也是只知道的，<code>目的mac</code> 地址也是填写全 <code>f</code>。到此就封装了一个以太报文，由于 <code>目的mac</code> 地址是广播地址，这就代表同局域网中的网络设备都会收到这个以太报文。</p><p><strong>对于响应</strong>，收到广播的以太报文后，对应的网络设备先检查 <code>op</code> 字段，先各自在内部进行向上交付，查看 <code>op</code> 字段是否为 <code>arp</code> 请求，若是且 <code>arp</code> 请求中的 <code>目的端ip</code> 就是自己，则开始封装 <code>arp</code> 响应（不满足这两个条件就把报文在 <code>arp</code> 层就直接进行丢弃）。把自己的 <code>mac</code> 地址作为 <code>目的mac</code> 填充回 <code>arp</code> 报文中的 <code>6</code> 位 <code>目的端mac</code> 地址后，再做 <code>ip</code> 封装进行 <code>1对1</code> 应答来返回（因为此时的报文四个地址都是清晰明了的，可以直接发送给目标设备）。此时发送请求的主机收到 <code>arp</code> 响应后，先看 <code>op</code> 查看是否为响应，然后检查 <code>arp</code> 报文中的 <code>发送端ip</code> 地址和自己本机的 <code>ip</code> 地址是否相同，相同就收到该响应，此时就相对于获取到了 <code>目的端mac</code> 地址。</p><p><strong>缓存映射</strong>，是不是每次发送都需要进行 <code>ARP</code> 解析呢？其实 <code>ARP</code> 解析成功后，会暂时将 <code>ip/mac</code> 的关系保存为一个缓存映射表（每次都保存最新的映射条目），以后请求相同的 <code>ip</code> 时就可以直接加载 <code>mac</code> 地址，这样就可以提高解析效率。不过这种存储是有时间限制的（不过缓存的时间其实也比较长，可以以小时为单位），其原因是再 <code>mac</code> 地址中，有些节点可能会下线，导致 <code>mac</code> 节点网络发生变动，此时可能需要重新解析 <code>ip/mac</code> 的关系，并且也有可能该主机下线后主动发送自己的 <code>mac</code> 地址暂时下线的报文，通知所有缓存该 <code>mac</code> 和对应 <code>ip</code> 条目的主机删除该条目。</p><p>上述过程就是较为完整的一次 <code>ARP</code> 解析 <code>目的端ip</code> 地址向 <code>目的端mac</code> 地址过程，多次解析后会对多条映射缓存。而这个过程不仅仅是在一个局域网中解析完成，还可以解析路由器的 <code>目的ip</code>，解析出其对应的 <code>mac</code> 地址，最终可以把数据发送给该路由器。而在路由器在转发给其他组建子网的路由器时，路由器之前也可能发生 <code>ARP</code> 解析，进而达到跨域解析的效果。</p><div class="hint-container important"><p class="hint-container-title">重要</p><p>补充：上面报文图中，以太协议报头和 <code>arp</code> 中报文中的字段会重复冲突么？答案是不会，这是合理的行为。一方面是为了分层解耦，另一方面是因为以太协议报头中的地址主要是为了报文的传输发送，<code>arp</code> 报文中的地址主要是为了等待填充 <code>mac</code> 地址。两者的作用不同，重复也是没办法的事。</p></div><div class="hint-container important"><p class="hint-container-title">重要</p><p>补充：如果想获取一下自己局域网络中的所有 <code>mac</code> 地址会怎么做？很简单，只需要 <code>ping</code> 所有的 <code>私网ip</code> 地址即可，<code>ping</code> 的时候其实就会自动执行 <code>ARP</code> 的过程（注意 <code>PING</code> 的底层是 <code>ICMP</code> 网络层报文，<code>ARP</code> 只是辅助而已）。</p><details class="hint-container details"><summary>详情</summary><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 获取所有 mac 地址的 shell 脚本(bash)</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">cnt</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">1</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">while</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> $cnt</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -le</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 254</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ];</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> do</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  ping</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -c</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">您所在的网络号.$cnt</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> # 最后一个 cnt 其实是主机号</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  let</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> cnt++</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">done</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>而如果使用 <code>cmd</code>，可以使用下面的脚本。</p><details class="hint-container details"><summary>详情</summary><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 获取所有 mac 地址的 shell 脚本(cmd)</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">@echo</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> off</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">setlocal</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> enabledelayedexpansion</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">set</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> cnt=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">:loop</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">ping</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -n</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">您所在的网络号.%cnt%</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">set</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /a</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> cnt+=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">goto</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> loop</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">endlocal</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>然后在命令行中使用 <code>arp -a</code> 即可获取所有的 <code>mac</code> 地址。</p></div><div class="hint-container important"><p class="hint-container-title">重要</p><p>补充：以太报头中还有一种类型是 <code>RARP</code> 协议，其实就是 <code>RAP</code> 的逆向过程，通过 <code>mac</code> 地址获取 <code>ip</code> 地址，不过这种类型的解析比较简单，有 <code>mac</code> 地址是很容易获取 <code>ip</code> 地址的，因为我们有之前做 <code>RAP</code> 解析的缓存表。</p></div><div class="hint-container important"><p class="hint-container-title">重要</p><p>补充：一种成为中间人的方案</p><p>如何通过 <code>ARP</code> 攻击，让自己成为攻击人呢？如果主机 <code>C</code> 一直向主机 <code>B</code> 发送大量的 <code>ARP</code> 应答，又向主机 <code>A</code> 发送大量的 <code>ARP</code> 应答，最后中间人既做 <code>A</code> 又作 <code>B</code>。由于主机中的映射缓存只会存储最新的映射条目，因此就有可能被中间人所欺骗。</p><figure><img src="`+n+'" alt="1717236869578" tabindex="0" loading="lazy"><figcaption>1717236869578</figcaption></figure><p>因此可能会出现 <code>ARP</code> 中间人的两种攻击：</p><ol><li><strong>ARP 欺骗（ARP Spoofing）</strong>：攻击者发送虚假的 <code>ARP</code> 响应，将受害者发送到目标主机的流量重定向到攻击者控制的设备上，导致用户数据发生窃取。</li><li><strong>ARP 投毒（ARP Poisoning）</strong>：攻击者发送虚假的 <code>ARP</code> 响应，将合法的 <code>ARP</code> 缓存条目替换为攻击者控制的设备的 <code>MAC</code> 地址，导致用户主机被迫下线。</li></ol><p>当然在有 <code>https</code> 协议的帮助下数据还是不会被直接篡改和获取的，但是还是会影响到上网情况，导致主机被迫下线。<strong>这里需要强调，不要使用这一项技术对应的工具做违法乱纪的事情！</strong></p><p>不过也不必过于担心，在一些交换机上，可以启用 <strong>MAC 地址过滤</strong>，限制只有特定的 <code>MAC</code> 地址能够接入网络，这种方法可以有效防止未授权设备通过伪造 <code>MAC</code> 地址加入网络。</p></div><h2 id="_5-协议目的" tabindex="-1"><a class="header-anchor" href="#_5-协议目的"><span>5.协议目的</span></a></h2><p>以太协议依靠 <code>mac</code> 地址传递报文数据，其逐跳的目的就是为了保证数据交付给下一个主机。</p><div class="hint-container caution"><p class="hint-container-title">警告</p><p>警告：从这一层我们可以注意到 <code>IP</code> 是链路层以上的概念，端口号是传输层以上的概念（后面的层级完全不关心这个概念），<code>MAC</code> 是链路层的概念，造成这种现象的原因其实就是分层解耦，但是又有些概念不得不“藕断丝连”的结果。因此有些数据传输是不依赖端口号的，甚至连 <code>IP</code> 都不需要...</p></div>',59)]))}const h=i(t,[["render",p]]),k=JSON.parse('{"path":"/1.%E7%BC%96%E7%A0%81%E4%BF%AE%E5%85%BB/3.%E7%B3%BB%E7%BB%9F%E7%BD%91%E7%BB%9C/jxzz8513/","title":"链路层","lang":"zh-CN","frontmatter":{"createTime":"2025/04/09 23:31:29","permalink":"/1.编码修养/3.系统网络/jxzz8513/","title":"链路层","description":"1.协议结构 以太网实际上就是一种局域网技术，全称以太网协议。本身不是一种具体的网络，而是一种技术标准。除了以太网，还可以使用无线局域网（Wi-Fi）、令牌环（Token Ring）等技术来搭建局域网，实现设备之间的网络通信。 另外，由于十分接近网络的具体实现，以太网协议除了软件方面的规定（也就是帧格式），还制定了一些物理规定，例如必须使用双绞线（起始...","head":[["meta",{"property":"og:url","content":"https://limou3434.github.io/work-blog-website/work-blog-website/1.%E7%BC%96%E7%A0%81%E4%BF%AE%E5%85%BB/3.%E7%B3%BB%E7%BB%9F%E7%BD%91%E7%BB%9C/jxzz8513/"}],["meta",{"property":"og:site_name","content":"缡墨"}],["meta",{"property":"og:title","content":"链路层"}],["meta",{"property":"og:description","content":"1.协议结构 以太网实际上就是一种局域网技术，全称以太网协议。本身不是一种具体的网络，而是一种技术标准。除了以太网，还可以使用无线局域网（Wi-Fi）、令牌环（Token Ring）等技术来搭建局域网，实现设备之间的网络通信。 另外，由于十分接近网络的具体实现，以太网协议除了软件方面的规定（也就是帧格式），还制定了一些物理规定，例如必须使用双绞线（起始..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-19T14:21:17.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-19T14:21:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"链路层\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-19T14:21:17.000Z\\",\\"author\\":[]}"]]},"headers":[],"readingTime":{"minutes":15.18,"words":4554},"git":{"updatedTime":1745072477000,"contributors":[{"name":"limou3434","username":"limou3434","email":"898738804@qq.com","commits":6,"avatar":"https://avatars.githubusercontent.com/limou3434?v=4","url":"https://github.com/limou3434"}]},"autoDesc":true,"filePathRelative":"notes/1.编码修养/3.系统网络/024_ljp_2024_03_28_链路层.md","categoryList":[{"id":"4358b5","sort":10000,"name":"notes"},{"id":"557f7c","sort":1,"name":"编码修养"},{"id":"7ab59a","sort":3,"name":"系统网络"}],"bulletin":true}');export{h as comp,k as data};
