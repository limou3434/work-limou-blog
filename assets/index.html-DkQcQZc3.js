import{_ as k,c as e,b as n,d as h,a as i,e as a,r as p,o as t}from"./app-DcSFSDZX.js";const d="/work-blog-website/assets/image-20240215165837379-BaWv-HpJ.png",r="/work-blog-website/assets/v2-4756b0e589e9bec596fc67b894c94631_r-BbO4c8JV.jpg",g="/work-blog-website/assets/image-20240614211814781-C0gnJnnW.png",c="/work-blog-website/assets/image-20240614212228829-Dg3sUXU2.png",y="/work-blog-website/assets/image-20240615105054519-B5z_AiqT.png",A="/work-blog-website/assets/image-20240615105215350-DER9kLc9.png",o="/work-blog-website/assets/image-20240615112644904-C2cfcGWL.png",D="/work-blog-website/assets/image-20240615112829577-Dz-87YwM.png",B="/work-blog-website/assets/image-20240615112855192-BsGRICN2.png",v="/work-blog-website/assets/image-20240615113122649-DFxkpGem.png",u="/work-blog-website/assets/image-20240615113152918-_sU1kpPc.png",C="/work-blog-website/assets/image-20240615113618481-DdDXKFxk.png",m="/work-blog-website/assets/image-20240615114118628-llLZQzhR.png",b="/work-blog-website/assets/image-20240615114243354-mFfmktGt.png",f="/work-blog-website/assets/image-20240615114721868-B65XnQrH.png",E="/work-blog-website/assets/image-20240615114925354-B-PQHl6E.png",F="/work-blog-website/assets/image-20240615115033876-D-k8_4ur.png",_="/work-blog-website/assets/image-20240615115042427-DRzGV2y8.png",x="/work-blog-website/assets/image-20240615115102951-CYfkNqd2.png",q="/work-blog-website/assets/image-20240615115504363-BNnZC4O7.png",w="/work-blog-website/assets/image-20240615115636261-B_94dCCU.png",L="/work-blog-website/assets/image-20240125200952073-BQ8jqvDL.png",M="/work-blog-website/assets/image-20240614094403060-DWI9Fz6q.png",O="/work-blog-website/assets/image-20240614093136668-DZcCf-en.png",I="/work-blog-website/assets/image-20240614093352549-D04Zkmoh.png",z="/work-blog-website/assets/image-20240614105104366-BA5A3q57.png",T="/work-blog-website/assets/image-20240614110254057-Dzl4k4Bz.png",N="/work-blog-website/assets/image-20240614111756697-wXorYTiu.png",R="/work-blog-website/assets/image-20240614121308987-BEgjajl-.png",U="/work-blog-website/assets/image-20240614121431419-DxeePh_4.png",G="/work-blog-website/assets/image-20240614121525547-Dr39e3Xo.png",S="/work-blog-website/assets/image-20240614121644583-BsuFhWn_.png",P="/work-blog-website/assets/image-20240614121748836-CL-OU41f.png",W="/work-blog-website/assets/image-20240614121929643-ldI31N8z.png",Y="/work-blog-website/assets/image-20240614122116647-CKOR2z2Z.png",J="/work-blog-website/assets/image-20240614122137441-CXH_dIfU.png",Z="/work-blog-website/assets/image-20240614122316298-y3mVVI2B.png",K="/work-blog-website/assets/image-20240614122333876-B1uSeQQd.png",$="/work-blog-website/assets/image-20240614122932730-CRT5cVnh.png",H="/work-blog-website/assets/image-20240614123239927-CuJRTDr8.png",V="/work-blog-website/assets/image-20240614130339082-hZ1dKK5v.png",Q="/work-blog-website/assets/image-20240614131129469-BXaZe7Hi.png",X="/work-blog-website/assets/image-20240614131301594-Ifo7uezj.png",j="/work-blog-website/assets/image-20240614131433546-BnHPO-IK.png",ss="/work-blog-website/assets/image-20240614131527058-BsK-Qb5g.png",is="/work-blog-website/assets/image-20240614131608530-D6tbBhB_.png",as={};function ns(ls,s){const l=p("Mermaid");return t(),e("div",null,[s[3]||(s[3]=n(`<h2 id="_1-文件概念" tabindex="-1"><a class="header-anchor" href="#_1-文件概念"><span>1.文件概念</span></a></h2><h3 id="_1-1-文件读写" tabindex="-1"><a class="header-anchor" href="#_1-1-文件读写"><span>1.1.文件读写</span></a></h3><p>在谈及系统接口之前，我们先来从 <code>C</code> 语言的角度来谈及一些前要知识，以辅助我们后续来理解系统 <code>IO</code>。</p><p>我们知道，在 <code>C</code> 语言中，有很多用于文件输入输出的接口。</p><blockquote><p>补充：<code>C/C++</code> 程序会默认打开三个文件流：标准输入、标准输出、标准错误，这也就是为什么在没有手动打开（<code>open</code>）键盘和显示器的情况下，却依旧可以使用 <code>printf()</code>、<code>scanf()</code>、<code>cout</code> 的原因...</p></blockquote><p>但是这一操作很奇怪，中间省略了很多步骤，文件是谁在访问呢？操作系统吗？太宽泛了，让我们再思考一下：</p><ol><li>我们先写一个包含打开文件接口的 <code>C</code> 代码</li><li>经过编译生成可执行程序、运行程序加载到内存中转化为进程</li><li>这就相当于，进程在访问文件</li><li>而文件又放在磁盘上（因此在本系列中，最后需要提及磁盘的相关概念）</li><li>进程通过一些系统接口，在磁盘上访问文件</li></ol><blockquote><p>补充：而我们之前在代码中使用的接口都是语言级别的接口（对系统接口进行了封装，好用是好用了，但是每一种语言都会做不同的封装，但是如果直接使用文件接口，写出来的系统代码不具备跨平台性）。因此最后，我们需要学习一些系统调用。</p></blockquote><p>在 <code>C</code> 语言中，使用 <code>fopen()</code> 打开文件，然后使用 <code>fread()</code> 读取文件，就是读到了进程内部，进程早就被加载到内存的内部，因此就是把文件读到内存里（<code>input</code>），然后通过 <code>fwrite()</code> 等接口将数据写入到磁盘文件中（<code>output</code>）。</p><p>而 <code>input</code> 和 <code>output</code> 统称为文件的 <code>IO</code> 操作。</p><h3 id="_1-2-文件分类" tabindex="-1"><a class="header-anchor" href="#_1-2-文件分类"><span>1.2.文件分类</span></a></h3><p>文件实际上也有狭义和广义之分，上述提及的文件是狭义上的文件。对于系统来说：</p><ul><li>狭义文件：存储在磁盘上的资源、数据叫做文件</li><li>广义文件：上几乎所有的外设，只要具有 <code>input</code> 和 <code>output</code> 特点的都可被称为文件</li></ul><p>还可以根据文件是否被打开（被读取到内存中）这一状态，分为：</p><ul><li>内存文件，已经被加载到内存中，随时会被进程读取修改，是动态的（我们先探讨内存文件，到文章后半段再谈及磁盘文件）</li><li>磁盘文件，存储在磁盘中，等待被进程加载到内存中成为内存文件，是静态的</li></ul><p>而无论是哪一种概念的文件，都具备属性和内容，对文件的操作就是操作属性和操作内容。</p><blockquote><p>补充：还可以从用户视角来根据文件是否有结构数据分类为无结构文件（例如文本文件这种流式文件）和有结构文件（例如数据库文件这种表文件）。</p></blockquote><h2 id="_2-文件接口" tabindex="-1"><a class="header-anchor" href="#_2-文件接口"><span>2.文件接口</span></a></h2><p>这里简单复习一下一些 <code>C</code> 语言文件接口，并且提及内部的底层系统调用。</p><h3 id="_2-1-c-语言文件接口" tabindex="-1"><a class="header-anchor" href="#_2-1-c-语言文件接口"><span>2.1.C 语言文件接口</span></a></h3><p>这里我给出文档链接，您可以前去复习一二...</p><ul><li><a href="https://legacy.cplusplus.com/reference/cstdio/fopen/?kw=fopen" target="_blank" rel="noopener noreferrer">fopen()</a></li><li><a href="https://legacy.cplusplus.com/reference/cstdio/fclose/?kw=fclose" target="_blank" rel="noopener noreferrer">fclose()</a></li><li><a href="https://legacy.cplusplus.com/reference/cstdio/fread/?kw=fread" target="_blank" rel="noopener noreferrer">fread()</a></li><li><a href="https://legacy.cplusplus.com/reference/cstdio/fwrite/?kw=fwrite" target="_blank" rel="noopener noreferrer">fwrite()</a></li></ul><h3 id="_2-2-linux-系统调用" tabindex="-1"><a class="header-anchor" href="#_2-2-linux-系统调用"><span>2.2.Linux 系统调用</span></a></h3><p>不同语言需要封装在不同平台的系统文件接口，以便于自己的语言可以跨平台使用。但是为了理解一些概念，我们必须对一些接口有所概念。</p><h4 id="_2-2-1-open" tabindex="-1"><a class="header-anchor" href="#_2-2-1-open"><span>2.2.1.open()</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">sys/types.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">sys/stat.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">fcntl.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> open</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char*</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> pathname</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> flags</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//路径和选项，通常这个函数用来读取比较多</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> open</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char*</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> pathname</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> flags</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> mode_t</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> mode</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//路径和选项以及模式，通常这个函数用来写入比较多</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//pathname 是指要打开文件的文件路径</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//flags 对应的选项主要有：</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//1.O_APPEND 追加</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//2.O_CREAT 文件不存在，则会根据给定文件名创建新文件。如文件已存在，则不起任何作用</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//3.O_TRUNC 如果文件存在，并且是常规文件，且打开的目的是写入，那么这个文件会被清空</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//4.O_RDONLY 表示只读、O_WRONLY 表示只写、O_RDWR 表示读和写，这三个选项必须使用一个，再配合其他关键字使用</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//5.O_CLOEXEC 在打开文件时设置 close-on-exec 标记。以 O_CLOEXEC 标志打开文件时，在调用 exec 系列函数（如 execve、execvp 等）时，该文件将自动关闭。对于在子进程中执行新程序时避免文件描述符泄漏非常有用</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//6.O_NONBLOCK 后面讲管道的时候会提到</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//其中 mode 就是文件的权限，和 linux 文件权限的二进制表示是一样的，也会受到 umask 权限掩码的影响，我们也可以调用系统接口 umask() 来设置 umask 掩码，该掩码是进程专有的。如果文件是在 open() 时创建的，则默认权限是“乱码”的权限，最好还是手动设置一下。、</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到光是头文件就需要包含三个，而且还有两个 <code>open()</code> 函数需要选择，还需要组合选择众多的 <code>flag</code>，这样就会比 <code>C</code> 语言的 <code>fopen()</code> 难用一些。</p><p>那么上面的 <code>flag</code> 宏关键字怎么组合使用呢？想要传递多个选项怎么做呢？</p><p>一个 <code>int</code> 有 <code>32</code> 个比特位，那么每一个比特位都可以表示一种状态，只需要使用位操作来组合即可，这种传递状态的方式在编码中很常见，可以使一个参数有多种可能或者选择，比如下面的代码。</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">define</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> ONE</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> 0x</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">define</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> TWO</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> 0x</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">2</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">define</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> THR</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> 0x</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">3</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> show</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> flags</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">flags </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ONE</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">one</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">flags </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> TWO</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">two</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">flags </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> THR</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">thr</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    show</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">ONE</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    show</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">ONE </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">|</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> TWO</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    show</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">ONE </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">|</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> TWO </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">|</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> THR</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因此使用 <code>open()</code> 也是使用类似的方式来组合调用不同的标志位。</p><p>那么 <code>mode</code> 参数又该怎么写呢？其实就是修改权限，配合 <code>umask()</code> 调用来使用即可，并且优先使用调用者的 <code>umask()</code>，忽略系统的 <code>umask</code> 值（但是一般建议直接使用系统的，和系统保存一致）。</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">stdio.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">sys/types.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">sys/stat.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">fcntl.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> mian</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    umask</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//设置进程专用的 umask 掩码</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> fd </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> open</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">limou.txt</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> O_WRONLY</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> 0</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">666</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">fd </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        perror</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">open</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        return</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">open success, fd: </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%d\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> fd</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//输出 3</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-2-2-close" tabindex="-1"><a class="header-anchor" href="#_2-2-2-close"><span>2.2.2.close()</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">unistd.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> close</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> fd</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>比较简单，就是关闭一个文件，将 <code>open()</code> 的返回值传入即可关闭文件。</p><h4 id="_2-2-3-read" tabindex="-1"><a class="header-anchor" href="#_2-2-3-read"><span>2.2.3.read()</span></a></h4><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">unistd.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">ssize_t</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> read</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> fd</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void*</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> buf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> size_t</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> count</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//将文件内容读取到 buf 中，ssize_t 是实际读取到的字符个数，只要有 fd 就可以读取，无需提前打开文件，后面的函数也是类似</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-2-4-write" tabindex="-1"><a class="header-anchor" href="#_2-2-4-write"><span>2.2.4.write()</span></a></h4><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">unistd.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">ssize_t</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> write</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> fd</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void*</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> buf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> size_t</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> conut</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//fd 就是打开文件返回的 fd，buf 就是需要写入的数据，count 就是写入个数，并且无需包含 &#39;\\0&#39;，因为这是 C 的字符串结尾，不是系统的字符串结尾，并且该函数在 open() 没有选择追加打开和清空文件的情况下，默认是从头开始覆盖式写入</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>我们直接来使用这些系统调用试试：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">stdio.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">sys/types.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">sys/stat.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">fcntl.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> mian</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    umask</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//设置进程专用的 umask 掩码</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> fd </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> open</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">limou.txt</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> O_WRONLY</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> 0</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">666</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//以只写目的打开文件</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">fd </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        perror</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">open</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        return</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    </span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    const</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> s </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">hello word!</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    write</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">fd</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> s</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> strlen</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">s</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">));</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//最后一个参数不用加 1</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">open success, fd: </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%d\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> fd</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//输出 3</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是上述函数的返回值是什么？这就需要提到文件描述符的概念了。</p><blockquote><p>补充 <code>1</code>：两个进程打开同一个文件，但是各有各的文件描述信息以及读写位置，互不影响，因此多个进程同时读写有可能会造成穿插覆盖的情况（缺乏原子操作，或者说：操作系统不保证文件读写具有原子性），而文件锁可以用于保护对文件当前的操作不会被打断，就算时间片轮转，因为已经对文件加锁，其他的进程也无法对文件内容进行操作，从而保护在本次文件操作过程是安全的（有机会再提）。</p><p>补充 <code>2</code>： <code>write()</code> 会就进行刷盘操作，这导致文件内容的修改直接反馈至磁盘文件系统中，当文件内容被修改时，其他使用同一个文件的进程（也是针对磁盘数据的操作），可以立即感知到修改。</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">iostream</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">sys/types.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">sys/stat.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">unistd.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">fcntl.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> path </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">./limou.txt</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">define</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> mode</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> 0</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">666</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    pid_t</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> fd </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> open</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">path</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> O_RDWR </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">|</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> O_CREAT</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> mode</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    const</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> wbuffer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1024</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">i like linux!</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    write</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">fd</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> wbuffer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> sizeof</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">wbuffer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    while</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">true</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    //在循环期间去其他 bash 下检查程序没结束之前，</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    //limou.txt 文件内是否有内容存在，结果为有，</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    //则证明 write() 操作是会刷新磁盘的，一旦刷新，</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    //该操作就会立马让所有使用 limou.txt 文件的进程感知</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    //都会知道 limou.txt 的内容和大小被修改</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    close</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">fd</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h2 id="_3-文件描述符" tabindex="-1"><a class="header-anchor" href="#_3-文件描述符"><span>3.文件描述符</span></a></h2><p>文件描述符的作用和进程 <code>ID</code> 类似，是一个文件的唯一标识符（进程是 <code>ID</code> 为唯一标识符）</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> fd1 </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> open</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">limou1.txt</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> O_WRONLY</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">|</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">O_CREAT</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">|</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">O_APPEND</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> 0</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">666</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">open success, fd1: </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%d\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> fd1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> fd2 </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> open</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">limou1.txt</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> O_WRONLY</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">|</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">O_CREAT</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">|</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">O_APPEND</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> 0</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">666</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">open success, fd2: </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%d\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> fd2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> fd3 </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> open</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">limou1.txt</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> O_WRONLY</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">|</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">O_CREAT</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">|</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">O_APPEND</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> 0</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">666</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">open success, fd3: </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%d\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> fd3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> fd4 </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> open</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">limou1.txt</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> O_WRONLY</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">|</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">O_CREAT</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">|</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">O_APPEND</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> 0</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">666</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">open success, fd4: </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%d\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> fd4</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    close</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">fd1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    close</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">fd2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    close</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">fd3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    close</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">fd4</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//输出了 3、4、5、6</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个 <code>fd</code> 返回值究竟是什么？就是所谓文件描述符，其中 <code>0</code>、<code>1</code>、<code>2</code> 这三个文件去哪里了呢？实际上分配给三个标准输入输出文件了，也就是被 <code>stdin(0)</code>、<code>stdout(1)</code>、<code>stderr(2)</code> 所占用（依照顺序占用）！</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    fprintf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">stdout</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">hello</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//使用 C 语言的文件指针 FILE 写入 stdout</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    const</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> s </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">I am limou</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    write</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> s</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> strlen</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">s</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">));</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//使用系统调用和文件描述符写入 1 号文件</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>文件描述符的分配规则非常简单：先分配最小的没有被占用的文件描述符给新打开的文件。如果我们把默认的三个标准输入输出文件使用 <code>fclose()</code> 关掉，那么新打开的文件就可以占用 <code>0</code>、<code>1</code>、<code>2</code> 中某个标识符。</p><blockquote><p>补充：在 <code>C</code> 语言下，所有的文件都具有文件指针 <code>FILE</code>。而 <code>FILE</code> 是 <code>C</code> 标准库设计的文件结构体，内部有多种成员。在系统角度只认识 <code>fd</code>，不认识 <code>FILE</code>，因此我们可以猜测：在 <code>FILE</code> 结构体内部一定封装了文件描述符 <code>fd</code>。这一点可以查看 <code>FILE</code> 结构体的成员变量的 <code>_fileno</code>（存储了文件描述符）来证明（也有可能不是这个名字，但是一定有一个文件描述符成员）。</p></blockquote><h2 id="_4-文件结构体" tabindex="-1"><a class="header-anchor" href="#_4-文件结构体"><span>4.文件结构体</span></a></h2><p>一个进程可以打开多个文件，而一个文件要被访问也必须被一起加载到内存中才能被进程访问，那如果多个进程都在打开文件怎么办？内存根本不够用！因此操作系统不可能将如此多的文件全部一次性打开，必须经过描述和管理，因此就需要构建一个文件结构体。</p><p>在内核中，为了管理被打开的文件，就必须创建一个 <code>struct file{struct file* next; struct file* prev;};</code>（不仅包含属性和数据还有更多的）结构体来描述文件，并且使用双链表链接起来组织（先描述再组织）。</p><p>每打开一个文件，就会实例化该结构体，插入到链表中，来代表一个文件。一条链表就是当前所有进程需要的被打开的文件，但是文件和进程之间怎么关联呢？靠的就是 <code>fd</code> 文件描述符，所有的 <code>fd</code> 值构成一个数组的下标，这个数组的类型就是 <code>struct file* arrary[]</code>，也就是一个指针数组，每一个指针成员都指向一个文件结构体。</p><p>这样，系统就可以在进程对象中使用 <code>fd</code> 下标来访问一个指针数组，然后找到指向的文件结构对象，进而使用该对象描述的文件。</p><p>而再上述提到的结构体内部具有成员变量，而它又是描述文件的，因此文件有大部分属性来自这个结构体，关于属性的修改就是修改这些成员变量。</p><h3 id="_4-1-文件结构" tabindex="-1"><a class="header-anchor" href="#_4-1-文件结构"><span>4.1.文件结构</span></a></h3><p>真的存在描述文件用的结构体呢？下面是 <code>Linux</code> 内核对应的源代码：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//文件结构</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">struct</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> file</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    union</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">        struct</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> list_head</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> fu_list</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">        struct</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> rcu_head</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> fu_rcuhead</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> f_u</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    struct</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> path</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> f_path</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    //...</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    const</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> struct</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> file_operations</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> f_op</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//文件方法操作集</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    //...</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    fmode_t</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> f_mode</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//文件权限</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    struct</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> fown_struct</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> f_owner</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//文件的拥有者</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    //...</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    atomic_long_t</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> f_count</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//引用计数（统计有多少个进程在打开该文件）</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    //...</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    u64 f_version</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//文件的版本</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    //...</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>内部必然包含文件的各种属性和文件内容，每创建一个文件实例化，就是描述了一个文件。除此之外，还需要提供了一个文件缓存区（也就是一段内存空间）由操作系统申请给文件，在本文后面有关于缓冲区的详细描述。</p><p>这个结构实例化后的对象和进程结构的实例化一样，都只是在内存中存在，因此准确来说，该进程是描述一个被打开的文件。</p><ul><li>所谓打开文件读数据，就是先发生缺页中断，然后将数据加载到内存（缓冲区）中，才允许进程读取文件的数据。</li><li>而写数据就是修改文件，改动内容和改动属性都是修改，也需要先将数据加载到内存（缓冲区），再进行修改。</li></ul><p>因此文件读写操作都需要加载到内存中，都是来回拷贝。</p><p>除此之外，在文件结构体中还有对文件的操作方法集，可以根据每个文件自己的缓冲区进行文件操作（这点在 <code>C</code> 语言中可以使用函数回调来实现）。</p><h3 id="_4-2-指针数组" tabindex="-1"><a class="header-anchor" href="#_4-2-指针数组"><span>4.2.指针数组</span></a></h3><p>文件标识被我们理解为数组索引，那是否真的存在这么一个“数组”来指向结构体呢？我们也可以查看一下 <code>Linux</code> 内核的源码来证明：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//指针数组</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">struct</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> files_struct</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    atomic_t</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> count</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    struct</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> fdtable </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">fdt</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    struct</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> fdtable fdtab</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    spinlock_t</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> file_lock ___cacheline_aligned_in_smp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> next_fd</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    struct</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> embedded_fd_set close_on_exec_init</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    struct</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> embedded_fd_set open_fds_init</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    struct</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> file</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> fd_array</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">NR_OPEN_DEFAULT</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">];</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//重点关注这个数组，如果是 64 位，NR_OPEN_DEFAULT = 64，32 位就是 32。</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的结构体内的 <code>fd_array[]</code> 数组就是指针数组，每一个指针成员指向一个描述文件的结构体。</p><p>但是为什么这个数组这么小呢？只能同时打开 <code>64/32</code> 个文件？实际上还有其他的拓展字段（其他成员变量）来帮助这个数组指向更多的文件，在现在的某些操作系统里，一个进程有时候可以打开的文件能达到 <code>10 000</code> 个。</p><blockquote><p>补充：因此经过上面所有知识的铺垫，我们终于可以得到更深入的结论：</p><ol><li><p><code>C</code> 语言调用 <code>fopen()</code>，则调用了系统接口 <code>open()</code>，系统实例化一份 <code>struct file*</code> 类型的文件对象，描述这个被打开的文件，并且插入到 <code>fd_array[]</code> 中，分配好文件标识符 <code>fd</code> 后，返回给 <code>open()</code></p></li><li><p>因此 <code>open()</code> 得到一个文件描述符 <code>fd</code>（数组下标），而文件描述符又被 <code>C</code> 语言的 <code>FILE</code> 结构体封装，最后以 <code>FILE*</code> 的方式返回给 <code>fopen()</code>，也就是我们平时在 <code>C</code> 语言内使用的文件指针</p></li><li><p>然后我们在使用 <code>C</code> 语言的 <code>fwrite()</code> 的时候，传进来了一个 <code>FILE*</code>，指向的结构体变量内部具有一个 <code>fd</code> 文件描述符，就可以通过这个 <code>fd</code> 传给系统调用 <code>write()</code></p></li><li><p>然后操作系统找到进程的 <code>task_struct{};</code>，就找到了进程内部的数组 <code>fd_array[]</code>，根据 <code>fd</code> 就找到了 <code>struct file*</code> 类型的文件对象，也就是一个内存文件被找到了，然后后续就可以进行某一些写入操作了</p></li></ol></blockquote><h2 id="_5-重定向" tabindex="-1"><a class="header-anchor" href="#_5-重定向"><span>5.重定向</span></a></h2><h3 id="_5-1-重定向模拟" tabindex="-1"><a class="header-anchor" href="#_5-1-重定向模拟"><span>5.1.重定向模拟</span></a></h3><p>如果 <code>close()</code> 关掉 <code>fd=1</code> 的文件，根据 <code>fd</code> 的分配原则，关闭 <code>fd=1</code> 意味着下次打开文件分配的 <code>fd</code> 为 <code>1</code>，而 <code>C</code> 又默认往 <code>fd=1</code> 的 <code>stdout</code> 打印。</p><p>那么打印就会往新打开的文件内输出，而且不只是这一次打印，往后所有的打印输出函数都会输入的这个新打开的文件内部，这也就模拟了输出重定向。</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//模拟输出重定向</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">stdio.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">sys/types.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">sys/stat.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">fcntl.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">unistd.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    //1.关闭标准输出</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    close</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    //2.打开新的文件，自动赋予文件标识符为 1</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> fd </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> open</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">limou.txt</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> O_WRONLY </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">|</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> O_TRUNC </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">|</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> O_CREAT</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> 0</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">666</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//会覆盖文件的内容</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">fd </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        perror</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">open</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        return</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    //3.打印到输出，而输出标识符对于的文已经被改为了 limou.txt</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    fprintf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">stdout</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">you can see me : </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%d</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">, success</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> fd</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    //4.刷新输出</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    fflush</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">stdout</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    //加上这个 fflush() 的原因是为了刷新用户级别的输出缓冲区，</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    //如果没有使用这个函数，后面执行了 fclose() 将导致没有对应的 fd，</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    //C 语言提供的用户级缓冲区，就无法通过 fd 让系统将数据刷新到对应文件</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    </span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    close</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">fd</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是如果我们在代码中去带 <code>fflush()</code> 就会发现，在文件内没有内容？！这又是为什么呢？这涉及到缓冲区，写入的数据还来不及从缓冲区刷新到文件，结果就关闭了文件标识符，就是有自动刷新缓冲区，也找不到对哪一个文件进行写入了。如果我们之前没有关闭标准输出，则会自动刷新缓冲区数据到标准输出上（我们后面来讲解，这里先简单理解一下）。</p><p>类似的，关掉 <code>fd=0</code> 也可以模拟输入重定向。</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//模拟输入重定向</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">stdio.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">sys/types.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">sys/stat.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">fcntl.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">unistd.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    //1.关闭标准输入</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    close</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    //2.打开新的文件，自动赋予文件标识符为 0</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> fd </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> open</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">limou.txt</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> O_RDONLY</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//此时文件内是有内容的</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">fd </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        perror</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">open</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        return</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    //3.自定义一个缓冲区 buffer，用于存储读取到的数据</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    char</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> buffer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1024</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> };</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    fread</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">buffer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> sizeof</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">buffer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> stdin</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    //4.输出读取结果到标准输出（相当于我们自己定义的缓冲区写入到了输出缓冲区中，最后 C 会帮助我们刷新的）</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%s</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> buffer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    //5.关闭被打开的文件</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    close</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">fd</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-2-重定向接口" tabindex="-1"><a class="header-anchor" href="#_5-2-重定向接口"><span>5.2.重定向接口</span></a></h3><p>上面代码还需要我们先关闭标准输入输出，有没有其他的办法呢？有的，接下来就让我们来学习一下重定向的底层调用：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//dup 系列接口声明</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> dup</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> oldfd</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> dup2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> oldfd</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> newfd</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//重点了解这一个</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> dup3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> oldfd</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> newfd</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> flags</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们了解 <code>dup2()</code> 就够了，<code>duq2()</code> 就是把 <code>oldfd</code> 指向的内容拷贝给 <code>newfd</code>，然后将 <code>oldfd</code> 指向的文件关闭（这里的关闭是指引用计数的释放，不一定真的就释放被打开的文件资源了），也就是说：<code>newfd</code> 的指向发生了改动。</p><blockquote><p>补充：因此我们需要注意，操作系统是允许用户在两个毫不相关的进程里同时打开同一个文件的，而实际上就是增加了对一个引用计数。</p></blockquote><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//演示使用接口 dup2()</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">stdio.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">sys/types.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">sys/stat.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">fcntl.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> mian</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> argc</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char*</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> argv</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">[]</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">argc </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">!=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> //如果不是由“命令+参数”构成，就不执行代码</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        return</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> fd </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> open</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">limou.txt</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> O_WRONLY </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">|</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> O_TRUNC </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">|</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> O_CREAT</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//会覆盖文件的内容</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">fd </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> //文件打开异常</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        perror</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">open</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        retrun </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    </span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    close</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    </span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    dup2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">fd</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//重定向输出</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    close</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">fd</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    </span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    fprintf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">stdout</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%s\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> argv</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//打印出携带的参数</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码就是重定向的原理，图示如下：</p><figure><img src="`+d+`" alt="image-20240215165837379" tabindex="0" loading="lazy"><figcaption>image-20240215165837379</figcaption></figure><blockquote><p>补充：“<code>Linux</code> 下一切皆文件”，在进程控制和基础 <code>IO</code> 的知识背景下我们可以更加深入了解这句话。</p><p>首先，<code>Linux</code> 内核大部分都是使用 <code>C</code> 语言实现的，那么 <code>C</code> 有没有办法实现面向对象呢？是可以的！</p><p>例如：对于一个文件结构体，首先 <code>C</code> 的结构体具备类的雏形，可以在内部定义文件的属性（结构体成员变量），那么方法怎么实现呢？使用函数指针（结构体成员变量），只需要函数指针实现恰当，就可以在结构体中包含方法。</p><p>因此一个基础的类就实现了。</p><p>因此“一切皆文件”就是指：可以使用 <code>C</code> 语言的结构体来描述所有的硬件的“属性”和“操作”，那么调用这些硬件就如同调用一个对象，设置对象属性，根据属性使用对象的操作方法...这就是“一切接文件”的本质！</p><p>另外，<code>C</code> 语言虽然是面向过程的语言，但是并不意味着 <code>C</code> 不可以实现面向对象思想，像上述的说明就实现了一个类的封装。在某些巧妙地设计下，实现 <code>OOP</code> 其他重要特性（比如：多态）也是完全可以的，当然，对比纯 <code>OOP</code> 语言来说会有些麻烦（比如 <code>Java</code>）。</p><p>实际上，语言从面向过程到面向对象也是经历了这些大量的实践（每次都要设计出这样带有属性和方法的结构体）才被人们设计出来的。</p></blockquote><p>我们之前写过一个 <code>MyShell</code> 项目，还有一个重定向的功能，用的就是这里的重定向调用。</p><blockquote><p>补充：进程替换不影响打开的文件描述符...待补充...</p></blockquote><h2 id="_6-标准错误文件" tabindex="-1"><a class="header-anchor" href="#_6-标准错误文件"><span>6.标准错误文件</span></a></h2><p>标准输出文件和标准错误文件都是输出到显示器，那么两者有什么区别呢？让我们来先看一段代码。</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">sys/types.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">sys/stat.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">fcntl.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">unistd.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">cstdio</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">cstring</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">iostream</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">using</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> namespace</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // C</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">hello printf 1</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // -&gt; stdout</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    fprintf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">stdout</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">hello fprintf 1</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    perror</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">hello perror 2</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // -&gt; stderr</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // Linux</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    const</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> s1 </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">hello write 1</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    write</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> s1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> strlen</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">s1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">));</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    const</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> s2 </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">hello write 2</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    write</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> s2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> strlen</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">s2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // C++</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    cout </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;&lt;</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">hello cout 1</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> endl</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    cerr </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;&lt;</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">hello cerr 2</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> endl</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这份 <code>C++</code> 代码的运行结果和重定向结果如下：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> g++</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> main.cpp</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ./a.out</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">hello</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> printf</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">hello</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> fprintf</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">hello</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> perror</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 2:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Success</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">hello</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> write</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">hello</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> write</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">hello</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> cout</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">hello</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> cerr</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ./a.out</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> limou.txt</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">hello</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> perror</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 2:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Success</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">hello</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> write</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">hello</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> cerr</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> cat</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> limou.txt</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">hello</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> write</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">hello</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> printf</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">hello</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> fprintf</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">hello</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> cout</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出 <code>1</code> 和 <code>2</code> 对于的都是显示器文件，但是两个文件是些不同的，我们可以认为一个显示器文件被打开了两次。<code>1</code> 和 <code>2</code> 描述符都指向显示器文件。因此做重定向的时候我们会发现，如果 <code>1</code> 被 <code>dup2()</code> 了，不代表 <code>2</code> 会被 <code>dup2()</code>。</p><p>这就是两者的最大区别，这样我们就可以理解，为什么开发者不自己使用类似 <code>printf()</code> 和 <code>if()</code> 打印错误，而使用 <code>preeor()</code> 这样的函数来做一个错误检查的输出了。</p><p>如果程序在运行的过程中出现了问题，使用类似 <code>preeor()</code>、<code>cerr()</code> 等函数会更加方便，因为可以使错误信息和正常打印信息区分开。</p><h3 id="_6-1-分开输出标准输出和标准错误" tabindex="-1"><a class="header-anchor" href="#_6-1-分开输出标准输出和标准错误"><span>6.1.分开输出标准输出和标准错误</span></a></h3><p>如果希望直接使用重定向，来使一般的文本输出和错误输出分离开查看的话，可以使用类似 <code>./a.out 1&gt;text.txt 2&gt;error.txt</code> 的命令，这样就可以实现文本输出和错误输出分离到两个文件内，直接进行查看就可以。</p><h3 id="_6-2-合并输出标准输出和标准错误" tabindex="-1"><a class="header-anchor" href="#_6-2-合并输出标准输出和标准错误"><span>6.2.合并输出标准输出和标准错误</span></a></h3><p>如果想要文本输出和错误输出全部放进一个文件了，则可以使用命令 <code>./a.out &gt; all.txt 2&gt;&amp;1</code>（整个命令可以这么理解，<code>./a.out &gt; all.txt</code> 将文本输出从标准输出重定向为文件 <code>all.txt</code>，此时该文件的 <code>fd</code> 就是 <code>1</code>，而后面又将 <code>2&gt;&amp;1</code> 就把标准输出重定向为 <code>1</code>，也就是说标准错误现在也指向 <code>all.txt</code> 了，这样两个输出就可以同时输入到一个文件了）。</p><blockquote><p>补充 <code>1</code>：单纯使用 <code>&gt;</code> 实际上是将 <code>fd=1</code> 的标准输出给重定向了，而不包含标准错误输出。</p><p>补充 <code>2</code>：在 <code>bash</code> 中,需要将脚本 <code>demo.sh</code> 的标准输出和标准错误输出重定向至文件 <code>demo.log</code>，以下的用法都是正确的</p><ul><li><code>bash demo.sh &amp;&gt;demo.log</code></li><li><code>bash demo.sh &gt;&amp;demo.log</code></li><li><code>bash demo.sh &gt;demo.log 2&gt;&amp;1</code>（这里其实是 <code>bash demo.sh 1&gt;demo.log 2&gt;&amp;1</code>）</li><li><code>bash demo.sh 2&gt;demo.log 1&gt;demo.log</code></li></ul><p>补充 <code>3</code>：也可以使用 <code>cat &lt; source.txt &gt; copy.txt</code> 来拷贝文件。</p></blockquote><h3 id="_6-3-模拟实现-perror" tabindex="-1"><a class="header-anchor" href="#_6-3-模拟实现-perror"><span>6.3.模拟实现 perror()</span></a></h3><p>而 <code>perror()</code> 实际上我们也可以设计一个。</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//模拟实现 perror()</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> MyPerror</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char*</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> msg</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    fprintf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">stderr</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%s</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">: </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%s\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> msg</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> strerror</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">erron</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">));</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//后面这个函数就是打印错误信息</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-缓冲区" tabindex="-1"><a class="header-anchor" href="#_7-缓冲区"><span>7.缓冲区</span></a></h2><p>我们之前提到过文件缓冲区，实际上文件缓冲区就是一段由操作系统分配的、供文件使用的内存空间。</p><h3 id="_7-1-缓冲区作用" tabindex="-1"><a class="header-anchor" href="#_7-1-缓冲区作用"><span>7.1.缓冲区作用</span></a></h3><p>为什么需要缓冲区呢？原因很简单，为了效率：</p><ol><li>写透模式 <code>WT</code>：数据一个一个输入，直接写透输出到磁盘的另外一个文件中，那么这个实现就会频繁访问磁盘（效率低）</li><li>写回模式 <code>WB</code>：但是如果先拿内存空间存储起来表示写入完成（这里写完文件进程就回去继续执行代码，在写入的进程看来，自己已经完成对某文件的写入了（实际并没有，只是交给小段的内存空间了），也就是所谓的“写回”）。直到满足某一条件后，再一起将缓冲区数据输入到磁盘中的文件（刷新），这样效率就会很高，访问磁盘不会特别频繁（效率高）</li></ol><blockquote><p>补充：上面说的是“写操作的缓冲区”，同理读数据也类似有“读操作的缓冲区”的概念。</p></blockquote><p>因此有了缓冲区就可以提高用户的响应速度（用户感觉自己的输入输出操作变快了，很有可能缓冲区内的数据还未刷新到磁盘中），以避免磁盘访问速度缓慢引起用户的输入输出请求响应缓慢（甚至影响其他设备的效率）。</p><blockquote><p>补充：在某些情况下，我们也可以把内存当作一个“大型缓冲区”来理解。</p></blockquote><p>总结来说：谁使用缓冲区谁受益（指 <code>IO</code> 效率上的受益）。</p><h3 id="_7-2-缓冲区刷新" tabindex="-1"><a class="header-anchor" href="#_7-2-缓冲区刷新"><span>7.2.缓冲区刷新</span></a></h3><p>我们知道，缓冲区需要根据一定的条件才可以进行刷新，也就是刷新策略：</p><ol><li><p>立刻刷新（即时缓冲）</p></li><li><p>写出一行数据后，遇到换行就立刻刷新（行刷新）</p></li><li><p>占满缓冲区就刷新（全刷新）</p></li></ol><p>但是有一些特殊情况也会刷新缓冲区：用户强制刷新（<code>fflush()</code>）、进程退出时等等。</p><blockquote><p>补充 <code>1</code>：一般显示器采用行刷新（符合阅读习惯），磁盘采用全缓冲（提高效率需求）。</p><p>补充 <code>2</code>：一般显示器时行刷新，因此使用 <code>printf()</code> 不断打印，但是不做换行，就只能等到缓冲区被填满才会输出，这个等待缓冲的过程可能比较久。</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">stdio.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">unistd.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    while</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%s</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">abcdefghijklmnopqrstuvwxyz</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        sleep</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个代码运行起来后，可能还需要很久才能看到输出（也就是缓存区满的时候）。</p></blockquote><h3 id="_7-3-缓冲区提供" tabindex="-1"><a class="header-anchor" href="#_7-3-缓冲区提供"><span>7.3.缓冲区提供</span></a></h3><p>但是缓冲区这段内存空间是谁提供的呢？是操作系统么？我们通过一份奇怪的代码来证明一下。</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//mian.c</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">stdio.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">string.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">unistd.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    //C 语言接口</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">C:hello printf()</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    fprintf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">stdout</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">C:hello fprintf()</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    const</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> s </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">C:hello fputs()</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    fputs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">s</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> stdout</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    </span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    //OS 系统接口</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    const</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> str </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Sys:hello write()</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    write</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> str</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> strlen</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">str</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">));</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">   </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    fork</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//保存通过 gcc 生成 a.out</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果直接运行 <code>./a.out</code>，那么输出 <code>4</code> 行字符串确实没毛病。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">hello</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">hello</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> fprintf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">hello</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> fputs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">hello</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> write</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是如果将内容重定向到同级的另外一份空的文本文件 <code>/.a.out &gt; text.txt</code>，就会发现文件内会多出很多语句，并且顺序也很奇怪，这是为什么呢？</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">hello</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> write</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">hello</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">hello</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> fprintf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">hello</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> fputs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">hello</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">hello</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> fprintf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">hello</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> fputs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其实，我们目前提到的缓冲区都是是由语言来维护的语言级缓冲区（准确的说是 <code>C</code> 标准库）。</p><blockquote><p>注意 <code>1</code>：我们之前提到过缓冲区的一个结论，“谁使用缓冲区谁受益（指 <code>IO</code> 效率上的受益）”，那么我们就可以认为，语言提供的缓冲区，让 <code>printf()</code> 的使用者受益（用户会感觉调用 <code>printf()</code> 变得快了，当然这是相对没有缓冲区而言）。</p><p>注意 <code>2</code>：<code>C</code> 语言的缓冲区是 <code>C</code> 语言的缓冲区，系统的缓冲区是系统的， <code>C</code> 语言并不是直接把系统的缓冲区进行封装，这样描述不准确...</p></blockquote><p>在代码中，我们可以选择在进程里使用 <code>C</code> 提供的函数来写入 <code>C</code> 维护的缓冲区，再由该缓冲区自己调用 <code>write()</code> 写入系统。当然，也可以选择直接调用 <code>write()</code> 直接写入到系统。</p><p>我们之前是在显示器上刷新缓冲区的（行刷新）因此父进程运行一段代码，遇到 <code>\\n</code> 就会刷新一次（这就是一种数据的改动），然后再创建子进程。对于子进程来说，父进程缓冲区内的数据已经被输出了，也就没有缓冲区的数据需要写时拷贝（继承父进程的数据）了，因此只有 <code>4</code> 行的输出，子进程则没有任何的输出。</p><p>而当我们将输出重定向的时候，就是向磁盘中的文件写入（这是一种修改）：</p><ol><li><p>在 <code>fork()</code> 之前，前面的函数被执行完了，但是不代表缓冲区的数据已经被刷新了。这是因为现在是将缓冲区的数据刷新到到磁盘（行刷新变成全刷新），因此代码语句中的 <code>\\n</code> 变得没有效果了，父进程的打印在输出缓冲区中的数据会一直保存着，不会立刻输出</p></li><li><p>而缓冲区的数据也是父进程的数据，在 <code>fork()</code> 之后，由于父进程在结束进程的时候需要刷新缓冲区的文件（这就是一种数据的改动）。为了避免子进程被父进程影响，创建子进程的时候，父进程缓冲区内的数据会被子进程发生一次写时拷贝（让子进程继承缓冲区的数据）</p></li><li><p>最后在父子进程都结束进程后，由于进程结束必须要刷新所有缓冲区的数据，因此就会出现两份相同的输出（但是谁先退出这是不清楚的，因此我们无法确定两次相同的输出谁是父输出，谁是子输出）</p></li></ol><p>我们可以在 <code>fork()</code> 代码的前面再加一条 <code>fflush()</code> 来避免创建子进程的时候发生写时拷贝，进而实现正常打印四条输出。</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//mian.c</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">stdio.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">string.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">unistd.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    //C 语言接口</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">C:hello printf()</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    fprintf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">stdout</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">C:hello fprintf()</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    const</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> s </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">C:hello fputs()</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    fputs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">s</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> stdout</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    </span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    //OS 系统接口</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    const</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> str </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Sys:hello write()</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    write</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> str</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> strlen</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">str</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">));</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">   </span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    fflush</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">stdout</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    fork</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">$ .</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">/</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">a</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> text</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">$ cat text</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Sys:hello </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">write</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">C:hello </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">C:hello </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">fprintf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">C:hello </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">fputs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而为什么 <code>fflush()</code> 只输进去了一个参数呢，缓冲区的所在地呢？实际上 <code>stdout</code> 的数据类型是 <code>struct FILE{//...};</code>，该结构体不仅仅保存了文件描述符 <code>fd</code>，还封装了 <code>fd</code> 对应的大量的语言级缓冲区结构。</p><p>在一些 <code>stdio.h</code> 实现里 <code>FILE</code> 是由 <code>IO_FILE</code> 封装的。因此在 <code>FILE{//...};</code> 内部我们可以看到类似 <code>_IO_read_ptr</code>、<code>_IO_read_end</code> 等缓冲区相关的关键字，这些就是维护缓冲区的关键字。因此，我们只需要传递一个参数就足够 <code>fflush()</code> 刷新了。</p><p>而对于操作系统来说，每一个 <code>file{//...};</code> 内理应也有一个内核级缓冲区，我们使用 <code>write()</code> 的时候，也应该是将数据放进了系统级别的缓冲区。但是从上述代码输出来看，为什么就没有发生写时拷贝呢？</p><p>醒醒吧，是子进程要使用父进程中有可能会被父进程修改的数据时，才会发生子进程的写时拷贝，而使用 <code>write()</code>，就会将数据交给操作系统的内核缓冲区，而不是在进程里的语言级缓冲区，由操作系统来定义刷新，因此进程之间的写时拷贝和这里无关。</p><p>那么其他语言，是怎么维护缓冲区的呢？例如：<code>C++</code> 语言对 <code>&lt;&lt;</code> 进行重载，然后内部实现的时候将数据拷贝到 <code>buffer</code> 里就可以，后面再进行刷新即可（这里可以查看一下 <code>cout</code> 的实现，找找看里面是否存在 <code>fd</code>）。</p><p>最终我们可以得到两个结论：</p><ol><li>在 <code>C</code> 语言中，读写用的语言级别缓冲区由 <code>C</code> 库来维护，并且就在 <code>FILE{//...};</code> 内部描述缓冲区的属性，因此使用 <code>C</code> 的文件 <code>IO</code> 接口时需要时刻注意这方面的问题</li><li>而语言级缓冲区会提高语言级调用的 <code>IO</code> 效率，系统级缓冲区就会提高系统调用的 <code>IO</code> 效率</li></ol><h3 id="_7-4-缓冲区模拟" tabindex="-1"><a class="header-anchor" href="#_7-4-缓冲区模拟"><span>7.4.缓冲区模拟</span></a></h3><p>这里我们只模拟缓冲区原理的一部分。</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">sys/types.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">sys/stat.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">fcntl.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">assert.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">stdlib.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">stdio.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">string.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">typedef</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> struct</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> MyFILE</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//模拟 FILE</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> fd</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//文件描述符</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    char</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> buffer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1024</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">];</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//缓冲区</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> end</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//结尾</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">MyFILE</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//可以看到文件的数据都在 MyFILE 里，因此所有的接口都需要使用 MyFILE</span></span>
<span class="line"><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">MyFILE</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> MyFopen</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char*</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> pathname</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char*</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> mode</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    //1.检查参数都不为空</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    assert</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">pathname</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    assert</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">mode</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    //2.对不同模式做不同的操作</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    MyFILE</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> fp </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> NULL</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">strcmp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">mode</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">r</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ==</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    else</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">strcmp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">mode</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">r+</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ==</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    else</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">strcmp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">mode</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">w</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ==</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">        int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> fd </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> open</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">pathname</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> O_WRONLY </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">|</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> O_TRUNC </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">|</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> O_CREAT</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> 0</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">666</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//调用系统接口，写入之前先清空文件，不存在时需要创建</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">fd </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        {</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">            fp </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">MyFILE</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">malloc</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">sizeof</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">MyFILE</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">));</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">            memset</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">fp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> sizeof</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">MyFILE</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">));</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">            fp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">-&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">fd</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> fd</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    else</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">strcmp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">mode</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">w+</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ==</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    else</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">strcmp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">mode</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">a</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ==</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    else</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">strcmp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">mode</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">a+</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ==</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> fp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> MyFputs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char*</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> message</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> MyFILE</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> fp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    assert</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">message</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    assert</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">fp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    strcpy</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">fp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">-&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">buffer</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> fp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">-&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">end</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> message</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//注意这个函数是会自动添加&#39;\\0&#39;的</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    fp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">-&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">end</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +=</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> strlen</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">message</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//防止多次写入缓冲区被覆盖</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">fp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">-&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">fd</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ==</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        //标准输入</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    else</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">fp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">-&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">fd</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ==</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        //标准输出</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">fp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">-&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">buffer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">fp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">-&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">end</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ==</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">            write</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">fp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">-&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">fd</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> fp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">-&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">buffer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> fp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">-&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">end</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//默认显示器行刷新</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">            fp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">-&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">end</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    else</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">fp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">-&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">fd</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ==</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        //标准错误</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    else</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> MyFflush</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">MyFILE</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> fp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    assert</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">fp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">fp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">-&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">end</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> !=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        write</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">fp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">-&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">fd</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> fp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">-&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">buffer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> fp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">-&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">end</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//实际上是写入到内核缓冲区里了，一般是内核会帮助我们刷新，但是我们也可以尝试使用 syncfs()可以刷新数据到磁盘上</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        syncfs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">fp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">-&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">fd</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//刷新系统缓冲区到磁盘</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        fp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">-&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">end</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> MyFclose</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">MyFILE</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> fp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    assert</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">fp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    MyFflush</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">fp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//关掉文件之前先刷新一下缓冲区到文件里</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    close</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">fp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">-&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">fd</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    free</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">fp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    MyFILE</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> fp </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> MyFopen</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">./limou.txt</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">w</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">fp </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">==</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> NULL</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">open error</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        return</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    MyFputs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">hello!</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> fp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    MyFputs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">I am limou.</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> fp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    MyFputs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">This are words.</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> fp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    MyFclose</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">fp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码不仅是实现了缓冲区的输入操作，还实现了一种缓冲区刷新策略（行刷新）。</p><p>您还可以在代码一开始的时候关闭 <code>fd=1</code> 的文件（也就是标准输出），这样系统就会给您的文件分配 <code>fd=1</code>，再结合 <code>usleep()</code> 来观察行刷新的操作。</p><p>并且我们还可以尝试在代码结尾添加 <code>fork()</code> 来重现我们在 <code>4.3.缓冲区提供</code> 中出现重复打印的现象。</p><p>而效率提高的地方就在于 <code>IO</code> 执行的次数变少（访问磁盘次数减少），在内存的操作比较多（放入 <code>buffer[]</code> 中）。</p><h2 id="_8-模拟-c-文件接口" tabindex="-1"><a class="header-anchor" href="#_8-模拟-c-文件接口"><span>8.模拟 C 文件接口</span></a></h2><p>了解了 <code>Linux</code> 中文件的系统调用和缓冲区之后，就可以尝试使用系统调用，来模拟实现 <code>C</code> 的文件接口了。</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//file.h</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">pragma</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> noce</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">define</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> BUFFER_SIZE</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 4096</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">define</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> FLUSH_NONE</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">define</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> FLUSH_LINE</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">1 &lt;&lt; 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">define</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> FLUSH_ALL</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">1 &lt;&lt; 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">typedef</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> struct</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> MyFILE</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> _fileno</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">                    //文件描述符</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> _flag</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">                      //刷新策略标记</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    char</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> _buffer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">BUFFER_SIZE</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">];</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">      //缓冲区</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> _end</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">                       //end - 0 为缓冲区大小</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> MyFILE</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">MyFILE</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Myfopen</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char*</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> path</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char*</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> mode</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Mywrite</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char*</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> s</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> num</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> MyFILE</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> stream</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Myfflush</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">MyFILE</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> stream</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Myfclose</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">MyFILE</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> stream</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//file.c</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">file.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">string.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">sys/types.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">sys/stat.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">fcntl.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">errno.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">stdlib.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">unistd.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">define</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> DFL_MOOE</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> 0</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">666</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">MyFILE</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Myfopen</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char*</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> path</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char*</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> mode</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> fd </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> flag </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">strcmp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">mode</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">r</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ==</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        flag </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">|=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> O_RDONLY</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    else</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">strcmp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">mode</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">w</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ==</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        flag </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">|=</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">O_CREAT </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">|</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> O_TRUNC </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">|</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> O_WRONLY</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    else</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">strcmp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">mode</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">a</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ==</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        flag </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">|=</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">O_CREAT </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">|</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> O_WRONLY </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">|</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> O_APPEND</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    else</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        //Do nothing</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">flag </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> O_CREAT</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//创建文件</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        fd </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> open</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">path</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> flag</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> DFL_MOOE</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    else</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        fd </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> open</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">path</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> flag</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">fd </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        errno </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//设置错误（代表文件打开失败）</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        return</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> NULL</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    MyFILE</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> fp </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">MyFILE</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">malloc</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">sizeof</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">MyFILE</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">));</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">!</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">fp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        errno </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//设置错误（代表空间申请失败）</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        return</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> NULL</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    fp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">-&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">_flag</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> FLUSH_LINE</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//默认行刷新</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    fp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">-&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">_end</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//默认缓冲区没有数据</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    fp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">-&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">_fileno</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> fd</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//设置文件标识符</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> fp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Mywrite</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char*</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> s</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> num</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> MyFILE</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> stream</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//num 是写入的字符个数</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    //写入数据</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    memcpy</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">stream</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">-&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">_buffer</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> stream</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">-&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">_end</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> s</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> num</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    stream</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">-&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">_end</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> num</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    </span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    //判断刷新</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ((</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">stream</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">-&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">_flag</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &amp;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> FLUSH_LINE</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    &amp;&amp;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">  (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">stream</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">-&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">_end</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &gt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    &amp;&amp;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">  (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">stream</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">-&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">_buffer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">stream</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">-&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">_end</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ==</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    )</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        Myfflush</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">stream</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> num</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Myfflush</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">MyFILE</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> stream</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">stream</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">-&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">_end</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &gt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        write</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">stream</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">-&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">_fileno</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> stream</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">-&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">_buffer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> stream</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">-&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">_end</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        stream</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">-&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">_end</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    //fsync(stream-&gt;_fileno);//可选，我们之前都是对自己设计的语言级缓冲区进行刷新，这个系统调用是刷新内核级缓冲区的</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Myfclose</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">MyFILE</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> stream</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    Myfflush</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">stream</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//先刷新，防止缓冲区内还有数据</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> close</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">stream</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">-&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">_fileno</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//mian.c</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">file.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">stdio.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    MyFILE</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> fp </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Myfopen</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">./limou.txt</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">w</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">!</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">fp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        perror</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Myfopen()</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        return</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> cnt </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 20</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    const</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> msg </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Hello, I am limou3434.</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    while</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">cnt</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">--</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        Mywrite</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">msg</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> strlen</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">msg</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> fp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        sleep</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    Myfclose</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">fp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_9-文件系统" tabindex="-1"><a class="header-anchor" href="#_9-文件系统"><span>9.文件系统</span></a></h2><p>首先我们需要注意到，上述学习的文件都是被打开的文件（被进程访问、存储在内存中的文件），那么哪些存储在磁盘中的没有被打开的文件呢？这些文件又有哪些需要注意的地方呢？这很重要，因为有相当多的文件都是在磁盘中的（我们本节只讨论磁盘，其他类型的永久存储器也是类似的理解），这些文件都没有被打开（也就是没有加载到内存中）。</p><p>首先，我们先来理解关于磁盘的一些基本知识，这里只是简单的科普一下，这部分内容最好是参考一些关于“计算机组成原理”的资料。</p><h3 id="_9-1-磁盘角度理解磁盘文件" tabindex="-1"><a class="header-anchor" href="#_9-1-磁盘角度理解磁盘文件"><span>9.1.磁盘角度理解磁盘文件</span></a></h3><h4 id="_9-1-1-磁盘硬件结构" tabindex="-1"><a class="header-anchor" href="#_9-1-1-磁盘硬件结构"><span>9.1.1.磁盘硬件结构</span></a></h4><ol><li><p>内存是一种失电易失存储介质（断电了内部的数据就会消失，这和内部使用的电子元件有关）</p></li><li><p>磁盘是一种永久性存储介质（还有一些别的永久性存储介质，例如：<code>SSD</code>、<code>U</code> 盘、<code>flash</code> 卡、光盘、磁带...但是在企业里 [2021]），使用磁盘的性价比要高）</p></li></ol><p>磁盘的 <code>IO</code> 操作对比 <code>CPU</code> 的处理速度是比较慢的，因此操作系统也会有一些提速处理的方式（这里暂时不提及，您只需要知道有就是了）</p><p>而磁盘的具体结构大概为：</p><figure><img src="`+r+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><ul><li>磁盘盘片：存储数据，一张盘片由很多密度非常大的磁性颗粒来构成，利用南北磁性表示 <code>1/0</code>，磁盘和磁盘之间存在悬浮避免损坏），一个磁盘存储器由多个盘片构成</li><li>磁头：用来寻址，每一个盘面都有一个磁头，磁头可以利用放电来改变盘片上颗粒的磁性，因此可以存放数据，也可以读取数据</li><li>伺服系统：待补充...</li><li>音圈马达：待补充...</li><li>...</li></ul><p>磁盘盘片上的一圈称为“磁道”或者“柱面”，磁盘盘片由若干块扇区构成（扇区指圆环的一部分，不是指圆的一部分）。</p><p>磁盘的存储基本单位是扇区，而一般扇区的存储字节大小规定为 <code>512</code> 字节，也有 <code>4KB</code> 的（后者的比较先进 [2021]），文件操作都是 <code>4KB</code> 操作，但由于缓冲区的存在，用户是察觉不到 <code>4KB</code> 的操作的。</p><blockquote><p>补充 <code>1</code>：这里给一份 <a href="https://www.bilibili.com/video/BV1H24y1S7bJ/?share_source=copy_web&amp;vd_source=4772b64d7a3cb1873f14bc0153c4de68" target="_blank" rel="noopener noreferrer">磁盘结构 3D 图示视频链接</a>，值得一看。</p><p>补充 <code>2</code>：虽然磁盘基本单位扇区是 <code>512 byte</code>，但是操作系统的文件系统和磁盘进行 <code>IO</code> 动作的基本单位是 <code>4 KB = 8 * 512 byte</code>。哪怕系统只读写 <code>1 bit</code> 的数据也必须读写 <code>4 KB</code>。为什么不用磁盘的基本单位是因为：</p><ol><li><p><code>512 byte</code> 太小了，<code>IO</code> 操作又是频繁操作，导致效率下降</p></li><li><p>万一未来的磁盘基本单位被修改了呢？源代码也需要跟着改变，这太麻烦了（这是一种解耦合）</p></li></ol><p>补充 <code>3</code>：<code>4 KB</code> 就是一个块大小，这也就是磁盘为什么被称为“块设备”的原因。</p></blockquote><h4 id="_9-1-2-磁盘查找结构" tabindex="-1"><a class="header-anchor" href="#_9-1-2-磁盘查找结构"><span>9.1.2.磁盘查找结构</span></a></h4><p>无论是读还是写，首先都需要查找地址，那么如何查找存储空间的地址呢？需要三要素：</p><ol><li><p>首先查找数据在哪一个盘面？</p></li><li><p>数据存在哪一个轨道/柱面上？（磁道为 <code>Cylinder</code>）</p></li><li><p>在哪一个扇区里？（磁头为 <code>Head</code>、扇区为 <code>Sector</code>）</p></li></ol><p>这种寻址方式就是 <code>CHS</code> 寻址，可以找到所有扇区。</p><p>通过磁盘的旋转可以想象成线性结构，因此扇区可以抽象为数组，因此使用下标就可以寻找数据，也可以使用指针来标明不同的磁盘扇区，这就变成了 <code>LBA</code> 寻址，这是磁盘的一种结构体抽象，由对磁盘的管理转化为对数组的管理。</p><p>但是磁盘很大，形成的抽象数组所占空间也很大，因此可以对这个抽象数组进行拆分，也就是所谓的“磁盘分区”，便于操作系统管理和查找，而磁盘可以根据操作系统的 <code>LBA</code> 地址，转化为实际的 <code>CHS</code> 地址。</p>',174)),h(l,{id:"mermaid-761",code:"eJxLL0osyFDwCeIqLk2CsJVSMouzNZ4vbnw+e4amEpcCEDhGKxUkFpVklmTm52k87Wh72rNLU8FQKRYs6YRN0ggq6YxN0hgq6RKtpKenB+Sk5qVwAQBtji+E"}),s[4]||(s[4]=n('<p>但是即便是做了分区，每一个区的空间依旧很大怎么办呢？我们还可以继续做磁盘抽象。</p><h4 id="_9-1-3-磁盘抽象结构" tabindex="-1"><a class="header-anchor" href="#_9-1-3-磁盘抽象结构"><span>9.1.3.磁盘抽象结构</span></a></h4><p>“磁盘抽象结构”也就是“虚拟/逻辑结构”，上述已经成功将磁盘理解为线性结构了，那么对于每一块磁盘分区，内部还有指针维护划分块组区间：<code>Boot Block</code>、<code>Block group 0</code>、<code>Block group 1</code>、...<code>Block group n</code>。</p>',3)),h(l,{id:"mermaid-771",code:"eJydlE1LwzAYx8/uU4QcpDtsvt09zOk8eFJvZZRuK7NsrqXtrsPBmEOU7SAqG76hqIgwRRC3ovsyTavfwiZZbTo2Jw2U9HnyPL/8/6FpXhPVHbCxGdHLGfoOc7Je4JybqtM5i8IIcIe/poqaIRuyUuJQo44O+1GwQEuCZQlFMUBeU8oqZ1/10PmpY9bmUKuLDh7cYEjFY2adh/F4HKZ/M1IpNw5YVLKFIZHiomDex+CRkzUpi6VhN+xCCncJSUnParJqKJqwLWaKEqhUKmCrrEqaQOD/aOEhyQM/D0ieQ7dt6/0RZIhI1O2h/rHTrtnN5tfg2Xm6++7UUasRZUziwezNQxIAEnD2yb5lvjmvpmNeuhj0cmHv3VuDa7vaHWUEgqRoiALRoPMQB1SQHpTnEsfrIZsLCdnYFVV+eOA0muDP+jhCnc9RDCniIZlgGsRisWVWGZgNbDTZjVxScpJ37iQIHjZNsW7G9Xt2aHXQDs1NsUOLiAtGkeuC5UdCfL3MvZlZDX8JFhnMWmgMbvM5qUkcb/7rf8AISrAcr3cqYMkHrIQBBLwkRwn4+QGaK6Xx"}),s[5]||(s[5]=n('<p>而每一个 <code>Block group</code> 的内部包含了 <code>Super Block</code>、<code>Group Descriptor Table</code>、<code>Block Bitmap</code>、<code>inode Bitmap</code>、<code>inode Table</code>、<code>Data blocks</code>（这里是我们学习的重点），这里面无非存储的就是文件的内容和属性。</p><ol><li><p><strong>Group Descriptor Table(GDT)</strong>：块组描述符，主要是描述块组的大小、块组使用程度</p><ul><li><code>inode space</code> 的数量</li><li><code>inode space</code> 的使用程度</li><li><code>inode number</code> 的数量</li><li><code>inode number</code> 的使用程度</li><li>...</li></ul></li><li><p><strong>Data Blocks</strong>：多个块（<code>扇区空间*8 = 1KB</code>）的集合，块里保存的都是特定文件的“内容”（<code>Linux</code> 将文件的属性和内容分开存储），对于每一个块，也有标识块的“块号”，那如果一个文件比较大，占用的块比较多，我们该怎么组织这些块呢？下面会进行解释，还请您继续看下去...</p></li><li><p><strong>Block Bitmap</strong>：那么磁盘怎么知道 <code>Data blocks</code> 里有哪些 <code>block</code> 被占用？哪些可以被使用呢？使用位图 <code>Block Bitap</code>，只要有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span> 个块，就至少有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span> 多个比特位，比特位对应一个块，可定 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> 为“块被占用”，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span> 为“块可用”。</p></li><li><p><strong>inode Table</strong>：<code>inode space(node 空间)</code> 的集合。一般情况下，每个文件都会对应一个 <code>inode space</code> ，<code>inode space</code> 空间的大小是 <code>128 byte</code>，内部保存的是对应文件的“属性”数据</p><ul><li>文件的属性</li><li>文件的大小</li><li>文件的所有者</li><li>文件的所属组</li><li>文件的最近修改时间</li><li>...</li></ul><p>而一个 <code>inode space</code> 使用 <code>inode number(inode 编号)</code> 来标识，也就是 <code>ls -al</code> 之后每一个文件列表的第一列信息），在 <code>inode Table</code> 内的每一个 <code>inode space</code> 空间，需要有唯一一个 <code>inode number</code> 来标识该 <code>inode space</code> 。</p><blockquote><p>补充 <code>1</code>：由于“<code>file-inode spac-inode number</code>”之间是一一对应的，因此 <code>Linux</code> 使用 <code>inode/inode number</code> 来标识一个文件，因此我们可以 <code>Linux</code> 中查找一个文件不需要用到文件名，而是需要文件对应的 <code>inode/inode number</code>（需要注意的是，“文件名”和 <code>inode number</code> 不是一一对应的，例如我们后续介绍的硬链接，可以给同一个文件赋予多个文件名，但是都使用的是同一个 <code>inode number</code>）。</p><p>补充 <code>2</code>：一个文件不一定只占有一个块（<code>4 KB</code>），那文件比较大怎么办？不用担心，首先 <code>inode space</code> 可以存储一个关于块的数组，读取文件时，只需要找到 <code>inode number</code> 对应的 <code>inode space</code>，找到其中块的数组即可读取文件。</p><p>而如果某个块存储其他块的块号，则可以使用该块来索引其他的块，文件能使用的块就会变得更多（甚至是使用其他分区中的块）。</p><p>文件分配存储的方式：</p><p>连续分配...</p><figure><img src="'+g+'" alt="image-20240614211814781" tabindex="0" loading="lazy"><figcaption>image-20240614211814781</figcaption></figure><p>链接分配...</p><figure><img src="'+c+'" alt="image-20240614212228829" tabindex="0" loading="lazy"><figcaption>image-20240614212228829</figcaption></figure><p>索引分配...</p><figure><img src="'+y+'" alt="image-20240615105054519" tabindex="0" loading="lazy"><figcaption>image-20240615105054519</figcaption></figure><p>因为琐碎的小文件数量不容忽视...</p><figure><img src="'+A+'" alt="image-20240615105215350" tabindex="0" loading="lazy"><figcaption>image-20240615105215350</figcaption></figure><p>上面这几种也被称为文件物理结构，之前给文件做的分类是逻辑结构。</p></blockquote></li><li><p><strong>inode Bitmap</strong>：那么磁盘又怎么知道 <code>inode Table</code> 里有哪些 <code>inode</code> 被占用？哪些可以被使用呢？和 <code>Block Bitap</code> 是类似的，也是使用位图。基于上述的描述：系统可以完全掌握磁盘信息可追溯、可管理。也就是说：</p><p>(1)找到一个文件，就需要找到 <code>inode numeber</code> （依靠目录结构来找到）</p><p>(2)然后找到 <code>inode space</code>，可以找到文件属性、可以找到分区特定的块组</p><p>(3)每个块组都这么做，整个分区就被写入了文件系统信息被管理，也就是所谓的“格式化”</p></li><li><p><strong>Super Block</strong>：超级块保存了文件系统的属性信息，包含了磁盘分区的属性，一个磁盘分区的部分块组内的 <code>Super Block</code> 都复制了下面的信息（对磁盘分区的管理转变为了对若干 <code>Super Block</code> 的管理）</p></li></ol><ul><li><p>分区内的块组是否为满</p></li><li><p>分区内的 <code>inode space</code> 是否为满</p></li><li><p>分区内有多少块组可用</p></li><li><p>分区内有多少 <code>inode space</code></p></li><li><p>...</p><p>而这些信息之所以被多份放进块组的 <code>Super Block</code>，是因为可以达到文件备份的目的（不至于一份坏掉导致整个磁盘都无法运行）。</p></li></ul><blockquote><p>补充：<code>Boot group</code> 和计算机启动有关，可能涉及到到 <code>BIOS</code> 等，因此这块地方通常不会被更换（否则操作系统有可能无法启动）。</p></blockquote><blockquote><p>注意：“格式化”指的是建立一个完整的磁盘文件管理结构系统</p><ul><li><p><strong>低级格式化</strong>：重写磁盘上的扇区和轨道信息，以确保磁盘的物理结构得到恢复（有些时候可以作为清理磁盘的手段）</p></li><li><p><strong>高级格式化</strong>：一种更加细致和可定制的格式化方式，可以选择不同的文件系统、分区类型、簇大小等选项，高级格式化通常需要使用第三方工具实现</p></li></ul></blockquote><p>上述的文件管理系统就被称为 <code>Ext2</code> 文件系统，但是其还欠缺一些日志、数据恢复功能，因此后续也发展了 <code>Ext3</code>、<code>Ext4</code>，不过基本的框架是类似的...</p><blockquote><p>补充：文件的索引表就可以对应找到磁盘中的数据块。</p></blockquote><blockquote><p>补充：磁盘存储空间的划分和初始化。</p><figure><img src="'+o+'" alt="image-20240615112644904" tabindex="0" loading="lazy"><figcaption>image-20240615112644904</figcaption></figure><p>空闲表管理法</p><figure><img src="'+D+'" alt="image-20240615112829577" tabindex="0" loading="lazy"><figcaption>image-20240615112829577</figcaption></figure><figure><img src="'+B+'" alt="image-20240615112855192" tabindex="0" loading="lazy"><figcaption>image-20240615112855192</figcaption></figure><p>空闲链表法</p><figure><img src="'+v+'" alt="image-20240615113122649" tabindex="0" loading="lazy"><figcaption>image-20240615113122649</figcaption></figure><figure><img src="'+u+'" alt="image-20240615113152918" tabindex="0" loading="lazy"><figcaption>image-20240615113152918</figcaption></figure><figure><img src="'+C+'" alt="image-20240615113618481" tabindex="0" loading="lazy"><figcaption>image-20240615113618481</figcaption></figure><p>位图法</p><figure><img src="'+m+'" alt="image-20240615114118628" tabindex="0" loading="lazy"><figcaption>image-20240615114118628</figcaption></figure><figure><img src="'+b+'" alt="image-20240615114243354" tabindex="0" loading="lazy"><figcaption>image-20240615114243354</figcaption></figure><p>成组链接法</p><figure><img src="'+f+'" alt="image-20240615114721868" tabindex="0" loading="lazy"><figcaption>image-20240615114721868</figcaption></figure><figure><img src="'+E+'" alt="image-20240615114925354" tabindex="0" loading="lazy"><figcaption>image-20240615114925354</figcaption></figure><figure><img src="'+F+'" alt="image-20240615115033876" tabindex="0" loading="lazy"><figcaption>image-20240615115033876</figcaption></figure><figure><img src="'+_+'" alt="image-20240615115042427" tabindex="0" loading="lazy"><figcaption>image-20240615115042427</figcaption></figure><figure><img src="'+x+'" alt="image-20240615115102951" tabindex="0" loading="lazy"><figcaption>image-20240615115102951</figcaption></figure><figure><img src="'+q+'" alt="image-20240615115504363" tabindex="0" loading="lazy"><figcaption>image-20240615115504363</figcaption></figure><figure><img src="'+w+`" alt="image-20240615115636261" tabindex="0" loading="lazy"><figcaption>image-20240615115636261</figcaption></figure></blockquote><h3 id="_9-2-重新理解目录三权限" tabindex="-1"><a class="header-anchor" href="#_9-2-重新理解目录三权限"><span>9.2.重新理解目录三权限</span></a></h3><p>另外我们还可以重新理解对目录的三个权限：</p><ol><li><p><code>w</code> 权限（写）：一个文件的文件名是存储在目录里的，而文件名和 <code>inode number</code> 编号都是唯一的、一一映射的（也就是键值对关系，文件名是 <code>key</code>，<code>inode number</code> 是 <code>value</code>）。</p><p>这一映射关系和文件名被存储在目录的 <code>Data blocks</code> 里，文件名和 <code>inode number</code> 的键值对关系需要存储在目录的 <code>Data blocks</code> 里，就必须写入数据，因此我们在目录底下创建文件就必须具有对目录的写权限，这也就是为什么需要给目录赋予 <code>w</code> 权限的缘故。</p><blockquote><p>补充：目录这个“文件”存储了目录下面文件的文件名和 <code>inode number</code> 的键值对关系（映射关系），这点很重要，用户使用文件名的原理深处是使用了 <code>inode number</code>。</p><p>因此同一个目录下不能存在两个文件名相同的文件，因为这个文件名是要作为 <code>key</code> 值来使用（文件名也被称为“目录项”），但是允许多个文件名指向同一个文件，一个文件唯一对应一个 <code>inode </code>。</p><p>目录下如果需要存储子目录，那么目录的 <code>Data blocks</code> 里实际也存储了子目录名和子目录对应的 <code>inode number</code> 之间的映射关系。</p><p>并且值得注意的是，<code>Linux</code> 下文件名不是文件的属性（<code>inode space</code> 内没有存储文件名），文件名存储在目录文件中。</p><p>而找到一个文件，就需要从根目录的 <code>inode number</code> 和键值对关系一直找下去。</p></blockquote></li><li><p><code>r</code> 权限（读）：有了读权限才可以显示目录中文件的名字和属性，可是 <code>inode space</code> 中是没有存储文件名的，因此就需要读取目录的 <code>inode number</code> 才可以根据键值关系来获得文件名，而根据 <code>inode number</code> 又可以查找对应的 <code>number space</code>，进而得到文件的属性。总结来说，就需要有读取到 <code>inode number</code> 的读权限。</p></li><li><p><code>x</code> 权限（执行）：控制用户是否可以通过该目录的 <code>inode number</code> 进入该目录</p></li></ol><h3 id="_9-3-系统创建-删除-查看文件" tabindex="-1"><a class="header-anchor" href="#_9-3-系统创建-删除-查看文件"><span>9.3.系统创建/删除/查看文件</span></a></h3><ol><li><p>创建文件时系统做了什么呢？</p><ul><li><p>首先确认在哪一个目录下创建，找到目录所在分区，遍历 <code>inode Bitmap</code> 找到第一个 <code>inode space</code> 对应位图为 <code>0</code> 的地方，置为 <code>1</code> ，而这样遍历累加得到计数就得到一个 <code>inode number</code>，然后在 <code>inode number</code> 指向的 <code>inode space</code> 里设置文件的权限</p></li><li><p>同理遍历 <code>Block Bitmap</code> 找到空闲的块，确定该块用来保存文件的内容，由于是新建立的文件，内部没有内容，因此需要把对应的块清空数据（后面写入文件时，再直接从块位图中找块，然后将内容填写进去）</p></li><li><p>最后将 <code>inode number</code> 返回给用户</p><blockquote><p>补充：虽然概率很小，但是由于 <code>inode</code> 和块的数量是固定的，因此有可能出现一方不够用的情况</p><ol><li><code>inode</code> 不够用了，创建不了文件</li><li>块不够用了，创建得了文件但是无法写入内容</li></ol></blockquote></li></ul></li><li><p>删除文件时系统做了什么呢？</p><ul><li><p>首先根据目录的 <code>inode Bitmap</code> 来确定目录的 <code>Data blocks</code>（因为目录实际也是一个文件），然后用户提供文件名，以文件名作为 <code>key</code> 值从目录的 <code>Data blocks</code> 中找到对应文件的 <code>inode number</code></p></li><li><p>将文件在 <code>inode</code> 位图和 <code>Block Bitmap</code> 中对应的比特位置 <code>0</code> ，这个文件就被变相删掉了</p></li><li><p>再进一步从目录中删除“<code>file name-inode number</code>”映射关系即可</p></li><li><p>换句话来说，被删除的文件的实际数据依旧存在，只不过用户此时很难通过某些类似指针的东西找回（有概率在删除文件之后可以恢复文件，事实上也确实存在类似这样的软件），并且被删除文件占有的空间会被随时覆盖，内部数据不再被系统刻意维护</p></li></ul><blockquote><p>补充：如果实际情况中，我们不小心误删了一个文件，我们需要做的第一件事情是什么？答案是“什么都不做”，避免过多的操作导致原有文件数据被其他数据覆盖。第二件事情，就是根据文件的 <code>inode number</code> 找到对应的 <code>inode Bitmap</code> 置 <code>1</code>，再根据 <code>inode space</code> 将对应的块组 <code>Block Bitmap</code> 置为 <code>1</code></p></blockquote></li><li><p>查看文件时系统做了什么呢？</p><p><code>ls</code>、<code>cat</code> 等指令的时候，<code>ls</code> 首先找到目录以及目录的 <code>inode</code> 编号，找到所有的文件名和对应的文件 <code>inode</code> 编号，然后感觉对应的 <code>inode</code> 位图找到所有的属性然后和文件名字拼接输出即可，而 <code>cat</code> 也是类似的只不过是根据文件属性找到对应块的文件内容...</p><blockquote><p>补充 <code>1</code>：如果不断访问一个目录，<code>Linux</code> 就会利用 <code>struct dentry{/*...*/};</code> 数据结构，将常用的文件名字和路径导入到内存中，加快访问速度，这个了解下就行...</p><p>补充 <code>2</code>：实际上 <code>inode number</code> 并不难找，问题是如何找到一开始的分区，不同分区的内的 <code>inode number</code> 有可能相同，这该如何确定 <code>inode number</code> 在哪个分区呢？</p><p>一般情况下，一旦格式化分区后，需要挂载分区，才能使用该分区，挂载语法类似 <code>sudo mount &lt;分区&gt; &lt;指定目录&gt;</code>，这样目录就可以和分区关联起来，因此访问目录就可以访问该分区，因此只要确定访问哪个目录，就可以确定访问哪个分区...</p><p>可以使用命令 <code>df -h</code> 来查看系统中分区的挂载情况：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 查看系统中分区的挂载情况</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> df</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -h</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Filesystem</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">      Size</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">  Used</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Avail</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Use%</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Mounted</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> on</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">devtmpfs</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">        988M</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">     0</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">  988M</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">   0%</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /dev</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">tmpfs</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">          1000M</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">   24K</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 1000M</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">   1%</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /dev/shm</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">tmpfs</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">          1000M</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">  848K</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">  999M</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">   1%</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /run</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">tmpfs</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">          1000M</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">     0</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 1000M</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">   0%</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /sys/fs/cgroup</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">/dev/vda1</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">        50G</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">   18G</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">   30G</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">  37%</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">tmpfs</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">           200M</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">     0</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">  200M</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">   0%</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /run/user/1001</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">tmpfs</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">           200M</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">     0</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">  200M</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">   0%</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /run/user/1007</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">tmpfs</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">           200M</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">     0</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">  200M</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">   0%</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /run/user/1005</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">/dev/sr0</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">         19M</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">   19M</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">     0</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 100%</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /iso</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在我的云服务器下显示这一行 <code>/dev/vda1 50G 18G 30G 37% /</code> 就是表明把分区 <code>/dev/vda1 </code> 挂载到 <code>/</code> 下，也就是说，整个系统都只使用了一个分区（买得是比较便宜的服务器）。</p><p>因此所谓的挂载就是把目录的数据结构和文件系统的数据结构拿指针关联起来，因此访问某一个分区，就访问对应挂载的目录即可。</p><p>而进程在打开某个文件的时候，内部 <code>PCB</code> 保存了工作目录（含有分区），就去根据这个地址逐步映射到最终文件的 <code>inode space</code>，找到文件的属性填充到内存中的 <code>struct file{/*...*/}</code> 中，把对应的块中的内容也预加载进缓冲区即可。</p></blockquote></li></ol><h2 id="_9-4-虚拟文件系统" tabindex="-1"><a class="header-anchor" href="#_9-4-虚拟文件系统"><span>9.4.虚拟文件系统</span></a></h2><p>VFS 系统...</p><p>https://www.bilibili.com/video/BV1YE411D7nH?p=70&amp;spm_id_from=pageDriver&amp;vd_source=c92c89dbfcf9cc30c48086469621f35b</p><h2 id="_10-软硬链接" tabindex="-1"><a class="header-anchor" href="#_10-软硬链接"><span>10.软硬链接</span></a></h2><h3 id="_10-1-软硬链接的创建" tabindex="-1"><a class="header-anchor" href="#_10-1-软硬链接的创建"><span>10.1.软硬链接的创建</span></a></h3><p>经过上述的铺垫，我们可以来理解软硬链接了，首先我们先来尝试创建链接：</p><ol><li><code>ln -s &lt;目标文件&gt; &lt;链接名&gt;</code> 可以创建软链接，<code>s</code> 就是 <code>soft</code> 的意思</li><li><code>ln &lt;目标文件&gt; &lt;链接名&gt;</code> 可以直接创建硬链接</li></ol><h3 id="_10-2-软硬链接的区别" tabindex="-1"><a class="header-anchor" href="#_10-2-软硬链接的区别"><span>10.2.软硬链接的区别</span></a></h3><p>两者有什么差别呢？软链接有自己独立的 <code>inode</code>，并且不会增加文件的硬链接数。而硬链接 <code>inode</code> 和对应的文件 <code>inode</code> 是一样的（这意味着硬链接不是一个独立的文件），并且会增加硬链接数（是对文件的一种引用计数）。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">查看硬链接数</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ls</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -li</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">total</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 4</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">1840738</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> drwxrwxr-x</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> limou</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> limou</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 4096</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Oct</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">  1</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 22:42</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> dir</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">1840740</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -rw-rw-r--</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 4</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> limou</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> limou</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">    0</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Oct</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">  1</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 22:42</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> hard-link-1</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">1840740</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -rw-rw-r--</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 4</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> limou</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> limou</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">    0</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Oct</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">  1</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 22:42</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> hard-link-2</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">1840740</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -rw-rw-r--</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 4</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> limou</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> limou</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">    0</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Oct</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">  1</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 22:42</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> hard-link-3</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">1840850</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> lrwxrwxrwx</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> limou</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> limou</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">    4</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Oct</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">  1</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 22:44</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> soft-link</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> -</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> text</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">1840739</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -rw-rw-r--</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> limou</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> limou</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">    0</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Oct</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">  1</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 22:42</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> text</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">1840740</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -rw-rw-r--</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 4</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> limou</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> limou</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">    0</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Oct</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">  1</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 22:42</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> text_1</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">1840747</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -rw-rw-r--</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> limou</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> limou</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">    0</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Oct</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">  1</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 22:42</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> text_2</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">1840849</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -rw-rw-r--</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> limou</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> limou</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">    0</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Oct</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">  1</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 22:42</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> text_3</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>软链接类似于 <code>Windows</code> 下的快捷方式，是一个独立的文件，可以更加快捷使用某些程序和工具，而软链接内部文件内容实际上就存储了指向目标文件的路径（<code>WIndows</code> 下打开快捷方式的属性就会看得更清楚）。</p><p>硬链接只是在指定的目录下，新建立了文件名和 <code>inode number</code> 的映射存入到当前目录里而已（因为硬链接的 <code>inode number</code> 和目标文件的 <code>inode number</code> 是一样的），也可以说是给文件重命名，实际上硬链接数就是文件在引用计数的应用。</p><p>当我们删除文件的时候，引用计数减 <code>1</code>，只有引用计数为 <code>0</code> 的时候（没有文件名和 <code>inode number</code> 映射时），该文件才会被彻底删除，而创建硬链接的时候，引用计数加 <code>1</code>。</p><p>我们甚至可以尝试使用 <code>unlink &lt;文件名&gt;</code> 指令来减少某个文件的引用计数，达到 <code>rm</code> 的效果（系统调用也有一个加 <code>unlink()</code> 的函数）并且我更推荐这种删除方法。</p><p>而对于刚刚被创建出来的目录，其硬链接数默认为 <code>2</code>：</p><ol><li>一个是自己本身（自己就是自己的硬链接）</li><li>另一个是目录内部的 <code>.</code>，这个 <code>.</code> 用于使用相对路径，其实际上是目录的一个硬链接。因此使用 <code>.</code> 就是使用目录（而 <code>..</code> 就是目录的父目录的硬链接）</li></ol><p>而如果我们在空目录内再新建一个子目录，那空目录的硬链接数可以达到 <code>3</code>。</p><p>下面我们利用一个简单的 <code>C++</code> 代码进行对软硬链接的模拟：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//使用 C++ 代码来模拟软硬链接原理</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> file </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 10</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> //文件本体</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    int*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> pfile </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &amp;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">file</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> //pfile 就类似 file 的软连接</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    int&amp;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> File </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> file</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> //File 就类似 file 的硬链接</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,32)),i("blockquote",null,[s[0]||(s[0]=i("p",null,[a("补充 "),i("code",null,"1"),a("：实际上用户无法自己对目录建立硬链接（但是系统又给 "),i("code",null,"."),a(" 和 "),i("code",null,".."),a(" 开了后门，这是特殊规定），这是为什么呢？这是因为硬链接本质是指向同一个文件/目录，一旦允许对目录进行硬链接，就会导致循环查找，无法停止。")],-1)),h(l,{id:"mermaid-1267",code:"eJxLL0osyFAIceEqys8vUdDVtVNIySwyVFADUUYQypgLLASVM4EImoIETWCCZtFKYPLphJ5n07c92Tn/2Yz1z3ran06YqAA29/mslucL17ycvO9Z39JYpVigESWpxSV6JRUlClwATygyLA=="}),s[1]||(s[1]=i("p",null,[a("上图中需要查找文件 "),i("code",null,"test.txt"),a("，假设采用深度遍历，从 "),i("code",null,"root"),a(" 查询到 "),i("code",null,"dir6"),a(" 后，又回到了 "),i("code",null,"root"),a("，因此就陷入了死循环（查找文件的第一件事情肯定是查询目录，如果遇到文件直接对比就行，而软链接是文件也就不会被打开，因此允许软链接而不允许硬链接）。")],-1)),s[2]||(s[2]=i("p",null,[a("补充 "),i("code",null,"2"),a("：不同分区有可能有不同文件系统，就算系统相同，也会导致节点号有歧义冲突，因此硬链接不能跨分区建立，但是软链接可以做到。")],-1))]),s[6]||(s[6]=n(`<h2 id="_11-动静态库" tabindex="-1"><a class="header-anchor" href="#_11-动静态库"><span>11.动静态库</span></a></h2><h3 id="_11-1-静态库制作和使用" tabindex="-1"><a class="header-anchor" href="#_11-1-静态库制作和使用"><span>11.1.静态库制作和使用</span></a></h3><h4 id="_11-1-1-静态库制作" tabindex="-1"><a class="header-anchor" href="#_11-1-1-静态库制作"><span>11.1.1.静态库制作</span></a></h4><p>实际上，我们可以把 <code>function.h</code> 文件和经过 <code>gcc -c function.c -o function.o</code> 后的文件给别人，就可以给别人使用您编写的函数。如果将多个 <code>.o</code> 文件打包起来，就是“形成静态库”的过程，使用 <mark><code>ar -rc &lt;目标静态库名，前缀lib，后缀.a&gt; &lt;.o文件列表&gt;</code></mark> 命令即可完成打包（<code>r</code> 指替换， <code>c</code> 指创建）。</p><blockquote><p>补充：<code>Windows</code> 和 <code>Linux</code> 两个平台的动静态库后缀名不一样</p><ol><li><p><code>Windows</code>：</p><p>(1)<strong>静态库</strong>：<code>.lib</code></p><p>(2)<strong>动态库</strong>：<code>.dll</code></p></li><li><p><code>CentOS(Linux)</code>：</p><p>(1)<strong>静态库</strong>：<code>.a</code></p><p>(2)<strong>动态库</strong>：<code>.so</code></p></li></ol></blockquote><p>下面让我们来试试制作一个静态库：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//编写自定义静态库源代码（Print.h）</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">pragma</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> once</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">stdio.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">time.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">extern</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Print</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char*</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> str</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//编写自定义静态库源代码（Print.c）</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">function1.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">extern</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Print</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char*</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> str</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%s\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> str</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//编写自定义静态库源代码（Add.h）</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">pragma</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> once</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">stdio.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">extern</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Add</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//编写自定义静态库源代码（Add.c）</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">function2.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Add</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%d\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">+</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">+</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后根据这些源文件和静态库制作的指令生成静态库。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 制作静态库</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># (1)制作 .o 文件</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> gcc</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -c</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> function1.c</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -o</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> function1.o</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> # 这里的 -o 可以不加，默认生成和 .c 文件同名的 .o 文件</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> gcc</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -c</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> function2.c</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -o</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> function2.o</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> # 这里的 -o 可以不加，默认生成和 .c 文件同名的 .o 文件</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ls</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">function1.c</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> function1.h</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> function1.o</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">function2.c</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> function2.h</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> function2.o</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># (2)使用 ar 指令制作静态库（-rc 为 replace and create）</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ar</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -rc</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -o</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> libfunction.a</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> function1.o</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> function2.o</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># (3)整理文件</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> rm</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> function1.c</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> function2.c</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> function1.o</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> function2.o</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ls</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">function1.h</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> function2.h</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> libfunction.a</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> mkdir</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -p</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> mylib/include</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> mkdir</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -p</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> mylib/lib</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> mv</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> function1.h</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ./mylib/include</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> mv</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> function2.h</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ./mylib/include</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> mv</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> libfunction.a</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ./mylib/lib</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>补充：上述过程中最好使用 <code>makefile</code> 来自动化生成。</p></blockquote><p>然后编写一份将来要调用我们制作的库文件的 <code>mian()</code> 程序。</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//主程序（main.c）</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">function1.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">function2.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    Print</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">I am limou.</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%d\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Add</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">50</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">));</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时由于我们写的静态属于第三方库（<code>gcc</code> 默认不识别），因此需要我们手动链接才可使用。</p><h4 id="_11-1-2-静态库使用" tabindex="-1"><a class="header-anchor" href="#_11-1-2-静态库使用"><span>11.1.2.静态库使用</span></a></h4><p>一般制作库后，有一个目录为 <code>include</code> 专门放头文件，还有一个目录为 <code>lib</code> 专门放静态库文件（上述代码中我就是这样做的）。打包好两个文件后就可以上线发布了，用户使用这两者即可使用内部的函数，有三种使用方法：</p><ol><li><p>直接修改系统文件：<code>gcc</code> 头文件的默认搜索路径是 <code>/usr/include</code>，而 <code>gcc</code> 库文件的默认搜索路径是 <code>/lib64</code> 或者 <code>/usr/lib64</code>，我们直接将我们做的头文件和库拷贝进去即可。在使用我们的库时，可以在 <code>main()</code> 所在文件使用 <code>&lt;&gt;</code> 引用头文件，也可以使用 <code>&quot;&quot;</code>，然后使用 <code>gcc &lt;使用静态库的源文件&gt; -l &lt;指定目标静态库文件，去掉lib和.a&gt;</code> 即可通过使用（这个过程实际就是安装库的过程，但绝不推荐这么做，容易污染别的头文件和库文件）</p></li><li><p>用户直接包含目标头文件然后使用 <code>gcc</code> 链接：由用户使用 <code>include</code> 语句，直接指向头文件的所在地，再链接的使用 <code>gcc</code> 链接已经准备好的库 <code>gcc 用户的源代码（含有main.c） -L &lt;静态库文件的父路径&gt; -l &lt;指定目标静态库文件，去掉lib和.a&gt;</code></p></li><li><p>直接使用 <code>gcc</code> 进行包含和链接：将打包好的 <code>include</code> 和 <code>lib</code> 文件放在包含 <code>main()</code> 源文件的同级目录下，然后直接使用 <mark><code>gcc 用户的源代码（含有main.c） -I &lt;头文件所在的父路径&gt; -L &lt;静态库文件的父路径&gt; -l &lt;指定目标静态库文件，去掉lib和.a&gt;</code></mark></p><p>(1)<code>I</code>：是 <code>include</code> 的意思</p><p>(2)<code>L</code>：是 <code>Library</code> 的意思</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 在代码中使用静态库</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> gcc</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> test.c</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -I</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ./mylib/include</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -L</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ./mylib/lib</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -lfunction</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ls</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">a.out</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> mylib</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> test.c</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ./a.out</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">I</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> am</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> limou.</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">100</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><blockquote><p>补充：如果我们使用指令 <code>ldd &lt;可执行文件&gt;</code> 是不会指出依赖哪一个静态库的，因为该指令只会指出依赖了哪些动态库，而静态库早就把内部代码拷贝进可执行文件里了。</p></blockquote><blockquote><p>总结：实际上您可以认为静态库是程序员编译源文件中的一种“偷懒行为”，只是在输入指令的长度上变短了（因为实际项目很可能会有多个头文件和对应实现，一个一个写太麻烦了，还有写错的可能），效率并没有提升多少...</p></blockquote><h3 id="_11-2-动态库的制作和使用" tabindex="-1"><a class="header-anchor" href="#_11-2-动态库的制作和使用"><span>11.2.动态库的制作和使用</span></a></h3><h4 id="_11-2-1-动态库制作" tabindex="-1"><a class="header-anchor" href="#_11-2-1-动态库制作"><span>11.2.1.动态库制作</span></a></h4><p>使用命令 <mark><code>gcc -fPIC -c &lt;.c文件名&gt; -o &lt;.o文件名&gt;</code></mark> （<code>-fPIC</code> 参数的意思是用于生成与位置无关的代码，即“位置无关码”）形成一个与目标位置无关的二进制文件，然后使用 <mark><code>gcc -shared &lt;.o文件列表&gt; -o &lt;目标动态库名，前缀lib，后缀.so&gt;</code></mark>（这的 <code>-shared</code> 实际上就是“共享”的意思）。</p><p>接着发布动态库，也是分为 <code>include</code> 和 <code>lib</code>，静态库和动态库可以放在一起。</p><h4 id="_11-2-2-动态库使用" tabindex="-1"><a class="header-anchor" href="#_11-2-2-动态库使用"><span>11.2.2.动态库使用</span></a></h4><ul><li><p>静态库不需要自己加载到内存，因为程序在编译链接的时候就把库中的代码直接链接到可执行文件中，相当于方法直接拷贝给程序了，这些方法直接跟随进程一起加载到内存即可，进程运行起来后，静态库就没有用处了（整个程序的运行过程中都不会用到静态库了）。</p></li><li><p>而动态库和可执行文件可以分批加载到内存，并且加载一次动态库就可以被系统内所有的进程使用，而静态库就有可能会出现多份相同的代码和数据。</p></li></ul><p>使用动态库也有四种常见的方法：</p><ol><li><p>直接修改系统文件：和静态库一样，直接将对应的头文件和库文件分别拷贝到 <code>/usr/include</code> 和 <code>/lib64</code>（或 <code>/usr/lib64</code>），然后使用命令 <code>gcc &lt;包含main.c的源代码&gt; -I &lt;头文件的所在路径&gt; -L &lt;库文件的所在路径&gt;</code> （最后一个选项如果指定的动静态库同名，则默认使用动态库，如果只有静态库则会使用静态库，不过可以使用 <code>-static</code> 强制使用静态库），最后就可以生成可执行程序了。</p><p>但是此时还有一个问题，虽然程序可以通过编译了，但是运行和编译器没有关系（那是操作系统的事，编译器只是辅助编译和翻译指令而已），因此就算编译器找得到动态库的文件，但是操作系统不知道，导致动态库并没有跟随程序一起加载进内存，进而运行起来。</p><p>因此我们必须添加多一个选项，也就是 <mark><code>gcc &lt;包含main.c的源代码&gt; -I &lt;头文件的所在路径&gt; -L &lt;库文件的所在路径&gt; -l &lt;使用的动态库名字，去掉lib和.so&gt;</code></mark>，使用 <code>-l</code> 来指定动态库名称。</p><blockquote><p>补充：<code>gcc</code> 在默认情况下，都是有动态库就用动态库。若特定库只有静态库可用，就会允许动静态库同时混杂链接的情况。而如果只有动态库且没有静态库，却强制使用 <code>-static</code> 那么该库就不会被链接。</p></blockquote><p>接下来讲解在基于上述生成的可执行文件的情况下，帮助系统寻找指向动态库父路径并且加载的不同方式（而不是选择粗暴的拷贝）...</p></li><li><p>设置对应的环境变量：如果我们不选择拷贝这种粗暴的方式，就必须配置相关的环境变量 <mark><code>export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:&lt;动态库所在的父路径&gt;</code></mark>，该环境变量翻译为“加载动态库路径”，用于告诉操作系统动态链接器在运行时查找共享库的位置，我们把自己的动态库文件路径添加进去就行（平时调试自定义的第三方库的时候可以用这种方式），注意不同环境对应的这个环境变量不太一样。</p></li><li><p>设置对应的配置文件：而上述环境变量是具有临时性的，如果关闭了终端就会清除（或者说“只在当前会话有效”）。这是因为该环境变量是内存级别的环境变量。但也有一劳永逸的方法，在 <code>Linux</code> 的 <code>/etc/ld.so.conf.d/</code>，在这里创建一个 <code>.conf</code> 文件，在内部写入动态库的父路径直接保存即可。这样就可以永久保存动态库的搜索路径，以后关闭终端也不会丢失该路径信息。</p><p>需要注意的是，配置完后有的时候需要执行一下 <code>sudo ldconfig</code>，这是一个用于更新动态链接器运行时共享库缓存的命令。当系统中的共享库发生变化时，例如添加、删除或更新了共享库，可以运行该指令来刷新系统的共享库缓存，以便动态链接器能够正确找到这些库。</p><blockquote><p>补充 <code>1</code>：这里有一个有趣的现象，如果运行带有动态库的程序成功后，删除掉之前创建的 <code>.conf</code> 文件，之后重新启动程序，程序还是可以正常运行，这是因为有关动态库路径和相关数据都还在系统缓存中保存着。</p><p>补充 <code>2</code>：<code>/etc/ld.so.conf.d/</code> 内通常包含一些配置文件，这些文件用于指定系统动态链接器在运行时查找共享库/动态库的父路径。这个目录中的配置文件允许用户或系统管理员添加额外的共享库/动态库路径，以便动态链接器能够找到程序所依赖的库。</p><p>每个配置文件中通常包含一行路径信息，指定了一个共享库路径。这样，系统就知道在运行程序时去哪里查找共享库。这些配置文件的命名通常以 <code>.conf</code> 为后缀，并且系统动态链接器会按照这些文件的顺序读取路径。</p></blockquote></li><li><p>创建对应的软链接：那还有没有更简单的办法呢？有的，使用命令 <code>gcc &lt;包含main.c的源代码&gt; -I &lt;头文件的所在路径&gt; -L &lt;库文件的所在路径&gt;</code> 后，建立一个指向自定义动态库的软链接，然后直接存在在和可执行程序相同的路径下，或这存放在 <code>/lib64</code> 下，这样就可以直接运行可执行程序（<code>gcc</code> 虽然不会自动寻找和可执行程序同目录下的静态库，但是会自动寻找动态库）。</p></li></ol><blockquote><p>补充：源文件路径和工作路径</p><p>如果我们使用 <code>C</code> 语言打开一个文件后直接进入死循环，然后打开进程 <code>ID</code> 对应在 <code>/proc/进程ID</code> 对应的文件，就可以看到当前这个进程的进程信息。其中：</p><ol><li><p><code>exe</code> 指向的是该进程对应源文件在磁盘上的路径</p></li><li><p><code>cwd</code> 指向当前的工作路径，这也就是为什么直接用追加读写模式的时候可以在源文件同级的目录下新建文件（能直接使用某些动态库和静态库的原理也类似）</p></li></ol><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//写入文件</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">stdio.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">string.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">unistd.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    FILE</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> fp </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> fopen</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">limou.txt</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">w</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//最后一个参数是打开模式：r 是只读，w 是写入，a 是追加。</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">!</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">fp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        preeor</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">fopen()</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        return</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    const</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> s1 </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">hello fwrite.</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    fwrite</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">s1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> strlen</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">sl</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> fp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//这里会发现这个字符串不需要结尾加上 \`\\0\`，因为这只是 C 语言的规定，已经写入到文件中的数据就已经和 C 语言无关了，不适合文件中的规则，文件只需要保存有效数据就可以</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    const</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> s2 </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">hello fprintf.</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    fprintf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">fp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%s</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> s2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    const</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> s3 </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">hello fputs.</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    fputs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">s3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> fp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    fclose</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">fp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><blockquote><p>总结：总结起来的话：使用动态库就不仅仅是手动输入指令上的“偷懒”了，还提高了程序运行的效率，更好利用了资源空间。下面总结我们自己常用的第三方库的制作和安装方法...</p><p>平时我们使用 <code>yum</code> 工具的时候也可以观察一下对应的系统头文件路径和系统库文件路径。</p></blockquote><h3 id="_11-3-动态库加载原理" tabindex="-1"><a class="header-anchor" href="#_11-3-动态库加载原理"><span>11.3.动态库加载原理</span></a></h3><p><code>gcc</code> 基本上是能使用动态库就使用动态库，系统中的库文件甚至默认安装动态库（静态库很有可能需要我们自己安装），为什么追求使用动态库？我们之前只是简单说动态库可以被共享，但是没有特别说到点上，接下来就来强调一下动态库的原理...</p><p>由于可执行文件内部只有地址，因此加载可执行程序进内存时，没有将动态库内的程序加载进内存。</p><figure><img src="`+L+`" alt="image-20240125200952073" tabindex="0" loading="lazy"><figcaption>image-20240125200952073</figcaption></figure><p>因此，至少在代码运行到涉及到动态库的函数时，动态库必须也被加载进内存。</p><p>那么如果程序还没有被加载进内存，那么程序内部有地址么？一定是有的！为什么？您猜我们编译的时候在干什么？</p><p><code>C</code> 语言程序在编译的时候，就没有所谓变量的概念了（变量通过编译器转化为地址），在程序编译时，会遵循虚拟地址来编译可执行程序，这样才能方便在加载时进行映射（也就是说：虚拟地址的概念不仅仅适用于操作系统中的进程，还适用于编译器的编址）。</p><p>而我们形成动态库时，使用 <code>-fPIC</code> 选项的位置无关码（指可在内存中的任何位置加载和执行的代码）生成动态库，内部的代码使用相对地址编址。</p><p>因此动态库填入上图中类似符号表区域中的地址，就是每一个动态库内代码在其所处动态库中的相对地址。</p><p>这对于动态库是非常重要的，因为动态库可能会从磁盘中加载到内存的任意位置，而当链接到动态库时，可执行程序就可以在进程地址空间中，根据相对地址作为偏移量，跳转到进程空间的共享区中，然后通过页表找到动态库中查找所需的代码（也就是动态库内函数定义等代码），这样调用第三方动态库内的函数就不会受到地址的限制。</p><p>而加载进一份动态库，就可以让所有进程共享该库（所以动态库有时也被称为共享库），这样就可以大大提高空间资源利用。</p><p>而静态库是直接拷贝到可执行程序的代码区中，因此如果有多个可执行程序用了同一个静态库，就会导致这些可执行程序同时被执行时，内存中有多份相同的静态库内容，导致空间资源利用率低，因此 <code>gcc</code> 会默认使用动态库、操作系统默认安装动态库是由理由的...</p><p>另外，虚拟地址空间内的共享区，实际上就指向加载进内存中的动态库，而这里的共享区内的数据会被页表映射到实际内存中的共享内存中。</p><p>静态库相当于直接拷贝到进程地址空间的代码区中...</p><blockquote><p>补充：假设可执行程序经过编译器后，内部的每一句代码都赋予了虚拟地址，此时用户运行了该可执行程序，则其被加载进内存，加载进内存肯定就立刻拥有了物理地址，此时每一句代码都拥有了自己的虚拟地址和物理地址。</p><p>每一句语句的虚拟地址代表该语句在可执行程序内部的跳转逻辑，而物理地址代表在内存中的实际存储位置。</p><p>此时空页表的右侧可以填写上述的物理地址（包括可执行程序的入口地址，这个地址由可执行程序的符号表内某个字段保存，实际是 <code>main</code> 的地址，供操作系统读取，该地址也一定是虚拟地址）。</p><p>此时基础的页表就构建好了，只需要将 <code>main()</code> 的虚拟地址交给 <code>CPU</code> 内的寄存器即可，然后通过该进程的进程地址空间对应的页表，找到 <code>main()</code> 的实际地址。</p><p>而找到 <code>main()</code> 的实际地址后，实际上就读取到可执行程序加载到内存中的地方，向下读取就可以获取新的虚拟地址，此时又交给 <code>CPU</code> 去执行判断，<code>CPU</code> 又根据页表找到虚拟地址对应的物理地址来跳转代码。</p><p>此时我们可以看到 <code>CPU</code> 处理的指令全部都是虚拟地址。</p></blockquote><blockquote><p>补充：关于动态库原理还需要重新复盘一下，写得有点乱...</p></blockquote><h3 id="_11-4-优先使用动态库" tabindex="-1"><a class="header-anchor" href="#_11-4-优先使用动态库"><span>11.4.优先使用动态库</span></a></h3><p>动态库中包含了大量的常用的功能接口指令代码，这种链接方式，可以解决静态库中存在的：</p><ul><li>浪费内存磁盘空间</li><li>模块更新困难...</li></ul><p>动态链接生成可执行程序，可执行程序中会记录自己依赖的库列表以及库中的函数地址信息，等到运行程序的时候，由操作系统将库加载到内存中（多个程序可以共享，不需要加载多份相同实例），然后根据库加载后的地址在对每个程序内部用到的库函数的地址进行偏移计算。</p><p>而基于这么一种思想，动态链接具有以下优缺点：</p><ul><li>更加节省内存并减少页面交换（从内存移到磁盘），在物理内存有限的情况下，如果多个进程同时使用相同的静态库，系统可能需要将部分内存页从物理内存交换到磁盘中，也就是页面交换以释放内存</li><li>库文件与程序文件独立，只要输出接口不变，更换库文件不会对程序文件造成任何影响，极大地提高了可维护性和可扩展性。因此更适用于大规模的软件开发，使开发过程独立、耦合度小，便于不同开发者和开发组织之间进行开发和测试（要测试一下，待补充...）</li><li>不同编程语言编写的程序只要按照函数调用约定就可以调用同一个库函数</li><li>运行时依赖，否则找不到库文件就会运行失败</li><li>运行加载速度相较静态库慢一些</li><li>需要对库版本之间的兼容性做出更多处理</li></ul><h2 id="_12-磁盘挂载" tabindex="-1"><a class="header-anchor" href="#_12-磁盘挂载"><span>12.磁盘挂载</span></a></h2><p>前面关于磁盘的理论知识也足够了，接下来我们还需要把一个物理的磁盘手动挂载到我们的 <code>Linux</code> 操作系统中，首先您需要知道，初始化一个 <code>Linux</code> 操作系统后，<code>/</code> 目录挂载的地方就是一开始分配给操作系统的磁盘，但是我们有可能需要挂载其他额外的磁盘供 <code>Linux</code> 操作系统来使用。</p><p>我们可以使用 <code>lsblk</code> 来大致概览所有的块设备的挂载情况。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 显示当前系统所有的块设备</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> lsblk</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># [NAME]设备名称</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># [MAJ:MIN]设备主编号:设备次编号</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># [RM]不可移除(0)/可移除(1)设备</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># [SIZE]设备大小</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># [RO]可读(0)/可写(1)标志</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># [TYPE]设备类型(disk物理磁盘/part磁盘分区/loop环回设备)</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 环回设备通常都是虚拟设备, 我这里的环回设备都是因为我使用了 snap 包管理器才有的, 并没有实际对应的硬件磁盘</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">lsblk</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">NAME</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">                      MAJ:MIN</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> RM</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">   SIZE</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> RO</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> TYPE</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> MOUNTPOINT</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">loop0</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">                       7:0</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">    0</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">    64M</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">  1</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> loop</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /snap/core20/2379</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">loop1</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">                       7:1</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">    0</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">  63.7M</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">  1</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> loop</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /snap/core20/2434</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">loop2</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">                       7:2</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">    0</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">  91.9M</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">  1</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> loop</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /snap/lxd/24061</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">loop3</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">                       7:3</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">    0</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">  44.3M</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">  1</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> loop</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /snap/snapd/23258</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">loop4</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">                       7:4</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">    0</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">  91.9M</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">  1</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> loop</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /snap/lxd/29619</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">loop5</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">                       7:5</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">    0</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">  44.4M</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">  1</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> loop</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /snap/snapd/23545</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">sda</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">                         8:0</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">    0</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">  14.6T</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">  0</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> disk</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">sdb</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">                         8:16</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">   0</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">  14.6T</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">  0</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> disk</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">sdc</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">                         8:32</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">   0</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">  14.6T</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">  0</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> disk</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">sdd</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">                         8:48</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">   0</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">  14.6T</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">  0</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> disk</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">sde</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">                         8:64</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">   0</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 447.1G</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">  0</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> disk</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">├─sde1</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">                      8:65</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">   0</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">   1.1G</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">  0</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> part</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /boot/efi</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">├─sde2</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">                      8:66</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">   0</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">     2G</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">  0</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> part</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /boot</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">└─sde3</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">                      8:67</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">   0</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 444.1G</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">  0</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> part</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  └─ubuntu--vg-ubuntu--lv</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 253:0</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">    0</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">   100G</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">  0</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> lvm</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">  /</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">sdf</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">                         8:80</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">   0</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 931.5G</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">  0</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> disk</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">├─sdf1</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">                      8:81</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">   0</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">     2G</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">  0</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> part</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">└─sdf2</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">                      8:82</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">   0</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 929.5G</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">  0</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> part</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">sr0</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">                        11:0</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">    1</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">  1024M</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">  0</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> rom</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看到没，我的系统盘也就是 <code>/</code> 根目录存储在 <code>sde</code> 磁盘下的 <code>sde3</code> 分区中，我这里需要挂载四个设备 <code>sda、sdb、sdc、sdd</code>，他们目前都没有挂载点。根据我们之前的理论，<code>Linux</code> 下一切皆文件，因此一个磁盘肯定对应一个文件。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 找到磁盘的对应文件</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ls</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -al</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /dev/sd</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">*</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">brw-rw----</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> root</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> disk</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 8,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">  0</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Jan</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 15</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 03:39</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /dev/sda</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">brw-rw----</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> root</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> disk</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 8,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 16</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Jan</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 15</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 03:39</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /dev/sdb</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">brw-rw----</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> root</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> disk</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 8,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 32</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Jan</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 15</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 03:39</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /dev/sdc</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">brw-rw----</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> root</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> disk</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 8,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 48</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Jan</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 15</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 03:39</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /dev/sdd</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">brw-rw----</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> root</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> disk</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 8,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 64</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Jan</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 15</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 03:39</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /dev/sde</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">brw-rw----</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> root</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> disk</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 8,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 65</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Jan</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 15</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 03:39</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /dev/sde1</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">brw-rw----</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> root</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> disk</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 8,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 66</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Jan</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 15</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 03:39</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /dev/sde2</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">brw-rw----</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> root</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> disk</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 8,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 67</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Jan</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 15</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 03:39</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /dev/sde3</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">brw-rw----</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> root</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> disk</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 8,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 80</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Jan</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 15</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 03:39</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /dev/sdf</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">brw-rw----</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> root</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> disk</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 8,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 81</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Jan</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 15</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 03:39</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /dev/sdf1</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">brw-rw----</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> root</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> disk</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 8,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 82</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Jan</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 15</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 03:39</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /dev/sdf2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而我先对设备 <code>sda</code> 进行查看，其他设备依葫芦画瓢即可。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 查看存储设备和分区的详细信息</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 查看存储设备文件是否存在</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ls</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -al</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /dev/sda</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">brw-rw----</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> root</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> disk</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 8,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Jan</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 15</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 03:39</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /dev/sda</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> # 这里的 b 其实就是块设备的意思, 在 Linux 中块设备其实就是存储设备</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 详细查看存储设备文件</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> sudo</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> fdisk</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /dev/sda</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> # 进入磁盘分区管理工具</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">欢迎使用</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> fdisk</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (util-linux </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">2.39.3</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)。</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">更改将停留在内存中，直到您决定将更改写入磁盘。</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">使用写入命令前请三思。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">命令(输入</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> m</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 获取帮助</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)：p </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 显示当前存储设备的基本信息</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Disk</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /dev/sda:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 14.57</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> TiB,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 16000900661248</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> bytes,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 31251759104</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> sectors</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> # (1)存储设备的存储信息, 其实就是一张 4.57 TiB 的 SSD 固态硬盘, 其中 sectors 是扇区的意思</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Disk</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> model:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ST16000NM000J-2T</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> # (2)存储设备的设备型号</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Units:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> sectors</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> of</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> *</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 512</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 512</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> bytes</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> # (3)存储设备的扇区信息</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Sector</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> size</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (logical/physical): 512 bytes / 4096 bytes</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">I/O</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> size</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (minimum/optimal): 4096 bytes / 4096 bytes</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Disklabel</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> type:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> dos</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> # (4)存储设备的标签信息, 其实就是分区表的类型, GPT 分区表是比较现代的分区方案, 而 MBR 分区表是比较传统的分区方案</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Disk</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> identifier:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0xd69748e0</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> # (5)存储设备的标识信息, 可以用来唯一标识一个存储设备</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">命令(输入</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> m</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 获取帮助</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)：q </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 退出磁盘分区管理工具</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container important"><p class="hint-container-title">重要</p><p>补充：如果有分区的需求，可以使用 <code>fdisk</code> 工具进行分区，这并不困难。</p></div><p>然后您需要找到一个挂载点，我推荐在根目录下直接挂载，一个磁盘（或一个磁盘的分区）挂载到根目录下，当然您也可以有自己的策略，例如我这里就打算四个磁盘都挂载到 <code>/data</code> 下的 <code>/data/intelligent_data、/data/business_data/、/data/backup_data、/data/other_data</code> 四个目录下，并且建议所有的操作使用 <code>root</code> 来操作。然后您还需要编辑挂载文件（这可以批量挂载多个磁盘，比我们之前使用 <code>mount</code> 一个一个挂载要快速得多），运行挂载指令后进行批量的挂载。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 创建挂载目标</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> sudo</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> su</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> -</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> # 切换为 root 账户</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> mkdir</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -p</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /data/intelligent_data</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /data/business_data</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /data/backup_data</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /data/other_data</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> tree</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> data</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">data</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">├──</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> backup_data</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">├──</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> business_data</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">├──</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> intelligent_data</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">└──</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> other_data</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ls</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -al</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> data</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">total</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 24</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">drwxr-xr-x</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">  6</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> root</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> root</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 4096</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Feb</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">  7</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 07:07</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> .</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">drwxr-xr-x</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 20</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> root</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> root</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 4096</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Feb</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">  7</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 07:05</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ..</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">drwxr-xr-x</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">  2</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> root</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> root</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 4096</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Feb</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">  7</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 07:07</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> backup_data</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">drwxr-xr-x</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">  2</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> root</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> root</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 4096</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Feb</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">  7</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 07:07</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> business_data</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">drwxr-xr-x</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">  2</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> root</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> root</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 4096</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Feb</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">  7</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 07:07</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> intelligent_data</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">drwxr-xr-x</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">  2</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> root</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> root</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 4096</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Feb</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">  7</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 07:07</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> other_data</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 编辑挂载文件</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">sudo</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> vim</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /etc/fstab</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">cat</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /etc/fstab</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># /etc/fstab: static file system information.</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># Use &#39;blkid&#39; to print the universally unique identifier for a</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># device; this may be used with UUID= as a more robust way to name devices</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># that works even if disks are added and removed. See fstab(5).</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># &lt;file system&gt; &lt;mount point&gt;   &lt;type&gt;  &lt;options&gt;       &lt;dump&gt;  &lt;pass&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># / was on /dev/ubuntu-vg/ubuntu-lv during curtin installation</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">/dev/disk/by-id/dm-uuid-LVM-d3Ga6umB2rtfLiX2mCrYgG4Q3DVsw8LWA3BE45FVdSecyCMAuNdYwpZUh39YEe1O</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ext4</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> defaults</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># /boot was on /dev/sde2 during curtin installation</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">/dev/disk/by-uuid/6b26d566-43b0-4cff-a00d-6ac294a6d883</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /boot</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ext4</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> defaults</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># /boot/efi was on /dev/sde1 during curtin installation</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">/dev/disk/by-uuid/62B3-3424</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /boot/efi</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> vfat</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> defaults</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">/swap.img</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">       none</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">    swap</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">    sw</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">      0</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">       0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># &gt;&gt;&gt; begin-2024_09_26-ljp: 挂载磁盘 &gt;&gt;&gt;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">/dev/sda</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">  /data/intelligent_data</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">  ext4</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">  defaults</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">  0</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">  2</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">/dev/sdb</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">  /data/business_data</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">     ext4</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">  defaults</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">  0</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">  2</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">/dev/sdc</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">  /data/backup_data</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">       ext4</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">  defaults</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">  0</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">  2</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">/dev/sdd</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">  /data/other_data</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">        ext4</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">  defaults</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">  0</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">  2</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># &lt;&lt;&lt; end &lt;&lt;&lt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container important"><p class="hint-container-title">重要</p><p>补充：<code>/etc/fstab</code> 文件中每一行包含六个字段，分别是：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">文件系统</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">挂载点</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">文件系统类型</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">选项</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">转储选项</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">检查顺序</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><strong>文件系统</strong>：要挂载的设备（如磁盘分区或网络文件系统），例如 <code>/dev/sda1</code>、<code>UUID=xxx</code>、<code>/dev/nvme0n1</code> 等</li><li><strong>挂载点</strong>：文件系统挂载到的目录，通常是如 <code>/mnt/data</code> 或 <code>/</code> 这样的目录</li><li><strong>文件系统类型</strong>：文件系统的类型，如 <code>ext4</code>、<code>xfs</code>、<code>ntfs</code> 等</li><li><strong>选项</strong>：挂载时的选项，如 <code>defaults</code>、<code>ro</code>（只读）、<code>rw</code>（读写）等</li><li><strong>转储选项</strong>：通常为 <code>0</code>（不备份）或 <code>1</code>（会被 <code>dump</code> 备份），表示是否需要在备份时考虑该文件系统，一般不需要修改</li><li><strong>检查顺序</strong>：用于启动时检查文件系统的顺序，通常为 <code>0</code>（不检查）或 <code>1</code>（根文件系统检查）</li></ul></div><p>此时挂载文件还没有生效，需要使用 <code>sudo mount -a</code> 来使得挂载生效，然后再检查以下。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 挂载所有目标后进行检查</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> sudo</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> mount</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -a</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ls</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -al</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /data/</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">*</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> df</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -h</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Filesystem</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">                         Size</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">  Used</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Avail</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Use%</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Mounted</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> on</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">udev</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">                                32G</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">     0</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">   32G</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">   0%</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /dev</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">tmpfs</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">                              6.3G</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">  1.8M</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">  6.3G</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">   1%</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /run</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">/dev/mapper/ubuntu--vg-ubuntu--lv</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">   98G</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">   18G</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">   76G</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">  19%</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">tmpfs</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">                               32G</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">     0</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">   32G</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">   0%</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /dev/shm</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">tmpfs</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">                              5.0M</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">     0</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">  5.0M</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">   0%</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /run/lock</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">tmpfs</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">                               32G</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">     0</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">   32G</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">   0%</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /sys/fs/cgroup</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">/dev/sde2</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">                          2.0G</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">  212M</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">  1.6G</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">  12%</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /boot</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">/dev/sde1</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">                          1.1G</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">  6.1M</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">  1.1G</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">   1%</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /boot/efi</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">/dev/loop1</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">                          64M</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">   64M</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">     0</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 100%</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /snap/core20/2434</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">/dev/loop0</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">                          64M</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">   64M</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">     0</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 100%</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /snap/core20/2379</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">/dev/loop2</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">                          92M</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">   92M</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">     0</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 100%</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /snap/lxd/24061</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">/dev/loop3</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">                          45M</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">   45M</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">     0</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 100%</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /snap/snapd/23258</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">/dev/loop5</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">                          45M</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">   45M</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">     0</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 100%</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /snap/snapd/23545</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">/dev/loop4</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">                          92M</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">   92M</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">     0</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 100%</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /snap/lxd/29619</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">overlay</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">                             98G</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">   18G</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">   76G</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">  19%</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /var/lib/docker/overlay2/06bf48da4ad9a503c60e6949446ea12ae7ddb3bca1eabba88a683d47af622991/merged</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">tmpfs</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">                              6.3G</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">     0</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">  6.3G</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">   0%</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /run/user/1000</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 最后四行代表挂载已经成功被系统成功识别到了</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">/dev/sda</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">                            15T</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">   12K</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">   14T</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">   1%</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /data/intelligent_data</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">/dev/sdb</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">                            15T</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">   12K</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">   14T</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">   1%</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /data/business_data</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">/dev/sdc</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">                            15T</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">   12K</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">   14T</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">   1%</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /data/backup_data</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">/dev/sdd</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">                            15T</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">   28K</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">   14T</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">   1%</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /data/other_data</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们顺便给每一个用户的家目录创建一个 <code>data</code> 目录，并且目录下面都使用软链接挂载好四个目录，方便每一个用户进行使用。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 快速创建软连接的脚本</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> vim</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> create_symlinks.sh</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &amp;&amp;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> cat</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> create_symlinks.sh</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#!/bin/bash</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">### @author &lt;a href=&quot;https://github.com/xiaogithubooo&quot;&gt;limou3434&lt;/a&gt; ###</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">### @from &lt;a href=&quot;https://xxx.com&quot;&gt;xxx&lt;/a&gt; ###</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 遍历 /home 下的所有用户目录</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">for</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> user</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> in</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /home/*</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> do</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    # 创建软链接</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    sudo</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> rm</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -rf</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">$user/data</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    sudo</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ln</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -s</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /data</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">$user/data</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    echo</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">软链接已为用户 $user 创建</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">done</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 确保 root 用户也有该目录</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">sudo</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> rm</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -rf</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /root/data</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">sudo</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ln</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -s</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /data</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /root/data</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container important"><p class="hint-container-title">重要</p><p>补充：挂载新的目录后会自动出现 <code>lost+found</code>，这是 <code>Linux</code> 文件系统中（特别是在使用 <code>ext4</code>、<code>ext3</code> 等格式时）一个自动创建的目录。它的存在是为了在文件系统出现问题时（如系统崩溃或电源故障）提供数据恢复的途径。</p><ul><li><p><strong>文件系统一致性检查 (<code>fsck</code>) 的需要</strong>：当 Linux 系统在启动时检测到文件系统不一致或错误时，会自动运行文件系统检查工具（<code>fsck</code>）。如果有损坏的文件或无法关联到具体目录的文件碎片，<code>fsck</code> 会将这些数据放入 <code>lost+found</code> 目录中，以便用户可以手动检查和恢复。</p></li><li><p><strong>文件恢复的临时存放点</strong>：当某个文件丢失或损坏时，无法准确地知道它原本属于哪个目录，<code>fsck</code> 就会把这些无法恢复到原始位置的文件放入 <code>lost+found</code>，而不是完全删除它们。</p></li><li><p><strong>自动创建</strong>：每次你格式化磁盘为 <code>ext</code> 文件系统时，<code>lost+found</code> 目录会被自动创建在文件系统的根目录下（例如 <code>/mnt/your_partition/lost+found</code>）。</p></li><li><p><strong>文件恢复</strong>：通常情况下，这个目录是空的，但在文件系统出问题后，可能会出现一些无法确定原位置的文件和数据块。</p></li></ul><p>可以删除 <code>lost+found</code> 吗？虽然可以删除 <code>lost+found</code> 目录，但不建议这样做。因为它是文件系统恢复机制的一部分，删除它不会对日常使用造成影响，但在出现问题时无法通过 <code>fsck</code> 恢复文件。即便删除，下一次运行 <code>fsck</code> 或修复文件系统时，它也会再次自动创建。</p></div><h2 id="_13-内存管理" tabindex="-1"><a class="header-anchor" href="#_13-内存管理"><span>13.内存管理</span></a></h2><p>首先要清楚操作系统需要管理内存的什么，然后再来详细讨论内存管理的细节。</p>`,73)),h(l,{id:"mermaid-1724",code:"eJxLL0osyFAIceFSAALH6KdtrU/Xzni+buHzCW2xEDEFXV07Bafopx1tL1t7n86e92zKNmQZ5+inczY8ndvwYu+aZ72LkGVcooFGPW1a8WT/3GddS5BlXKOfr9z1cvqWZ50rn26cGssFAFZTOUI="}),s[7]||(s[7]=n('<blockquote><p>注意：既然操作系统已经有对应的内存保护机制了，为什么 <code>C/C++</code> 这类语言会被说为内存不安全语言呢？这主要是操作系统没有办法保证一个进程内部的内存安全，只能保证不同进程的相互之间的内存安全...</p></blockquote><h3 id="_12-1-分配回收" tabindex="-1"><a class="header-anchor" href="#_12-1-分配回收"><span>12.1.分配回收</span></a></h3><h4 id="_12-1-1-连续分配管理" tabindex="-1"><a class="header-anchor" href="#_12-1-1-连续分配管理"><span>12.1.1.连续分配管理</span></a></h4><p>这种方式给用户分配内存时地址必须是连续的。</p><h5 id="_12-1-1-1-单一连续分配" tabindex="-1"><a class="header-anchor" href="#_12-1-1-1-单一连续分配"><span>12.1.1.1.单一连续分配</span></a></h5><p>在单一连续分配方式中，内存被分为系统区和用户区。</p><ul><li>系统区用于存放操作系统的数据和代码</li><li>用户区用于存放用户进程的数据和代码</li></ul><p>内存中同一个时刻只能有一个用户程序，该用户程序独占整个用户区空间。</p><p>优劣：该分配方法实现简单、无外部碎片；但是已经是历史（早期的 <code>MS-DOS</code> 就是这样的分配策略），只适用于单用户单任务的操作系统，并且有内部碎片，利用效率也比较低。但这种一个程序独占一个空间的思路也影响了后续进程地址空间的设计...</p><blockquote><p>区别：外部碎片和内部碎片。</p><p>外部碎片是指在内存中分配和释放过程中，虽然总的空闲内存足够，但是这些空闲内存块是不连续的，导致无法满足较大内存块的请求。</p><p>内部碎片是指在内存分配中，分配的内存块比实际需要的内存大，导致在内存块内部有未使用的空间。</p></blockquote><h5 id="_12-1-1-2-固定分区分配" tabindex="-1"><a class="header-anchor" href="#_12-1-1-2-固定分区分配"><span>12.1.1.2.固定分区分配</span></a></h5><p>为了支持多道程序并解决程序之间的相互干扰问题，以前的操作系统也曾引入了将用户空间划分为若干个固定大小/不定大小分区的内存管理方式。</p><p>优劣：这种分配方式不会产生内存碎片，这种方式是最早和最简单的多道程序内存管理方式。不过这种方式需要被操作系统所管理，就需要构建对应的分区表，记录分区的大小、起始地址、状态等字段...</p><h5 id="_12-1-1-3-动态分区分配" tabindex="-1"><a class="header-anchor" href="#_12-1-1-3-动态分区分配"><span>12.1.1.3.动态分区分配</span></a></h5><p>又称为可变分区分配，是一种更加灵活的内存管理方式。与固定分区分配不同，这种方法不会预先划分内存分区。而是根据某些算法，在进程装入内存时，根据进程的大小，从空闲分区链表中动态地选择分区进行合并或拆解，并使总分区的大小正好适合进程的需要。因此，系统分区的大小和数目是可变的。</p><p>而此时管理动态分区所使用的数据结构可以是空闲分区表或者空闲分区链，内部一定会存储分区的大小和起始位置信息等。并且还有对应的动态分区分配算法，决定一个进程能使用的内存区。</p><p>优劣：这种分配方式不会产生内部碎片，但有可能产生外部碎片，我们一般担忧的都是内部碎片的问题...并且有一个比较严重的问题，如果一个进程的大小过大，则有可能导致内存溢出。</p><blockquote><p>补充：实际上释放内存就是把表项或者链表的形式进行对应的修改，例如把大小减少、置为 <code>0</code>、删除对应的表记录、合并空闲分区等方式...</p></blockquote><blockquote><p>补充：动态分区分配算法主要有四种。</p><ul><li><strong>首次适应算法</strong>，每次都从低地址开始查找，找到第一个满足大小的空闲分区（其实就是查询空闲内存分区表/链表），这个分区表/链表是按照地址进行排列的。</li><li><strong>最佳适应算法</strong>，把空闲分区表/链表按空间大小升序排列，从空间较小的开始，寻找最小适应的内存分区进行分配（但是有可能导致出现越来越多外部碎片）。</li><li><strong>最坏适应算法</strong>，就是把最佳适应算法变为降序查找了，可以避免外部碎片变多</li><li><strong>邻近适应算法</strong>，把地址按递增排序，每次分配内存都从上一次查找的位置开始找到适合的空闲内存分区进行分配，因此这种可以使用循环链表实现分区表，可以减少遍历提高内存利用率。</li></ul></blockquote><h4 id="_12-1-2-非连续分配管理" tabindex="-1"><a class="header-anchor" href="#_12-1-2-非连续分配管理"><span>12.1.2.非连续分配管理</span></a></h4><ul><li><p>基本分页存储管理，把内存空间进行分页，每一个页框大小都是 <code>4KB</code> 大小，并且都有一个编号。可执行文件运行的时候也会生成页地址，填入对应的页框中。而这个一一映射的关系使用页表进行存储（存储块号还是存储地址看实现，一般是使用块号）。这会导致在内存中地址不连续，但在进程地址空间中是连续的。不过除了寻找内存块，还需要结合页内偏移量找到更加准确的位置。</p><p>而除了使用页表，还可以使用存储在寄存器中的快表 <code>TLB</code>（缓存了最近访问的页表副本）来加快访问映射的内存（而页表也可以称为慢表）。</p><p>而一个单页表的机制有可能导致页表很长，这个时候就会使用分级页表，避免页表过长，这种结构就很适合一些树形结构了...这样就可以不用把所有的子页表全部加载进内存了，用时再发生缺页中断，从磁盘中缓存即可。</p><figure><img src="'+M+'" alt="image-20240614094403060" tabindex="0" loading="lazy"><figcaption>image-20240614094403060</figcaption></figure><blockquote><p>补充：快速确定页号和偏移量。</p><figure><img src="'+O+'" alt="image-20240614093136668" tabindex="0" loading="lazy"><figcaption>image-20240614093136668</figcaption></figure><figure><img src="'+I+'" alt="image-20240614093352549" tabindex="0" loading="lazy"><figcaption>image-20240614093352549</figcaption></figure></blockquote></li><li><p>基本分段存储管理，分段就不会像分页一样无脑，会有类似 <code>C</code> 地址空间一样类似根据功能来划分不同的段，然后再根据段来填写段表。段表除了存储段号，还会存储段长和基址。不过由于各个段大小不同，就需要进行一定的越界检查。并且比分页要更加容易标记一个区域是否可以被共享。并且也可以使用类似快表的缓存机制。</p><figure><img src="'+z+'" alt="image-20240614105104366" tabindex="0" loading="lazy"><figcaption>image-20240614105104366</figcaption></figure></li><li><p>段页式存储管理，就是把段表和页表一起保留的一种综合存储方式。这种方式就很类似 <code>C</code> 语言根据地址分布进行编程，然后加载到内存中时使用两个表一起管理内存分配问题。在这种方式的编程中，可以很明显发现分段对于程序员时可见的，但是分页是不可见的。</p><figure><img src="'+T+'" alt="image-20240614110254057" tabindex="0" loading="lazy"><figcaption>image-20240614110254057</figcaption></figure></li></ul><h3 id="_12-2-地址转化" tabindex="-1"><a class="header-anchor" href="#_12-2-地址转化"><span>12.2.地址转化</span></a></h3><p>在可执行文件加载进内存有三种方式，这个加载的过程中就涉及到了地址转化的问题。</p><ul><li>绝对装入：编译程序编译源代码时，生成的目标代码中包含了程序和数据在内存中的绝对地址信息。这些地址信息通常是直接写入到生成的目标文件中的。在加载时直接填写到对应的内存空间，这很不灵活，几乎无法迁移到别的主机进行运行。</li><li>可重定位装入：静态重定位（可重定位装入）是一种在早期计算机系统中常见的装入程序的方式，它允许将编译后的模块（或可执行文件）全部加载到内存中的适当位置，会进行地址重定位，将逻辑地址（也称为相对地址）转换为实际的物理地址。最简单的方式就是对可执行文件内的所有地址全部加上某个数值，但如果没有足够的内存，有可能导致无法运行。并且程序的运行过程中如果有数据发生了移动，就会立刻导致出错。</li><li>动态运行时装入：在动态重定位中，编译后的模块中的地址仍然是从 <code>0</code> 开始的逻辑地址。这些逻辑地址在程序装入内存后并不会立即转换为实际的物理地址。而把地址转换推迟到程序真正需要执行的时候再进行，这个转化过程时通过重定位寄存器来支持的，只需要逻辑地址加上寄存器值就可以得到物理地址了。并且可以运行部分的程序，进而提高内存利用率。</li></ul><blockquote><p>补充：类似的链接模块也有类似的道理。</p></blockquote><h3 id="_12-3-存储保护" tabindex="-1"><a class="header-anchor" href="#_12-3-存储保护"><span>12.3.存储保护</span></a></h3><p>其实就是利用寄存器，进程可以保存上下文数据，自然也可以保存一份逻辑地址的最大值。然后被 <code>CPU</code> 加载后，由 <code>CPU</code> 检查所有的需要填入的物理地址是否超过逻辑最大值对应的物理地址即可，若是则说明越界，进程被强制退出。</p><h3 id="_12-4-空间拓展" tabindex="-1"><a class="header-anchor" href="#_12-4-空间拓展"><span>12.4.空间拓展</span></a></h3><p>之前我有隐约提到进程可以分块加载进内存，进而在 <code>CPU</code> 内来进行部分运行。但太泛化了，我们来详细看一下。</p><h4 id="_12-4-1-覆盖技术" tabindex="-1"><a class="header-anchor" href="#_12-4-1-覆盖技术"><span>12.4.1.覆盖技术</span></a></h4><p>将一个进程分为多个段模块，然后把内存分为固定区和覆盖区，然后常用的段模块就长期被加载在内存中，覆盖区就动态加载覆盖其他段模块。</p><p>但是哪些是常用的段模块操作系统是无法获知的，因此这种技术必须由程序员手动声明覆盖结构，也就增加了用户的编码负担。因此覆盖技术已经是非常早期的技术了。</p><h4 id="_12-4-2-交换技术" tabindex="-1"><a class="header-anchor" href="#_12-4-2-交换技术"><span>12.4.2.交换技术</span></a></h4><p>交换技术则是强调在内存空间紧张的时候，系统将内存中的某些进程暂时换出外存，再把外存中已具备执行条件的进程换入内存。</p><p>因此磁盘也需要对交换做交换区域和文件区域的划分。通常采用连续分配方式提高换出换入的速度，因此比文件区的 <code>IO</code> 速度要块许多。</p><blockquote><p>补充：一般会把 <code>PCB</code> 进程管理信息常驻在内存中而不进行换出。</p></blockquote><h4 id="_12-4-3-虚拟技术" tabindex="-1"><a class="header-anchor" href="#_12-4-3-虚拟技术"><span>12.4.3.虚拟技术</span></a></h4><p>基于非连续分配存储管理，再加上虚拟地址就会得到请求分页、请求分段、请求段页存储管理机制，如果发现表内对应内存数据还没有载入，就进行请求。同时保证内存空间不够时，进行置换换出外存。</p><p>而这种机制的实现就需要给基本的表中添加一些字段。</p><figure><img src="'+N+'" alt="image-20240614111756697" tabindex="0" loading="lazy"><figcaption>image-20240614111756697</figcaption></figure><h4 id="_12-4-4-页面置换" tabindex="-1"><a class="header-anchor" href="#_12-4-4-页面置换"><span>12.4.4.页面置换</span></a></h4><p>当内存不够时，就会发生页面置换。页面置换算法就是追求尽可能少的缺页中断。</p><figure><img src="'+R+'" alt="image-20240614121308987" tabindex="0" loading="lazy"><figcaption>image-20240614121308987</figcaption></figure><figure><img src="'+U+'" alt="image-20240614121431419" tabindex="0" loading="lazy"><figcaption>image-20240614121431419</figcaption></figure><figure><img src="'+G+'" alt="image-20240614121525547" tabindex="0" loading="lazy"><figcaption>image-20240614121525547</figcaption></figure><figure><img src="'+S+'" alt="image-20240614121644583" tabindex="0" loading="lazy"><figcaption>image-20240614121644583</figcaption></figure><figure><img src="'+P+'" alt="image-20240614121748836" tabindex="0" loading="lazy"><figcaption>image-20240614121748836</figcaption></figure><figure><img src="'+W+'" alt="image-20240614121929643" tabindex="0" loading="lazy"><figcaption>image-20240614121929643</figcaption></figure><figure><img src="'+Y+'" alt="image-20240614122116647" tabindex="0" loading="lazy"><figcaption>image-20240614122116647</figcaption></figure><figure><img src="'+J+'" alt="image-20240614122137441" tabindex="0" loading="lazy"><figcaption>image-20240614122137441</figcaption></figure><figure><img src="'+Z+'" alt="image-20240614122316298" tabindex="0" loading="lazy"><figcaption>image-20240614122316298</figcaption></figure><figure><img src="'+K+'" alt="image-20240614122333876" tabindex="0" loading="lazy"><figcaption>image-20240614122333876</figcaption></figure><figure><img src="'+$+'" alt="image-20240614122932730" tabindex="0" loading="lazy"><figcaption>image-20240614122932730</figcaption></figure><figure><img src="'+H+'" alt="image-20240614123239927" tabindex="0" loading="lazy"><figcaption>image-20240614123239927</figcaption></figure><p>还有一些关于驻留集的概念，驻留集是指请求分页存储管理中可以给进程分配的物理块的集合，在采取了虚拟存储技术的系统中，驻留及大小一般小于进程的总大小（但如果一次进程页面不多，而驻留集又太小，有可能导致频繁缺页中断）。</p><figure><img src="'+V+'" alt="image-20240614130339082" tabindex="0" loading="lazy"><figcaption>image-20240614130339082</figcaption></figure><figure><img src="'+Q+'" alt="image-20240614131129469" tabindex="0" loading="lazy"><figcaption>image-20240614131129469</figcaption></figure><p>调入页面时机</p><figure><img src="'+X+'" alt="image-20240614131301594" tabindex="0" loading="lazy"><figcaption>image-20240614131301594</figcaption></figure><p>从何处调入界面</p><figure><img src="'+j+'" alt="image-20240614131433546" tabindex="0" loading="lazy"><figcaption>image-20240614131433546</figcaption></figure><figure><img src="'+ss+'" alt="image-20240614131527058" tabindex="0" loading="lazy"><figcaption>image-20240614131527058</figcaption></figure><figure><img src="'+is+'" alt="image-20240614131608530" tabindex="0" loading="lazy"><figcaption>image-20240614131608530</figcaption></figure>',63))])}const ks=k(as,[["render",ns]]),es=JSON.parse('{"path":"/1.%E7%BC%96%E7%A0%81%E4%BF%AE%E5%85%BB/3.%E7%B3%BB%E7%BB%9F%E7%BD%91%E7%BB%9C/spnggbc7/","title":"磁盘内存","lang":"zh-CN","frontmatter":{"createTime":"2025/04/09 23:31:29","permalink":"/1.编码修养/3.系统网络/spnggbc7/","title":"磁盘内存","description":"1.文件概念 1.1.文件读写 在谈及系统接口之前，我们先来从 C 语言的角度来谈及一些前要知识，以辅助我们后续来理解系统 IO。 我们知道，在 C 语言中，有很多用于文件输入输出的接口。 补充：C/C++ 程序会默认打开三个文件流：标准输入、标准输出、标准错误，这也就是为什么在没有手动打开（open）键盘和显示器的情况下，却依旧可以使用 printf...","head":[["meta",{"property":"og:url","content":"https://limou3434.github.io/work-blog-website/work-blog-website/1.%E7%BC%96%E7%A0%81%E4%BF%AE%E5%85%BB/3.%E7%B3%BB%E7%BB%9F%E7%BD%91%E7%BB%9C/spnggbc7/"}],["meta",{"property":"og:site_name","content":"缡墨"}],["meta",{"property":"og:title","content":"磁盘内存"}],["meta",{"property":"og:description","content":"1.文件概念 1.1.文件读写 在谈及系统接口之前，我们先来从 C 语言的角度来谈及一些前要知识，以辅助我们后续来理解系统 IO。 我们知道，在 C 语言中，有很多用于文件输入输出的接口。 补充：C/C++ 程序会默认打开三个文件流：标准输入、标准输出、标准错误，这也就是为什么在没有手动打开（open）键盘和显示器的情况下，却依旧可以使用 printf..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-19T14:21:17.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-19T14:21:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"磁盘内存\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-19T14:21:17.000Z\\",\\"author\\":[]}"]]},"headers":[],"readingTime":{"minutes":86.03,"words":25808},"git":{"updatedTime":1745072477000,"contributors":[{"name":"limou3434","username":"limou3434","email":"898738804@qq.com","commits":7,"avatar":"https://avatars.githubusercontent.com/limou3434?v=4","url":"https://github.com/limou3434"},{"name":"898738804@qq.com","username":"","email":"898738804@qq.com","commits":1,"avatar":"https://gravatar.com/avatar/99b785fec2313bb0333d61afc154ec6ac172fa3627c64cb57445ad6fcffd491b?d=retro"}]},"autoDesc":true,"filePathRelative":"notes/1.编码修养/3.系统网络/014_ljp_2023_09_14_磁盘内存.md","categoryList":[{"id":"4358b5","sort":10000,"name":"notes"},{"id":"557f7c","sort":1,"name":"编码修养"},{"id":"7ab59a","sort":3,"name":"系统网络"}],"bulletin":true}');export{ks as comp,es as data};
