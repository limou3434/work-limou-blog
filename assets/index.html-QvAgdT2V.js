import{_ as i,c as a,b as n,o as e}from"./app-DcSFSDZX.js";const l={};function t(p,s){return e(),a("div",null,s[0]||(s[0]=[n(`<h2 id="_1-网络诞生" tabindex="-1"><a class="header-anchor" href="#_1-网络诞生"><span>1.网络诞生</span></a></h2><p>那会人们刚刚整理好关于计算机和计算机之间的传输问题，明确了私网和公网的概念。</p><h2 id="_2-静态网站" tabindex="-1"><a class="header-anchor" href="#_2-静态网站"><span>2.静态网站</span></a></h2><p>这个阶段，人们知道服务器其实也是一台可以被公开访问的电脑，人们使用类似 <code>Nginx</code> 这种后端服务器程序，运行在特定 <code>IP</code> 和 <code>PORT</code> 上，管理众多的静态 <code>HTML</code> 页面，那会的应用就是静态网站，只能用来读取。这个阶段已经普及了浏览器，浏览器用户在 <code>URL</code> 中请求了什么页面，后端服务端程序就会根据请求返回服务器上对应路径存储的数据。</p><h2 id="_3-动态网站" tabindex="-1"><a class="header-anchor" href="#_3-动态网站"><span>3.动态网站</span></a></h2><p>人们意识到不一定用户访问什么资源，服务器上就一定需要存在对应资源，页面路由和请求接口可以发生解耦。</p><h3 id="_3-1-前后端不分离的服务端渲染-ssr" tabindex="-1"><a class="header-anchor" href="#_3-1-前后端不分离的服务端渲染-ssr"><span>3.1.前后端不分离的服务端渲染（SSR）</span></a></h3><ol><li>发送 <strong>URL 请求</strong> 用户在浏览器中访问一个页面，例如 <code>https://example.com/blog/post?id=123</code></li><li><strong>服务器端处理</strong><ul><li>服务器上的 <code>PHP</code> 脚本 <code>post.php</code> 接收 <code>id=123</code> 参数</li><li><code>PHP</code> 读取数据库中的内容（例如 <code>MySQL</code>）获取对应的文章数据</li><li><code>PHP</code> 脚本动态生成包含文章内容的 <code>HTML</code> 页面，将数据填充进 <code>HTML</code> 模板中</li></ul></li><li><strong>返回 HTML 页面</strong><ul><li>服务器将生成好的 <code>HTML</code> 返回给浏览器</li><li>浏览器直接渲染 <code>HTML</code>，不需要额外的客户端渲染逻辑</li></ul></li></ol><h3 id="_3-2-前后端不分离的客户端渲染-csr" tabindex="-1"><a class="header-anchor" href="#_3-2-前后端不分离的客户端渲染-csr"><span>3.2.前后端不分离的客户端渲染（CSR）</span></a></h3><ol><li><p><strong>初始页面请求</strong> 用户第一次访问时，请求地址为：<code>https://example.com/news</code>服务器返回一个基础的 <code>HTML</code> 页面，其中包含页面结构和用于动态加载数据的 <code>JS</code> 代码，这些 <code>JS</code> 代码是内嵌到页面文件中的。</p><div class="language-php+html line-numbers-mode" data-highlighter="shiki" data-ext="php+html" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>&lt;!DOCTYPE html&gt;</span></span>
<span class="line"><span>&lt;html lang=&quot;en&quot;&gt;</span></span>
<span class="line"><span>&lt;head&gt;</span></span>
<span class="line"><span>    &lt;meta charset=&quot;UTF-8&quot;&gt;</span></span>
<span class="line"><span>    &lt;title&gt;News&lt;/title&gt;</span></span>
<span class="line"><span>&lt;/head&gt;</span></span>
<span class="line"><span>&lt;body&gt;</span></span>
<span class="line"><span>    &lt;h1&gt;Latest News&lt;/h1&gt;</span></span>
<span class="line"><span>    &lt;div id=&quot;news-list&quot;&gt;</span></span>
<span class="line"><span>        &lt;!-- 新闻内容将通过 JavaScript 动态加载 --&gt;</span></span>
<span class="line"><span>    &lt;/div&gt;</span></span>
<span class="line"><span>    &lt;script&gt;</span></span>
<span class="line"><span>        // 页面加载完成后通过 JavaScript 请求新闻内容</span></span>
<span class="line"><span>        document.addEventListener(&quot;DOMContentLoaded&quot;, function() {</span></span>
<span class="line"><span>            fetch(&#39;/api/get_news.php&#39;)</span></span>
<span class="line"><span>                .then(response =&gt; response.json())</span></span>
<span class="line"><span>                .then(data =&gt; {</span></span>
<span class="line"><span>                    const newsList = document.getElementById(&#39;news-list&#39;);</span></span>
<span class="line"><span>                    data.forEach(news =&gt; {</span></span>
<span class="line"><span>                        const newsItem = document.createElement(&#39;div&#39;);</span></span>
<span class="line"><span>                        newsItem.className = &#39;news-item&#39;;</span></span>
<span class="line"><span>                        newsItem.innerHTML = \`&lt;h2&gt;\${news.title}&lt;/h2&gt;&lt;p&gt;\${news.content}&lt;/p&gt;\`;</span></span>
<span class="line"><span>                        newsList.appendChild(newsItem);</span></span>
<span class="line"><span>                    });</span></span>
<span class="line"><span>                });</span></span>
<span class="line"><span>        });</span></span>
<span class="line"><span>    &lt;/script&gt;</span></span>
<span class="line"><span>&lt;/body&gt;</span></span>
<span class="line"><span>&lt;/html&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>动态数据获取</strong> 在 <code>/api/get_news.php</code> 中，服务器端 <code>PHP</code> 脚本返回 <code>JSON</code> 格式的数据，但不渲染整个页面（有点想 <code>CGI</code> 程序）。</p><div class="language-php line-numbers-mode" data-highlighter="shiki" data-ext="php" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;?</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">php</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 连接数据库并获取新闻数据</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">$</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">mysqli</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> mysqli</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">localhost</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">username</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">password</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">news_db</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">$</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">query</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">SELECT</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> title, content </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">FROM</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> news</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">$</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">result</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> $</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">mysqli</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">query</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">($</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">query</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">$</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">news</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [];</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">while</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ($</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">row</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> $</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">result</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">fetch_assoc</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">())</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    $</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">news</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[]</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> $</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">row</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">$</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">mysqli</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">close</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 返回 JSON 数据</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">header</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Content-Type: application/json</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">echo</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> json_encode</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">($</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">news</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><blockquote><p>补充：由此可见前后端是否分离和在那里渲染时无关的，并且我们这里说的渲染是指渲染为完整的可以交给浏览器的 <code>HTML</code> 页面文件，而不是指浏览器把 <code>HTML</code> 页面文件“渲染”到浏览器上的渲染...完整来说，前者被称为 <code>HTML</code> 渲染，后者被称为界面渲染。</p></blockquote><h2 id="_4-前后解耦" tabindex="-1"><a class="header-anchor" href="#_4-前后解耦"><span>4.前后解耦</span></a></h2><p>实际上浏览器的 <code>URL</code> 切换时，即便不发送请求，也可以被 <code>JS</code> 检测到（此时我们的 <code>JS</code> 发展得非常强大，只使用 <code>JS</code> 也可以生成 <code>HTML</code> 和 <code>CSS</code>），因此我们可以根据这一特点，让 <code>JS</code> 前端代码和后端代码分离，单独部署到另外一个服务器上，这样就会有两个服务器，前端服务器和后端服务器，分别部署前端服务代码和后端服务代码，根据这一点结合两种渲染方式，就可以得到四种类别的应用：</p><ul><li>前后端不分离 <code>SSR</code></li><li>前后端不分离 <code>CSR</code></li><li>前后端分离 <code>SSR</code></li><li>前后端分离 <code>CSR</code></li></ul><p>前后端是否分离，抉择端的渲染，是权衡开发难度的</p><h2 id="_5-结合渲染" tabindex="-1"><a class="header-anchor" href="#_5-结合渲染"><span>5.结合渲染</span></a></h2><h2 id="_6-其他开发" tabindex="-1"><a class="header-anchor" href="#_6-其他开发"><span>6.其他开发</span></a></h2>`,17)]))}const d=i(l,[["render",t]]),k=JSON.parse('{"path":"/1.%E7%BC%96%E7%A0%81%E4%BF%AE%E5%85%BB/3.%E7%B3%BB%E7%BB%9F%E7%BD%91%E7%BB%9C/tqi8br7j/","title":"网络应用演变","lang":"zh-CN","frontmatter":{"createTime":"2025/04/09 23:31:29","permalink":"/1.编码修养/3.系统网络/tqi8br7j/","title":"网络应用演变","description":"1.网络诞生 那会人们刚刚整理好关于计算机和计算机之间的传输问题，明确了私网和公网的概念。 2.静态网站 这个阶段，人们知道服务器其实也是一台可以被公开访问的电脑，人们使用类似 Nginx 这种后端服务器程序，运行在特定 IP 和 PORT 上，管理众多的静态 HTML 页面，那会的应用就是静态网站，只能用来读取。这个阶段已经普及了浏览器，浏览器用户在...","head":[["meta",{"property":"og:url","content":"https://limou3434.github.io/work-blog-website/work-blog-website/1.%E7%BC%96%E7%A0%81%E4%BF%AE%E5%85%BB/3.%E7%B3%BB%E7%BB%9F%E7%BD%91%E7%BB%9C/tqi8br7j/"}],["meta",{"property":"og:site_name","content":"缡墨"}],["meta",{"property":"og:title","content":"网络应用演变"}],["meta",{"property":"og:description","content":"1.网络诞生 那会人们刚刚整理好关于计算机和计算机之间的传输问题，明确了私网和公网的概念。 2.静态网站 这个阶段，人们知道服务器其实也是一台可以被公开访问的电脑，人们使用类似 Nginx 这种后端服务器程序，运行在特定 IP 和 PORT 上，管理众多的静态 HTML 页面，那会的应用就是静态网站，只能用来读取。这个阶段已经普及了浏览器，浏览器用户在..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-19T14:21:17.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-19T14:21:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"网络应用演变\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-19T14:21:17.000Z\\",\\"author\\":[]}"]]},"headers":[],"readingTime":{"minutes":3.3,"words":989},"git":{"updatedTime":1745072477000,"contributors":[{"name":"limou3434","username":"limou3434","email":"898738804@qq.com","commits":6,"avatar":"https://avatars.githubusercontent.com/limou3434?v=4","url":"https://github.com/limou3434"}]},"autoDesc":true,"filePathRelative":"notes/1.编码修养/3.系统网络/030_ljp_2024_11_12_网络应用演变.md","categoryList":[{"id":"4358b5","sort":10000,"name":"notes"},{"id":"557f7c","sort":1,"name":"编码修养"},{"id":"7ab59a","sort":3,"name":"系统网络"}],"bulletin":true}');export{d as comp,k as data};
