import{_ as i,c as e,b as l,o as a}from"./app-DcSFSDZX.js";const n={};function h(t,s){return a(),e("div",null,s[0]||(s[0]=[l(`<h2 id="_1-shell-的含义" tabindex="-1"><a class="header-anchor" href="#_1-shell-的含义"><span>1.Shell 的含义</span></a></h2><p><code>Shell(外壳)</code> 与 <code>kernel(内核)</code> 相对应，比喻内核的最外层，用户跟内核交互的对话界面。对 <code>Shell</code> 的不同使用会产生不同的理解：</p><ul><li><code>Shell</code> 是程序，提供一个与用户对话的环境。接收到用户输入的命令，将命令送入操作系统执行，并将结果返回给用户。</li><li><code>Shell</code> 是命令解释器，解释用户输入的命令。支持变量、条件判断、循环操作等语法，所以用户可以用 <code>Shell</code> 命令写出各种小程序，又称为 <code>script(脚本)</code>。这些脚本都通过 <code>Shell</code> 的解释执行，而不通过编译。</li><li><code>Shell</code> 是一个工具箱，提供了各种小工具，供用户方便地使用操作系统的功能。</li></ul><h2 id="_2-shell-的种类" tabindex="-1"><a class="header-anchor" href="#_2-shell-的种类"><span>2.Shell 的种类</span></a></h2><p>历史上主要的 <code>Shell</code> 有下面这些：</p><ul><li><code>Bourne Shell（sh）</code></li><li><code>Bourne Again shell（bash）</code></li><li><code>C Shell（csh）</code></li><li><code>TENEX C Shell（tcsh）</code></li><li><code>Korn shell（ksh）</code></li><li><code>Z Shell（zsh）</code></li><li><code>Friendly Interactive Shell（fish）</code></li></ul><p><code>Bash</code> 是目前最常用的 <code>Shell</code>，本系列文章采用的都是 <code>bash</code> 作为解释器来展开脚本代码...</p><blockquote><p>补充：可以理解为 <code>Bash</code> 是 <code>Shell</code> 这个概念的一个具体实现的软件，因此 <code>Shell</code> 对应的软件实现有很多种，您也可以尝试自己写一个 <code>shell</code> 实现，在我的，不过需要您知道一定的系统接口知识。</p></blockquote><p>下面的命令可以查看当前系统的默认 <code>Shell</code>。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 查看系统的默认外壳程序</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> echo</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> $SHELL</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">/bin/bash</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了默认使用 <code>bash</code> 除了默认的 <code>bash</code> 以外，也可以查看系统是否有其他的已经安装好的外壳程序，下面是我的系统显示的结果。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 查看系统安装好的外壳程序</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> cat</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /etc/shells</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">/bin/sh</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">/bin/bash</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">/bin/tcsh</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">/bin/csh</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以直接使用 <code>tcsh、csh...</code> 切换不同的外壳解释器，因此当前正在使用的 <code>Shell</code> 不一定是默认的 <code>Shell</code>，一般来说，<code>ps</code> 命令结果的倒数第二行是当前的 <code>Shell</code> 程序。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 使用 ps 查看解释器</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> csh</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> # 切换当前解释器为 csh</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ps</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  PID</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> TTY</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">          TIME</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> CMD</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">16818</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> pts/3</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">    00:00:00</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> bash</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">28500</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> pts/3</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">    00:00:00</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> csh</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> # 这就是当前的解释器</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">28531</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> pts/3</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">    00:00:00</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ps</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用户可以通过 <code>bash</code> 命令的 <code>--version</code> 参数或者环境变量 <code>$BASH_VERSION</code>，查看本机的 <code>Bash</code> 版本。</p>`,15)]))}const c=i(n,[["render",h]]),p=JSON.parse('{"path":"/1.%E7%BC%96%E7%A0%81%E4%BF%AE%E5%85%BB/3.%E7%B3%BB%E7%BB%9F%E7%BD%91%E7%BB%9C/01ta8n80/","title":"脚本编程","lang":"zh-CN","frontmatter":{"createTime":"2025/04/09 23:31:29","permalink":"/1.编码修养/3.系统网络/01ta8n80/","title":"脚本编程","description":"1.Shell 的含义 Shell(外壳) 与 kernel(内核) 相对应，比喻内核的最外层，用户跟内核交互的对话界面。对 Shell 的不同使用会产生不同的理解： Shell 是程序，提供一个与用户对话的环境。接收到用户输入的命令，将命令送入操作系统执行，并将结果返回给用户。 Shell 是命令解释器，解释用户输入的命令。支持变量、条件判断、循环操...","head":[["meta",{"property":"og:url","content":"https://limou3434.github.io/work-blog-website/work-blog-website/1.%E7%BC%96%E7%A0%81%E4%BF%AE%E5%85%BB/3.%E7%B3%BB%E7%BB%9F%E7%BD%91%E7%BB%9C/01ta8n80/"}],["meta",{"property":"og:site_name","content":"缡墨"}],["meta",{"property":"og:title","content":"脚本编程"}],["meta",{"property":"og:description","content":"1.Shell 的含义 Shell(外壳) 与 kernel(内核) 相对应，比喻内核的最外层，用户跟内核交互的对话界面。对 Shell 的不同使用会产生不同的理解： Shell 是程序，提供一个与用户对话的环境。接收到用户输入的命令，将命令送入操作系统执行，并将结果返回给用户。 Shell 是命令解释器，解释用户输入的命令。支持变量、条件判断、循环操..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-19T14:21:17.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-19T14:21:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"脚本编程\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-19T14:21:17.000Z\\",\\"author\\":[]}"]]},"headers":[],"readingTime":{"minutes":2,"words":601},"git":{"updatedTime":1745072477000,"contributors":[{"name":"limou3434","username":"limou3434","email":"898738804@qq.com","commits":6,"avatar":"https://avatars.githubusercontent.com/limou3434?v=4","url":"https://github.com/limou3434"}]},"autoDesc":true,"filePathRelative":"notes/1.编码修养/3.系统网络/010_ljp_2024_05_11_脚本编程.md","categoryList":[{"id":"4358b5","sort":10000,"name":"notes"},{"id":"557f7c","sort":1,"name":"编码修养"},{"id":"7ab59a","sort":3,"name":"系统网络"}],"bulletin":true}');export{c as comp,p as data};
