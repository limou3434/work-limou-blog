import{_ as n,c as e,b as i,d as l,r as h,o as t}from"./app-DcSFSDZX.js";const k={};function p(d,s){const a=h("Mermaid");return t(),e("div",null,[s[0]||(s[0]=i('<h2 id="_1-铺垫概念" tabindex="-1"><a class="header-anchor" href="#_1-铺垫概念"><span>1.铺垫概念</span></a></h2><p>理解守护进程之前，我们要先来理解一些周边概念：</p><ul><li><p><strong>PGID</strong>：实际上一个进程除了 <code>pid、ppid</code> 还有一个组 <code>ID</code> 也就是 <code>PGID</code>，组长一般是父进程，也就是第一个被分配 <code>pid</code> 进程（不过值得注意的是 <code>bash</code> 本身自成一组）</p></li><li><p><strong>SID</strong>：进程还有一个会话 <code>ID</code> 也就是 <code>SID</code>，任何进行登录的用户，需要有多个进程（组）来给该用户提供服务，以及用户自己启动的进程或服务，最终都会属于同一个 <code>SID</code></p></li><li><p><strong>PPID</strong>：在 <code>bash</code> 中同时用管道启动多个进程，则这些进程都是兄弟进程（都有共同的 <code>PPID</code>），父进程都是 <code>bash</code>，可以通过管道来通信</p></li><li><p><strong>前台进程</strong>：和终端相关联的进程就是前台进程，简单说就是能从终端正常获取输入并且正常输出的进程（<code>bash</code> 本身就是一种前台进程）。而若一个进程被 <code>bash</code> 运行起来后，用户无法继续和 <code>bash</code> 进行交互，则说明前台进程从 <code>bash</code> 切换到了该进程</p></li><li><p><strong>登录和注销</strong>：<code>Windows</code> 下实际上也有登录和退出登录的概念，那就是“注销”而非“关机”选项，一旦注销，就会把当前用户启动的相关进程或服务全部杀掉，也可以达到解决卡顿的目的。</p></li></ul><h2 id="_2-守护进程" tabindex="-1"><a class="header-anchor" href="#_2-守护进程"><span>2.守护进程</span></a></h2>',4)),l(a,{id:"mermaid-36",code:"eJxLL0osyFAIceHiKi5NgnCUCoryk1OLi+PTi/JLC+INlbgUgMBRQykpsThDQVuhJLUoNzMvMUdJkys1LwW3RiOIRicNuLghUAtIyBkhZAQVckEIGRMyWE9PT4mL01VDCcSAqnXTUCoGqsjMzwOKuCno6topoHlDQQ1NxAhDBGgeFwAHElRj"}),s[1]||(s[1]=i(`<p>如果用户退出登录了，理论上上述会话内的进程和服务都需要被释放（大部分需要，不同版本的退出处理机制不一样）。</p><p>如果我们 <strong>让一个进程自成一个会话，就可以让该进程变成守护进程</strong>。而 <code>Linux</code> 就提供了 <code>&lt;unistd.h&gt;</code> 内的 <code>pid_tr setsid(void);</code> 系统调用，可以让一个进程变成会话。失败返回 <code>-1</code>，成功返回调用该函数的进程。</p><p>另外还需要保证调用进程不是进程组组长（组长不允许成为守护进程），可使用 <code>fork()</code> 创建的子进程来保证该进程不是组长。</p><blockquote><p>补充：而且 <code>Linux</code> 下还有关于守护进程的 <code>daemon()</code> 接口，可以让一个进程变成守护进程，但不怎么使用。</p></blockquote><p>下面我写一份代码，我先不运用这份代码，但是在之后的网络代码中会尝试进行运用，您可以先简单看看这里的代码：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//daemon.hpp</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">pragma</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> once</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">iostream</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">unistd.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">signal.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">signal.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">sys/types.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">sys/stat.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">fcntl.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//调用下述函数时，就会</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> MyDaemon</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    //1.忽略信号，避免服务端因为某些原因挂掉</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    signal</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">SIGPIPE</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> SIG_IGN</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> //防止运行过程中出现非法写入的问题（例如服务端写到一半时，客户端因为异常而被关闭），避免因为客户端出现问题，导致服务端跟着挂掉</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    signal</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">SIGCHLD</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> SIG_IGN</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> //不向父进程提醒，因此不回收子进程</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    //2.避免自己成为组长</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">fork</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &gt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        exit</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> //父进程直接正常终止</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    //下面是子进程的部分</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    //3.调用 setsid()</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    setsid</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> //成为新的会话</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    //4.标准输出、标准输入、标准错误的重定向（尤其是不能在屏幕上进行日志打印，一旦打印就有可能暂停和中止）</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> devNnll </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> open</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/dev/null</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> O_RDONLY </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">|</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> O_WRONLY</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> //在 Linux 中基本都有 /dev/null，其特点就是写入任何数据都会清空，也无法读取任何数据（文件黑洞）</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">devNnll </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        dup2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">devNnll</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> //oldfd 复制-&gt; newfd</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        dup2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">devNnll</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        dup2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">devNnll</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        close</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">devNnll</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另外，我们也可以看到，守护进程实际上就是一种被托管的特殊的孤儿进程。</p><h2 id="_3-发布作业" tabindex="-1"><a class="header-anchor" href="#_3-发布作业"><span>3.发布作业</span></a></h2><p><code>at</code> 命令用于在指定时间内执行一次性的任务，例如下面用法</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> at</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 10:46</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> PM</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">at</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">&gt; </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">echo</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Hello, world!</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ./temp</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">at</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">&gt; </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">EO</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">T</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">job</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 4</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> at</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Wed</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Apr</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 24</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 22:46:00</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2024</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这将在本日的晚上 <code>10:46</code> 点执行任务。要删除作业，可以使用 <code>atrm</code> 命令，后跟作业的 <code>ID</code>。</p><p>还有一个 <code>crontab</code> 可以设置可重复执行的、周期性的作业。</p><ol><li><p>创建或编辑 <code>crontab</code> 文件：使用 <code>crontab -e</code> 命令来编辑当前用户的 <code>crontab</code> 文件。如果之前没有设置过 <code>crontab</code>，它会打开一个新的编辑器，并在其中添加或编辑 <code>cron</code> 作业。如果已经有了 <code>crontab</code>，它会打开一个编辑器，允许您编辑现有的 <code>cron</code> 作业。</p></li><li><p>添加 <code>cron</code> 作业：在编辑器中按照 <code>cron</code> 作业的格式添加要执行的命令和时间规范，格式如下：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">分</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 时</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 日</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 月</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 周</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 命令</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>其中，分表示分钟（<code>0-59</code>），时表示小时（<code>0-23</code>），日表示一个月中的某一天（<code>1-31</code>），月表示月份（<code>1-12</code>），周表示一周中的某一天（<code>0-6</code>，<code>0</code> 代表周日），使用 <code>*</code> 就代表该时间段内的任意一个时间点，命令是要执行的命令或脚本。</p><p>例如，要在每分钟执行一个脚本，可以这样添加一个 <code>cron</code> 作业：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">0</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> *</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> *</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> *</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> *</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> echo</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">hello</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &gt;&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> mytest</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>保存和退出：编辑完成后，保存并退出编辑器。</p></li><li><p>列出当前的 <code>crontab</code> 文件：使用 <code>crontab -l</code> 命令列出当前用户的 <code>crontab</code> 文件中的所有作业。</p></li><li><p>删除 <code>crontab</code> 文件：使用 <code>crontab -r</code> 命令删除当前用户的 <code>crontab</code> 文件。</p></li></ol>`,13))])}const c=n(k,[["render",p]]),o=JSON.parse('{"path":"/1.%E7%BC%96%E7%A0%81%E4%BF%AE%E5%85%BB/3.%E7%B3%BB%E7%BB%9F%E7%BD%91%E7%BB%9C/z1wywjm1/","title":"常驻服务","lang":"zh-CN","frontmatter":{"createTime":"2025/04/09 23:31:29","permalink":"/1.编码修养/3.系统网络/z1wywjm1/","title":"常驻服务","description":"1.铺垫概念 理解守护进程之前，我们要先来理解一些周边概念： PGID：实际上一个进程除了 pid、ppid 还有一个组 ID 也就是 PGID，组长一般是父进程，也就是第一个被分配 pid 进程（不过值得注意的是 bash 本身自成一组） SID：进程还有一个会话 ID 也就是 SID，任何进行登录的用户，需要有多个进程（组）来给该用户提供服务，以及...","head":[["meta",{"property":"og:url","content":"https://limou3434.github.io/work-blog-website/work-blog-website/1.%E7%BC%96%E7%A0%81%E4%BF%AE%E5%85%BB/3.%E7%B3%BB%E7%BB%9F%E7%BD%91%E7%BB%9C/z1wywjm1/"}],["meta",{"property":"og:site_name","content":"缡墨"}],["meta",{"property":"og:title","content":"常驻服务"}],["meta",{"property":"og:description","content":"1.铺垫概念 理解守护进程之前，我们要先来理解一些周边概念： PGID：实际上一个进程除了 pid、ppid 还有一个组 ID 也就是 PGID，组长一般是父进程，也就是第一个被分配 pid 进程（不过值得注意的是 bash 本身自成一组） SID：进程还有一个会话 ID 也就是 SID，任何进行登录的用户，需要有多个进程（组）来给该用户提供服务，以及..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-19T14:21:17.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-19T14:21:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"常驻服务\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-19T14:21:17.000Z\\",\\"author\\":[]}"]]},"headers":[],"readingTime":{"minutes":4.66,"words":1399},"git":{"updatedTime":1745072477000,"contributors":[{"name":"limou3434","username":"limou3434","email":"898738804@qq.com","commits":7,"avatar":"https://avatars.githubusercontent.com/limou3434?v=4","url":"https://github.com/limou3434"}]},"autoDesc":true,"filePathRelative":"notes/1.编码修养/3.系统网络/018_ljp_2024_03_30_常驻服务.md","categoryList":[{"id":"4358b5","sort":10000,"name":"notes"},{"id":"557f7c","sort":1,"name":"编码修养"},{"id":"7ab59a","sort":3,"name":"系统网络"}],"bulletin":true}');export{c as comp,o as data};
